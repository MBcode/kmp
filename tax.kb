
;;; Current state of the KB (8/18/2014 21:26.47, KM 2.5.33)

(reset-kb)

(disable-slot-checking)       ; (Temporarily disable while rebuilding KB state)
                              ; (Will be restored to original value by final SETQ statements)

(disable-classification)      ; (Temporarily disable while rebuilding KB state)
                              ; (Will be restored to original value by final SETQ statements)

(disable-installing-inverses) ; (Temporarily disable while rebuilding KB state)
                              ; (Will be switched back on by (enable-installing-inverses) at the end)

;;; ---------- TAXONOMY ----------

(Agentive-Relation has 
  (superclasses (Relation)))

(Causal-Relation has 
  (superclasses (Relation)))

(CLIB-Slot-Group has 
  (superclasses (KM-Slot-Group)))

(EntityProperty has 
  (superclasses (Property)))

(EventProperty has 
  (superclasses (Property)))

(Interface-Slot has 
  (superclasses (Slot)))

(KM-Slot-Group has 
  (superclasses (Slot)))

(Meronymic-Relation has 
  (superclasses (Relation)))

(NL-Slot-Group has 
  (superclasses (KM-Slot-Group)))

(Participant-Relation has 
  (superclasses (Relation)))

(Property has 
  (superclasses (Slot)))

(PropertyProperty has 
  (superclasses (Property)))

(Relation has 
  (superclasses (Slot)))

(Shaken-Slot-Group has 
  (superclasses (KM-Slot-Group)))

(Slot has 
  (superclasses (Thing)))

(Spatial-Relation has 
  (superclasses (Relation)))

(Temporal-Relation has 
  (superclasses (Relation)))

(Situation has 
  (superclasses (Thing)))

(Absorb has 
  (superclasses (Take-In)))

(Acceleration-Constant has 
  (superclasses (Constant)))

(Acceleration-Scale has 
  (superclasses (Scale)))

(Acceleration-Value has 
  (superclasses (Property-Value)))

(Action has 
  (superclasses (Event)))

(Activate has 
  (superclasses (Make-Accessible)))

(Activity has 
  (superclasses (Event)))

(Add has 
  (superclasses (Action)))

(Administrative-District has 
  (superclasses (Territory)))

(Admit has 
  (superclasses (Unobstruct)))

(Age-Constant has 
  (superclasses (Constant)))

(Age-Scale has 
  (superclasses (Scale)))

(Agent-Role has 
  (superclasses (Role)))

(Aggregate has 
  (superclasses (Entity)))

(Air has 
  (superclasses (Gas-Substance)))

(Allocate-Resource has 
  (superclasses (Action)))

(Analysis has 
  (superclasses (Activity)))

(Angle-Constant has 
  (superclasses (Constant)))

(Angle-Value has 
  (superclasses (Property-Value)))

(Animacy-Constant has 
  (superclasses (Constant)))

(Animacy-Value has 
  (superclasses (Property-Value)))

(Animal has 
  (superclasses (Organism)))

(Architectural-Structure has 
  (superclasses (Artifact)))

(Area-Constant has 
  (superclasses (Constant)))

(Area-Scale has 
  (superclasses (Scale)))

(Area-Value has 
  (superclasses (Property-Value)))

(Artifact has 
  (superclasses (Inanimate-Object)))

(Assurance has 
  (superclasses (Message)))

(Attach has 
  (superclasses (Action)))

(Authorize has 
  (superclasses (Action)))

(Authorized has 
  (superclasses (Cliche)))

(Barrier has 
  (superclasses (Role)))

(Bathroom has 
  (superclasses (Room)))

(Be-Accessible has 
  (superclasses (State)))

(Be-Activated has 
  (superclasses (Be-Accessible)))

(Be-Attached-To has 
  (superclasses (Be-Touching)))

(Be-Available has 
  (superclasses (State)))

(Be-Blocked has 
  (superclasses (Be-Inaccessible)))

(Be-Broken has 
  (superclasses (Be-Damaged)))

(Be-Closed has 
  (superclasses (Be-Blocked)))

(Be-Concealed has 
  (superclasses (Be-Inaccessible)))

(Be-Confined has 
  (superclasses (Be-Obstructed)))

(Be-Contained has 
  (superclasses (State)))

(Be-Controlled has 
  (superclasses (State)))

(Be-Damaged has 
  (superclasses (State)))

(Be-Different has 
  (superclasses (State)))

(Be-Held has 
  (superclasses (Be-Obstructed)))

(Be-Inaccessible has 
  (superclasses (State)))

(Be-Known has 
  (superclasses (State)))

(Be-Obstructed has 
  (superclasses (Be-Inaccessible)))

(Be-Open has 
  (superclasses (Be-Unblocked)))

(Be-Related has 
  (superclasses (State)))

(Be-Restrained has 
  (superclasses (Be-Obstructed)))

(Be-Ruined has 
  (superclasses (Be-Broken)))

(Be-Shut-Out has 
  (superclasses (Be-Obstructed)))

(Be-Similar has 
  (superclasses (State)))

(Be-Sitting has 
  (superclasses (State)))

(Be-Stable has 
  (superclasses (State)))

(Be-Standing has 
  (superclasses (State)))

(Be-Stored has 
  (superclasses (State)))

(Be-Supported has 
  (superclasses (Be-Obstructed)))

(Be-Touching has 
  (superclasses (State)))

(Be-Unavailable has 
  (superclasses (State)))

(Be-Unblocked has 
  (superclasses (Be-Accessible)))

(Block has 
  (superclasses (Make-Inaccessible)))

(Breach has 
  (superclasses (Break)))

(Break has 
  (superclasses (Damage)))

(Break-Contact has 
  (superclasses (Action)))

(Breakability-Constant has 
  (superclasses (Constant)))

(Breakability-Scale has 
  (superclasses (Scale)))

(Breakability-Value has 
  (superclasses (Property-Value)))

(Breakfast has 
  (superclasses (Meal)))

(Bridge has 
  (superclasses (Architectural-Structure)))

(Brighten has 
  (superclasses (Increase)))

(Brightness-Constant has 
  (superclasses (Constant)))

(Brightness-Scale has 
  (superclasses (Scale)))

(Brightness-Value has 
  (superclasses (Property-Value)))

(Brunch has 
  (superclasses (Meal)))

(Building has 
  (superclasses (Architectural-Structure)))

(Building-Complex has 
  (superclasses (Architectural-Structure)))

(Buy has 
  (superclasses (Obtain)))

(Cabinet has 
  (superclasses (Furniture)))

(Capacity-Constant has 
  (superclasses (Constant)))

(Capacity-Scale has 
  (superclasses (Scale)))

(Capacity-Value has 
  (superclasses (Property-Value)))

(Cardinal has 
  (superclasses (Property-Group)))

(Carrier has 
  (superclasses (Role)))

(Carry has 
  (superclasses (Move)))

(Categorical has 
  (superclasses (Property-Group)))

(Ceiling has 
  (superclasses (Architectural-Structure)))

(Cell has 
  (superclasses (Living-Entity)))

(Chemical-Energy has 
  (superclasses (Energy)))

(Chemical-Entity has 
  (superclasses (Physical-Object)))

(Circumference-Constant has 
  (superclasses (Constant)))

(Circumference-Scale has 
  (superclasses (Scale)))

(City has 
  (superclasses (Administrative-District)))

(Class has 
  (superclasses (Thing)))

(Class-Definition-Viewpoint has 
  (superclasses (Viewpoint)))

(Cliche has 
  (superclasses (KM-Class)))

(Close has 
  (superclasses (Block)))

(Collide has 
  (superclasses (Make-Contact)))

(Color-Constant has 
  (superclasses (Constant)))

(Color-Value has 
  (superclasses (Property-Value)))

(Come-Together has 
  (superclasses (Action)))

(Command has 
  (superclasses (Express)))

(Committee has 
  (superclasses (Workgroup)))

(Communicate has 
  (superclasses (Action)))

(Community has 
  (superclasses (Aggregate)))

(Company has 
  (superclasses (Institution)))

(Compute-Maximum has 
  (superclasses (Method)))

(Compute-Minimum has 
  (superclasses (Method)))

(Compute-Qualitative-Maximum has 
  (superclasses (Method)))

(Compute-Qualitative-Minimum has 
  (superclasses (Method)))

(Compute-Quantitative-Maximum has 
  (superclasses (Method)))

(Compute-Quantitative-Minimum has 
  (superclasses (Method)))

(Conceal has 
  (superclasses (Make-Inaccessible)))

(Conceptual-Entity has 
  (superclasses (Intangible-Entity)))

(Conduit has 
  (superclasses (Role)))

(Confine has 
  (superclasses (Obstruct)))

(Connector has 
  (superclasses (Role)))

(Consistency-Constant has 
  (superclasses (Constant)))

(Consistency-Value has 
  (superclasses (Property-Value)))

(Constant has 
  (superclasses (Property-Group)))

(Construction has 
  (superclasses (Activity)))

(Consume has 
  (superclasses (Decrease)))

(Container has 
  (superclasses (Barrier)))

(Contract has 
  (superclasses (Decrease)))

(Convey has 
  (superclasses (Action)))

(Cool has 
  (superclasses (Decrease)))

(Copy has 
  (superclasses (Create)))

(Corporation has 
  (superclasses (Company)))

(Count-Viewpoint has 
  (superclasses (Viewpoint)))

(Country has 
  (superclasses (Administrative-District)))

(County has 
  (superclasses (Administrative-District)))

(Cover has 
  (superclasses (Barrier)))

(Create has 
  (superclasses (Action)))

(Creator has 
  (superclasses (Participant)))

(Damage has 
  (superclasses (Impair)))

(Day-Constant has 
  (superclasses (Constant)))

(Deactivate has 
  (superclasses (Make-Inaccessible)))

(Deceive has 
  (superclasses (Lie)))

(Decrease has 
  (superclasses (Action)))

(Defense has 
  (superclasses (Activity)))

(Deliver has 
  (superclasses (Transfer)))

(Density-Constant has 
  (superclasses (Constant)))

(Density-Scale has 
  (superclasses (Scale)))

(Density-Value has 
  (superclasses (Property-Value)))

(Department has 
  (superclasses (Organization)))

(Depth-Constant has 
  (superclasses (Constant)))

(Depth-Scale has 
  (superclasses (Scale)))

(Destroy has 
  (superclasses (Break)))

(Destruction has 
  (superclasses (Activity)))

(Detach has 
  (superclasses (Action)))

(Detailed-Instance has 
  (superclasses (KM-Class)))

(Development has 
  (superclasses (Activity)))

(Device has 
  (superclasses (Artifact)))

(Diameter-Constant has 
  (superclasses (Constant)))

(Diameter-Scale has 
  (superclasses (Scale)))

(Dim has 
  (superclasses (Decrease)))

(Dinner has 
  (superclasses (Meal)))

(Direction-Constant has 
  (superclasses (Constant)))

(Direction-Scale has 
  (superclasses (Scale)))

(Discourse has 
  (superclasses (Interaction)))

(Discovery has 
  (superclasses (Activity)))

(Discussion has 
  (superclasses (Interaction)))

(Disperse has 
  (superclasses (Action)))

(Distance-Constant has 
  (superclasses (Constant)))

(Distance-Scale has 
  (superclasses (Scale)))

(Distribution has 
  (superclasses (Activity)))

(Dive has 
  (superclasses (Let-Fall)))

(Divide has 
  (superclasses (Break)))

(Document has 
  (superclasses (Message)))

(Donate has 
  (superclasses (Give)))

(Donor-Role has 
  (superclasses (Role)))

(Drawer has 
  (superclasses (Furniture)))

(Dry has 
  (superclasses (Decrease)))

(Duplicate has 
  (superclasses (Copy)))

(Duration-Constant has 
  (superclasses (Constant)))

(Duration-Scale has 
  (superclasses (Scale)))

(Duration-Value has 
  (superclasses (Property-Value)))

(Eat has 
  (superclasses (Take-In)))

(Edit has 
  (superclasses (Action)))

(Educational-Institution has 
  (superclasses (Institution)))

(Elevator has 
  (superclasses (Room)))

(Embody has 
  (superclasses (Create)))

(Emit has 
  (superclasses (Move)))

(Energy has 
  (superclasses (Tangible-Entity)))

(Engineering has 
  (superclasses (Development)))

(Ensemble has 
  (superclasses (Aggregate)))

(Enter has 
  (superclasses (Move-Into
                 Reflexive-Cliche)))

(Entity has 
  (superclasses (Thing)))

(Entrance has 
  (superclasses (Portal)))

(Equation-Set has 
  (superclasses (KM-Class)))

(Event has 
  (superclasses (Thing)))

(Exit has 
  (superclasses (Move-Out-Of
                 Reflexive-Cliche)))

(Expand has 
  (superclasses (Increase)))

(Expose has 
  (superclasses (Make-Accessible)))

(Express has 
  (superclasses (Action)))

(Fall has 
  (superclasses (Move)))

(Family has 
  (superclasses (Group)))

(Feed has 
  (superclasses (Supply)))

(Fidget has 
  (superclasses (Orient)))

(Filter has 
  (superclasses (Role)))

(Financing has 
  (superclasses (Activity)))

(Floor has 
  (superclasses (Platform)))

(Fluid-Substance has 
  (superclasses (Substance)))

(Follow has 
  (superclasses (Locomotion)))

(Food has 
  (superclasses (Role)))

(Forget has 
  (superclasses (Action)))

(Frequency-Constant has 
  (superclasses (Constant)))

(Frequency-Scale has 
  (superclasses (Scale)))

(Frequency-Value has 
  (superclasses (Property-Value)))

(Furnishing has 
  (superclasses (Artifact)))

(Furniture has 
  (superclasses (Furnishing)))

(Gas-Substance has 
  (superclasses (Fluid-Substance)))

(Gesticulate has 
  (superclasses (Embody
                 Orient)))

(Give has 
  (superclasses (Relinquish)))

(Glass has 
  (superclasses (Solid-Substance)))

(Go-Through has 
  (superclasses (Move-Through
                 Reflexive-Cliche)))

(Go-To has 
  (superclasses (Locomotion)))

(Goal has 
  (superclasses (Event)))

(Group has 
  (superclasses (Organization)))

(Hallway has 
  (superclasses (Room)))

(Harm has 
  (superclasses (Impair)))

(Head-Nod has 
  (superclasses (Gesticulate)))

(Head-Shake has 
  (superclasses (Gesticulate)))

(Healing has 
  (superclasses (Activity)))

(Hear has 
  (superclasses (Sense)))

(Heat has 
  (superclasses (Increase)))

(Height-Constant has 
  (superclasses (Constant)))

(Height-Scale has 
  (superclasses (Scale)))

(Hold has 
  (superclasses (Obstruct)))

(Impair has 
  (superclasses (Action)))

(Importance-Constant has 
  (superclasses (Constant)))

(Importance-Scale has 
  (superclasses (Scale)))

(Inanimate-Object has 
  (superclasses (Physical-Object)))

(Increase has 
  (superclasses (Action)))

(Information has 
  (superclasses (Conceptual-Entity)))

(Information-Sequence has 
  (superclasses (Sequence
                 Information)))

(Innovation has 
  (superclasses (Activity)))

(Inquire has 
  (superclasses (Express)))

(Institution has 
  (superclasses (Organization)))

(Instruction has 
  (superclasses (Role)))

(Instrument-Role has 
  (superclasses (Role)))

(Intangible-Entity has 
  (superclasses (Entity)))

(Integrity-Constant has 
  (superclasses (Constant)))

(Integrity-Scale has 
  (superclasses (Scale)))

(Integrity-Value has 
  (superclasses (Property-Value)))

(Intensity-Constant has 
  (superclasses (Constant)))

(Intensity-Scale has 
  (superclasses (Scale)))

(Intensity-Value has 
  (superclasses (Property-Value)))

(Intentional has 
  (superclasses (Cliche)))

(Interaction has 
  (superclasses (Activity)))

(Interpret has 
  (superclasses (Action)))

(Invade has 
  (superclasses (Trespass
                 Intentional)))

(KM-Class has 
  (superclasses (Thing)))

(Language has 
  (superclasses (Intangible-Entity)))

(Latitude-Constant has 
  (superclasses (Constant)))

(Learn has 
  (superclasses (Interpret)))

(Learning has 
  (superclasses (Activity)))

(Leave has 
  (superclasses (Locomotion)))

(Length-Constant has 
  (superclasses (Constant)))

(Length-Scale has 
  (superclasses (Scale)))

(Length-Value has 
  (superclasses (Property-Value)))

(Lengthen has 
  (superclasses (Increase)))

(Let-Fall has 
  (superclasses (Unobstruct)))

(Let-Go-Of has 
  (superclasses (Unobstruct)))

(Lie has 
  (superclasses (Express)))

(Light has 
  (superclasses (Energy)))

(Liquid-Substance has 
  (superclasses (Fluid-Substance)))

(Living-Entity has 
  (superclasses (Physical-Object)))

(Load has 
  (superclasses (Move-Into)))

(Locomotion has 
  (superclasses (Move
                 Reflexive-Cliche)))

(Longitude-Constant has 
  (superclasses (Constant)))

(Lose has 
  (superclasses (Transfer)))

(Luminance-Constant has 
  (superclasses (Constant)))

(Luminance-Value has 
  (superclasses (Property-Value)))

(Luminous-Flux-Constant has 
  (superclasses (Constant)))

(Luminous-Flux-Value has 
  (superclasses (Property-Value)))

(Luminous-Intensity-Constant has 
  (superclasses (Constant)))

(Luminous-Intensity-Value has 
  (superclasses (Property-Value)))

(Lunch has 
  (superclasses (Meal)))

(Maintenance has 
  (superclasses (Activity)))

(Make-Accessible has 
  (superclasses (Action)))

(Make-Contact has 
  (superclasses (Action)))

(Make-Inaccessible has 
  (superclasses (Action)))

(Make-Request has 
  (superclasses (Communicate)))

(Manner-Constant has 
  (superclasses (Constant)))

(Manner-Value has 
  (superclasses (Property-Value)))

(Mark has 
  (superclasses (Embody
                 Produce)))

(Mass-Constant has 
  (superclasses (Constant)))

(Mass-Scale has 
  (superclasses (Scale)))

(Mass-Value has 
  (superclasses (Property-Value)))

(Match-Result-Viewpoint has 
  (superclasses (Viewpoint)))

(Meal has 
  (superclasses (Activity)))

(Medium has 
  (superclasses (Role)))

(Message has 
  (superclasses (Conceptual-Entity)))

(Message-Field has 
  (superclasses (Message)))

(Metal has 
  (superclasses (Substance)))

(Method has 
  (superclasses (KM-Class)))

(Moment-of-Inertia-Value has 
  (superclasses (Property-Value)))

(Momentum-Value has 
  (superclasses (Property-Value)))

(Money has 
  (superclasses (Intangible-Entity)))

(Move has 
  (superclasses (Action)))

(Move-Apart has 
  (superclasses (Action)))

(Move-Into has 
  (superclasses (Move-Through)))

(Move-Out-Of has 
  (superclasses (Move-Through)))

(Move-Through has 
  (superclasses (Move)))

(Move-Together has 
  (superclasses (Action)))

(Multislot-Value-Viewpoint has 
  (superclasses (Viewpoint)))

(Narrow has 
  (superclasses (Decrease)))

(Natural-Language has 
  (superclasses (Language)))

(Nonrenewable-Resource has 
  (superclasses (Resource)))

(Number has 
  (superclasses (Thing)))

(Number-Field has 
  (superclasses (Message-Field)))

(Obstruct has 
  (superclasses (Make-Inaccessible)))

(Obtain has 
  (superclasses (Receive)))

(Open has 
  (superclasses (Unblock)))

(Operations has 
  (superclasses (Activity)))

(Organism has 
  (superclasses (Living-Entity)))

(Organization has 
  (superclasses (Aggregate)))

(Organizing has 
  (superclasses (Maintenance)))

(Orient has 
  (superclasses (Action)))

(Orientation-Constant has 
  (superclasses (Constant)))

(Outlet has 
  (superclasses (Portal)))

(Paper has 
  (superclasses (Solid-Substance)))

(ParkingLot has 
  (superclasses (Architectural-Structure)))

(Participant has 
  (superclasses (Agent-Role)))

(Partition has 
  (superclasses (Thing)))

(Penetrate has 
  (superclasses (Action)))

(Perceive has 
  (superclasses (Action)))

(Perimeter-Constant has 
  (superclasses (Constant)))

(Perimeter-Scale has 
  (superclasses (Scale)))

(Person has 
  (superclasses (Animal)))

(Physical-Document has 
  (superclasses (Artifact)))

(Physical-Mark has 
  (superclasses (Piece-of-Substance)))

(Physical-Object has 
  (superclasses (Tangible-Entity)))

(Piece-of-Glass has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Metal has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Paper has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Plastic has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Rubber has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Stone has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Substance has 
  (superclasses (Inanimate-Object)))

(Piece-of-Tissue has 
  (superclasses (Piece-of-Substance)))

(Piece-of-Wood has 
  (superclasses (Piece-of-Substance)))

(Place has 
  (superclasses (Spatial-Entity)))

(Place-Order has 
  (superclasses (Action)))

(Planning has 
  (superclasses (Activity)))

(Plant has 
  (superclasses (Organism)))

(Plastic has 
  (superclasses (Solid-Substance)))

(Platform has 
  (superclasses (Architectural-Structure)))

(Polarity-Constant has 
  (superclasses (Constant)))

(Polarity-Value has 
  (superclasses (Property-Value)))

(Political-State has 
  (superclasses (Administrative-District)))

(Portal has 
  (superclasses (Conduit)))

(Portal-Covering has 
  (superclasses (Barrier)))

(Power-Constant has 
  (superclasses (Constant)))

(Power-Value has 
  (superclasses (Property-Value)))

(Pressure-Constant has 
  (superclasses (Constant)))

(Pressure-Scale has 
  (superclasses (Scale)))

(Pressure-Value has 
  (superclasses (Property-Value)))

(Primary-Constant has 
  (superclasses (Constant)))

(Print has 
  (superclasses (Mark)))

(Priority-Constant has 
  (superclasses (Constant)))

(Priority-Scale has 
  (superclasses (Scale)))

(Produce has 
  (superclasses (Create)))

(Product has 
  (superclasses (Role)))

(Propel has 
  (superclasses (Move)))

(Property-Class-Order has 
  (superclasses (Property-Group
                 Aggregate)))

(Property-Group has 
  (superclasses (Thing)))

(Property-Value has 
  (superclasses (Property-Group)))

(Prosecution has 
  (superclasses (Activity)))

(Province has 
  (superclasses (Administrative-District)))

(Pupil has 
  (superclasses (Role)))

(Quantity-Constant has 
  (superclasses (Constant)))

(Quantity-Value has 
  (superclasses (Property-Value)))

(Question has 
  (superclasses (Role)))

(Radius-Constant has 
  (superclasses (Constant)))

(Radius-Scale has 
  (superclasses (Scale)))

(Rate-Constant has 
  (superclasses (Constant)))

(Rate-Scale has 
  (superclasses (Scale)))

(Rate-Value has 
  (superclasses (Property-Value)))

(Read has 
  (superclasses (Sense)))

(Receive has 
  (superclasses (Transfer)))

(Recipient-Role has 
  (superclasses (Role)))

(Recognize has 
  (superclasses (Perceive)))

(Record has 
  (superclasses (Create)))

(Recording has 
  (superclasses (Message)))

(Reflexive-Cliche has 
  (superclasses (Cliche)))

(Region has 
  (superclasses (Place)))

(Release has 
  (superclasses (Unobstruct)))

(Release-Resource has 
  (superclasses (Action)))

(Relinquish has 
  (superclasses (Lose)))

(Remove has 
  (superclasses (Action)))

(Renewable-Resource has 
  (superclasses (Resource)))

(Repair has 
  (superclasses (Action)))

(Replace has 
  (superclasses (Action)))

(Replenish has 
  (superclasses (Increase)))

(Reporting has 
  (superclasses (Activity)))

(Request has 
  (superclasses (Information)))

(Research has 
  (superclasses (Activity)))

(Resource has 
  (superclasses (Role)))

(Restrain has 
  (superclasses (Obstruct)))

(Role has 
  (superclasses (Thing)))

(Roof has 
  (superclasses (Architectural-Structure)))

(Room has 
  (superclasses (Architectural-Structure)))

(Rotational-Rate-Constant has 
  (superclasses (Constant)))

(Rotational-Rate-Value has 
  (superclasses (Property-Value)))

(Rubber has 
  (superclasses (Solid-Substance)))

(Ruin has 
  (superclasses (Break)))

(Scalar has 
  (superclasses (Property-Group)))

(Scale has 
  (superclasses (Property-Group
                 Aggregate)))

(Seat has 
  (superclasses (Role)))

(See has 
  (superclasses (Sense)))

(Select has 
  (superclasses (Action)))

(Sell has 
  (superclasses (Relinquish)))

(Selling has 
  (superclasses (Activity)))

(Send has 
  (superclasses (Action)))

(Sense has 
  (superclasses (Create)))

(Sentience-Constant has 
  (superclasses (Constant)))

(Sentience-Value has 
  (superclasses (Property-Value)))

(Sequence has 
  (superclasses (Entity)))

(Service has 
  (superclasses (Activity)))

(Session has 
  (superclasses (Interaction)))

(Sex-Constant has 
  (superclasses (Constant)))

(Sex-Value has 
  (superclasses (Property-Value)))

(Shape-Constant has 
  (superclasses (Constant)))

(Shape-Value has 
  (superclasses (Property-Value)))

(Shelf has 
  (superclasses (Furniture)))

(Shipping has 
  (superclasses (Activity)))

(Shorten has 
  (superclasses (Decrease)))

(Shut-Out has 
  (superclasses (Obstruct)))

(Signal has 
  (superclasses (Role)))

(Sit-Down has 
  (superclasses (Orient)))

(Size-Constant has 
  (superclasses (Constant)))

(Size-Scale has 
  (superclasses (Scale)))

(Size-Value has 
  (superclasses (Property-Value)))

(Slide has 
  (superclasses (Move)))

(Slope-Constant has 
  (superclasses (Constant)))

(Slope-Scale has 
  (superclasses (Scale)))

(Slot-Query-Viewpoint has 
  (superclasses (Viewpoint)))

(Slot-Value-Viewpoint has 
  (superclasses (Viewpoint)))

(Smell-Constant has 
  (superclasses (Constant)))

(Smell-Value has 
  (superclasses (Property-Value)))

(Solid-Substance has 
  (superclasses (Substance)))

(Sound has 
  (superclasses (Energy)))

(Spatial-Entity has 
  (superclasses (Entity)))

(Speak has 
  (superclasses (Embody)))

(Specification has 
  (superclasses (Message)))

(Specify has 
  (superclasses (Action)))

(Stand-Up has 
  (superclasses (Orient)))

(State has 
  (superclasses (Event)))

(State-Constant has 
  (superclasses (Constant)))

(State-Value has 
  (superclasses (Property-Value)))

(Stone has 
  (superclasses (Solid-Substance)))

(Store has 
  (superclasses (Action)))

(String has 
  (superclasses (Thing)))

(Structure has 
  (superclasses (Thing)))

(Substance has 
  (superclasses (Tangible-Entity)))

(Suggest has 
  (superclasses (Communicate)))

(Suggestion has 
  (superclasses (Information)))

(Supper has 
  (superclasses (Meal)))

(Supply has 
  (superclasses (Relinquish)))

(Support has 
  (superclasses (Obstruct)))

(System has 
  (superclasses (Thing)))

(Take has 
  (superclasses (Obtain)))

(Take-Apart has 
  (superclasses (Break)))

(Take-Control has 
  (superclasses (Action)))

(Take-In has 
  (superclasses (Move-Into)))

(Tangible-Entity has 
  (superclasses (Spatial-Entity)))

(Target has 
  (superclasses (Role)))

(Taste-Constant has 
  (superclasses (Constant)))

(Taste-Value has 
  (superclasses (Property-Value)))

(Teach has 
  (superclasses (Communicate)))

(Teacher has 
  (superclasses (Role)))

(Team has 
  (superclasses (Group)))

(Temperature-Constant has 
  (superclasses (Constant)))

(Temperature-Scale has 
  (superclasses (Scale)))

(Temperature-Value has 
  (superclasses (Property-Value)))

(Template has 
  (superclasses (Role)))

(Temporal-Entity has 
  (superclasses (Thing)))

(Territory has 
  (superclasses (Region)))

(Text-Field has 
  (superclasses (Message-Field)))

(Texture-Constant has 
  (superclasses (Constant)))

(Texture-Value has 
  (superclasses (Property-Value)))

(Thickness-Constant has 
  (superclasses (Constant)))

(Thickness-Scale has 
  (superclasses (Scale)))

;;; (Concept Thing is a built-in class)

(Throw has 
  (superclasses (Unobstruct)))

(Time-Instant has 
  (superclasses (Temporal-Entity)))

(Time-Interval has 
  (superclasses (Temporal-Entity)))

(Time-Zone-Constant has 
  (superclasses (Constant)))

(Tissue has 
  (superclasses (Solid-Substance)))

(Training has 
  (superclasses (Activity)))

(Trait-Constant has 
  (superclasses (Constant)))

(Trait-Value has 
  (superclasses (Property-Value)))

(Transfer has 
  (superclasses (Action)))

(Transmit has 
  (superclasses (Move)))

(Trespass has 
  (superclasses (Go-To
                 Unauthorized)))

(Truth-Constant has 
  (superclasses (Constant)))

(Truth-Value has 
  (superclasses (Property-Value)))

(Unauthorized has 
  (superclasses (Cliche)))

(Unblock has 
  (superclasses (Make-Accessible)))

(Unit-Conversion has 
  (superclasses (Method)))

(Unit-of-Measurement has 
  (superclasses (Property-Group)))

(Unitless-Value has 
  (superclasses (Property-Value)))

(University has 
  (superclasses (Educational-Institution)))

(Unobstruct has 
  (superclasses (Make-Accessible)))

(Unrestrain has 
  (superclasses (Unobstruct)))

(UoM-Acceleration has 
  (superclasses (Unit-of-Measurement)))

(UoM-Angle has 
  (superclasses (Unit-of-Measurement)))

(UoM-Area has 
  (superclasses (Unit-of-Measurement)))

(UoM-Brightness has 
  (superclasses (Unit-of-Measurement)))

(UoM-Coordinate has 
  (superclasses (Unit-of-Measurement)))

(UoM-Density has 
  (superclasses (Unit-of-Measurement)))

(UoM-Duration has 
  (superclasses (Unit-of-Measurement)))

(UoM-Frequency has 
  (superclasses (Unit-of-Measurement)))

(UoM-Intensity has 
  (superclasses (Unit-of-Measurement)))

(UoM-Length has 
  (superclasses (Unit-of-Measurement)))

(UoM-Luminance has 
  (superclasses (Unit-of-Measurement)))

(UoM-Luminous-Flux has 
  (superclasses (Unit-of-Measurement)))

(UoM-Luminous-Intensity has 
  (superclasses (Unit-of-Measurement)))

(UoM-Mass has 
  (superclasses (Unit-of-Measurement)))

(UoM-Moment-of-Inertia has 
  (superclasses (Unit-of-Measurement)))

(UoM-Momentum has 
  (superclasses (Unit-of-Measurement)))

(UoM-Power has 
  (superclasses (Unit-of-Measurement)))

(UoM-Pressure has 
  (superclasses (Unit-of-Measurement)))

(UoM-Quantity has 
  (superclasses (Unit-of-Measurement)))

(UoM-Rate has 
  (superclasses (Unit-of-Measurement)))

(UoM-Rotational-Rate has 
  (superclasses (Unit-of-Measurement)))

(UoM-Temperature has 
  (superclasses (Unit-of-Measurement)))

(UoM-Time has 
  (superclasses (Unit-of-Measurement)))

(UoM-Unitless has 
  (superclasses (Unit-of-Measurement)))

(UoM-Velocity has 
  (superclasses (Unit-of-Measurement)))

(UoM-Voltage has 
  (superclasses (Unit-of-Measurement)))

(UoM-Volume has 
  (superclasses (Unit-of-Measurement)))

(UoM-Worth has 
  (superclasses (Unit-of-Measurement)))

(Vehicle has 
  (superclasses (Role)))

(Velocity-Constant has 
  (superclasses (Constant)))

(Velocity-Scale has 
  (superclasses (Scale)))

(Velocity-Value has 
  (superclasses (Property-Value)))

(Version has 
  (superclasses (KM-Class)))

(View has 
  (superclasses (Aggregate)))

(Viewpoint has 
  (superclasses (KM-Class)))

(Viewpoint-Query-Type has 
  (superclasses (KM-Class)))

(Voltage-Constant has 
  (superclasses (Constant)))

(Voltage-Value has 
  (superclasses (Property-Value)))

(Volume-Constant has 
  (superclasses (Constant)))

(Volume-Scale has 
  (superclasses (Scale)))

(Volume-Value has 
  (superclasses (Property-Value)))

(Walk has 
  (superclasses (Locomotion)))

(Wall has 
  (superclasses (Architectural-Structure)))

(Water has 
  (superclasses (Liquid-Substance)))

(Wet has 
  (superclasses (Increase)))

(Wetness-Constant has 
  (superclasses (Constant)))

(Wetness-Scale has 
  (superclasses (Scale)))

(Wetness-Value has 
  (superclasses (Property-Value)))

(Widen has 
  (superclasses (Increase)))

(Width-Constant has 
  (superclasses (Constant)))

(Width-Scale has 
  (superclasses (Scale)))

(Withdraw has 
  (superclasses (Move-Out-Of)))

(Wood has 
  (superclasses (Solid-Substance)))

(Workgroup has 
  (superclasses (Team)))

(Worth-Constant has 
  (superclasses (Constant)))

(Worth-Scale has 
  (superclasses (Scale)))

(Worth-Value has 
  (superclasses (Property-Value)))

(Write has 
  (superclasses (Express)))

(Yes-No-Viewpoint has 
  (superclasses (Viewpoint)))


;;; ---------- CONTENTS ----------

(Agentive-Relation has 
  (superclasses (Relation))
  (instances (agent
              agent-of
              donor
              donor-of
              instrument
              instrument-of
              purpose
              purpose-of)))

;;; ----------

(Causal-Relation has 
  (superclasses (Relation))
  (instances (by-means-of
              means-by-which
              capability
              capability-of
              causes
              caused-by
              defeats
              defeated-by
              enables
              enabled-by
              has-goal
              is-goal-of
              inhibits
              inhibited-by
              objective
              objective-of
              prevents
              prevented-by
              purpose
              purpose-of
              resulting-state
              resulting-state-of
              supports
              supported-by)))

;;; ----------

(CLIB-Slot-Group has 
  (superclasses (KM-Slot-Group))
  (instances (actions
              actions-of
              all-subevents
              all-subevents-of
              cardinal-unit-class
              cardinal-unit-class-of
              cardinal-value
              cardinal-value-of
              categorical-constant-class
              categorical-constant-class-of
              categorical-constant
              categorical-constant-of
              categorical-value
              categorical-value-of
              caused-by-class
              caused-by-class-of
              dcs-list
              dcs-list-of
              defeated-by-class
              defeated-by-class-of
              description
              description-of
              doc-file
              doc-file-of
              edit-state
              edit-state-of
              feature-slot
              feature-slot-of
              identifier
              identifier-of
              information-language
              information-language-of
              input
              input-of
              interrupted-by
              interrupts
              kreq-list
              kreq-list-of
              max-value
              max-value-of
              mcs-list
              mcs-list-of
              min-value
              min-value-of
              numeric-value
              numeric-value-of
              output
              output-of
              preferred-unit
              preferred-unit-of
              preparatory-event
              preparatory-event-of
              primary-slot
              primary-slot-of
              primitive-actions
              primitive-actions-of
              property-of-slot
              property-of-slot-of
              property-slot
              property-slot-of
              reference-class
              reference-class-of
              related-to
              related-to-of
              required-slot
              required-slot-of
              scalar-constant-class
              scalar-constant-class-of
              scalar-constant
              scalar-constant-of
              scalar-value
              scalar-value-of
              scale-class
              scale-class-of
              secondary-slot
              secondary-slot-of
              soft-pcs-list
              soft-pcs-list-of
              target-unit
              target-unit-of
              test-case
              test-case-of
              time-value
              time-value-of
              unit
              unit-of
              value
              value-of
              viewed-as
              view-of
              wn16-synset
              wn16-synset-of
              wn20-synset
              wn20-synset-of)))

;;; ----------

(EntityProperty has 
  (superclasses (Property))
  (instances (age
              age-of
              angle
              angle-of
              animacy
              animacy-of
              area
              area-of
              breakability
              breakability-of
              brightness
              brightness-of
              capacity
              capacity-of
              circumference
              circumference-of
              color
              color-of
              consistency
              consistency-of
              density
              density-of
              depth
              depth-of
              diameter
              diameter-of
              height
              height-of
              importance
              importance-of
              integrity
              integrity-of
              intensity
              intensity-of
              latitude
              latitude-of
              length
              length-of
              longitude
              longitude-of
              luminance
              luminance-of
              luminous-flux
              luminous-flux-of
              luminous-intensity
              luminous-intensity-of
              mass
              mass-of
              moment-of-inertia
              moment-of-inertia-of
              number-of-elements
              number-of-elements-of
              orientation
              orientation-of
              perimeter
              perimeter-of
              physical-state
              physical-state-of
              polarity
              polarity-of
              power
              power-of
              pressure
              pressure-of
              priority
              priority-of
              quantity
              quantity-of
              radius
              radius-of
              sentience
              sentience-of
              sex
              sex-of
              shape
              shape-of
              size
              size-of
              slope
              slope-of
              smell
              smell-of
              taste
              taste-of
              temperature
              temperature-of
              texture
              texture-of
              thickness
              thickness-of
              trait
              trait-of
              truth
              truth-of
              voltage
              voltage-of
              volume
              volume-of
              wetness
              wetness-of
              width
              width-of
              worth
              worth-of)))

;;; ----------

(EventProperty has 
  (superclasses (Property))
  (instances (acceleration
              acceleration-of
              direction
              direction-of
              distance
              distance-of
              duration
              duration-of
              frequency
              frequency-of
              importance
              importance-of
              intensity
              intensity-of
              manner
              manner-of
              momentum
              momentum-of
              priority
              priority-of
              rate
              rate-of
              rotational-rate
              rotational-rate-of
              velocity
              velocity-of)))

;;; ----------

(Interface-Slot has 
  (superclasses (Slot))
  (instances (time-year
              time-month
              time-day
              time-day-of-week
              time-hour
              time-minute
              time-second
              time-zone
              time-year-of
              time-month-of
              time-day-of
              time-day-of-week-of
              time-hour-of
              time-minute-of
              time-second-of
              time-zone-of)))

;;; ----------

(KM-Slot-Group has 
  (subclasses (Shaken-Slot-Group
               NL-Slot-Group
               CLIB-Slot-Group))
  (superclasses (Slot))
  (instances (component
              component-of
              equation-expression
              equation-expression-of
              equation-symbol
              equation-symbol-of
              equation-uses
              used-in-equation
              equation
              equation-of
              has-example
              is-example-of
              range2
              range2-of
              skolem-string
              skolem-string-of
              typical-instance
              typical-instance-of
              user-assumption
              user-assumption-of
              user-comment
              user-comment-of
              user-description
              user-description-of
              viewpoint-answerable-query
              viewpoint-answerable-query-of
              viewpoint-correspondence
              viewpoint-correspondence-of
              viewpoint-filter
              viewpoint-filter-of
              viewpoint-model-graph
              viewpoint-model-graph-of
              viewpoint-multislot-type
              viewpoint-multislot-type-of
              viewpoint-parent
              viewpoint-child
              viewpoint-query
              viewpoint-query-of
              viewpoint-scenario
              viewpoint-scenario-of
              viewpoint-score
              viewpoint-score-of
              viewpoint-source
              viewpoint-source-of
              viewpoint-target
              viewpoint-target-of)))

;;; ----------

(Meronymic-Relation has 
  (superclasses (Relation))
  (wn20-synset ((:set (:triple "structure" 0 "n"))))
  (instances (complement
              complement-of
              content
              content-of
              disjunctive-next-events
              disjunctive-next-events-of
              element
              element-of
              first-element
              first-element-of
              first-subevent
              first-subevent-of
              has-basic-functional-unit
              is-basic-functional-unit-of
              has-basic-structural-unit
              is-basic-structural-unit-of
              has-functional-part
              is-functional-part-of
              has-part
              is-part-of
              has-region
              is-region-of
              has-structural-part
              is-structural-part-of
              in-organization
              in-organization-of
              information-content
              information-content-of
              material
              material-of
              next-element
              previous-element
              next-event
              prev-event
              subevent
              subevent-of
              substrate
              substrate-of)))

;;; ----------

(NL-Slot-Group has 
  (superclasses (KM-Slot-Group))
  (instances (text-abuts
              text-abuts-of
              text-agent
              text-agent-of
              text-away-from
              text-away-from-of
              text-base
              text-base-of
              text-beneficiary
              text-beneficiary-of
              text-causes
              text-caused-by
              text-content
              text-content-of
              text-destination
              text-destination-of
              text-donor
              text-donor-of
              text-has-part
              text-is-part-of
              text-information-content
              text-information-content-of
              text-instrument
              text-instrument-of
              text-is-above
              text-is-below
              text-is-along
              text-is-along-of
              text-is-at
              text-is-at-of
              text-is-behind
              text-is-in-front-of
              text-is-beside
              text-is-between
              text-is-between-of
              text-is-facing
              text-is-faced-by
              text-is-inside
              text-encloses
              text-is-near
              text-is-near-of
              text-is-north-of
              text-is-south-of
              text-is-northwest-of
              text-is-southeast-of
              text-is-southwest-of
              text-is-on
              text-has-on-it
              text-is-opposite
              text-is-oriented-toward
              text-is-oriented-toward-of
              text-is-outside
              text-is-outside-of
              text-is-over
              text-is-under
              text-is-northeast-of
              text-is-west-of
              text-is-east-of
              text-material
              text-material-of
              text-object
              text-object-of
              text-origin
              text-origin-of
              text-path
              text-path-of
              text-possesses
              text-is-possessed-by
              text-raw-material
              text-raw-material-of
              text-recipient
              text-recipient-of
              text-related-to
              text-related-to-of
              text-result
              text-result-of
              text-resulting-state
              text-resulting-state-of
              text-site
              text-site-of
              slot-gloss
              slot-gloss-of
              text-subevent
              text-subevent-of
              text-active-phrase
              text-active-phrase-of
              text-active-sentence
              text-active-sentence-of
              text-active-verbseq-pl
              text-active-verbseq-pl-of
              text-active-verbseq-sg
              text-active-verbseq-sg-of
              text-active-verbseq
              text-active-verbseq-of
              text-argslots
              text-argslots-of
              text-arguments
              text-arguments-of
              text-base-phrase
              text-base-phrase-of
              text-def-determiner
              text-def-determiner-of
              text-def-head
              text-def-head-of
              text-definition-sentence
              text-definition-sentence-of
              text-description
              text-description-of
              text-dobj-phrase
              text-dobj-phrase-of
              text-dobj
              text-dobj-of
              text-existential-there
              text-existential-there-of
              text-gen
              text-gen-of
              text-gloss
              text-gloss-of
              text-head
              text-head-of
              text-indef-determiner
              text-indef-determiner-of
              text-indef-head
              text-indef-head-of
              text-indef-phrase
              text-indef-phrase-of
              text-nom-sentence
              text-nom-sentence-of
              text-nominalization
              text-nominalization-of
              text-number
              text-number-of
              text-particle
              text-particle-of
              text-passive-phrase
              text-passive-phrase-of
              text-passive-sentence
              text-passive-sentence-of
              text-passive-verbseq-pl
              text-passive-verbseq-pl-of
              text-passive-verbseq-sg
              text-passive-verbseq-sg-of
              text-passive-verbseq
              text-passive-verbseq-of
              text-phrase
              text-phrase-of
              text-postmods
              text-postmods-of
              text-postmodslots
              text-postmodslots-of
              text-premods
              text-premods-of
              text-premodslots
              text-premodslots-of
              text-sentence
              text-sentence-of
              text-slot
              text-slot-of
              text-subj-phrase
              text-subj-phrase-of
              text-subj
              text-subj-of
              text-toward
              text-toward-of
              viewpoint-answer-page
              viewpoint-answer-page-of
              viewpoint-answer
              viewpoint-answer-of
              viewpoint-detail
              viewpoint-detail-of
              viewpoint-eq-solver-info
              viewpoint-eq-solver-info-of
              viewpoint-question
              viewpoint-question-of)))

;;; ----------

(Participant-Relation has 
  (superclasses (Relation))
  (instances (agent
              agent-of
              base
              base-of
              beneficiary
              beneficiary-of
              donor
              donor-of
              experiencer
              experiencer-of
              in-event
              in-event-of
              instrument
              instrument-of
              object
              object-of
              plays
              played-by
              possesses
              is-possessed-by
              raw-material
              raw-material-of
              recipient
              recipient-of
              result
              result-of)))

;;; ----------

(Property has 
  (subclasses (PropertyProperty
               EventProperty
               EntityProperty))
  (superclasses (Slot))
  (domain-of (cardinal-unit-class
              categorical-constant-class
              scalar-constant-class
              scale-class))
  (range-of (cardinal-unit-class-of
             categorical-constant-class-of
             scalar-constant-class-of
             scale-class-of)))

(every Property has 
  (shaken-ui-hidden-slot ((if (anonymous-instancep Self) then t))))

;;; ----------

(PropertyProperty has 
  (superclasses (Property))
  (instances (from-value
              from-value-of
              greater-than-or-equal-to
              less-than-or-equal-to
              greater-than
              less-than
              same-as
              to-value
              to-value-of)))

;;; ----------

(Relation has 
  (subclasses (Temporal-Relation
               Spatial-Relation
               Participant-Relation
               Meronymic-Relation
               Causal-Relation
               Agentive-Relation))
  (superclasses (Slot)))

(every Relation has 
  (shaken-ui-hidden-slot ((if (anonymous-instancep Self) then t)))
  (name (#'(LAMBDA () (IF (STRING= (STRING (KM-UNIQUE0 'Self)) "has-" :END1 4) (SUBSEQ (STRING (KM-UNIQUE0 'Self)) 4) (STRING (KM-UNIQUE0 'Self)))))))

;;; ----------

(Shaken-Slot-Group has 
  (superclasses (KM-Slot-Group))
  (instances (cmap-correspondence
              cmap-correspondence-of)))

;;; ----------

(Slot has 
  (subclasses (Relation
               Property
               KM-Slot-Group
               Interface-Slot))
  (superclasses (Thing))
  (instances (time-year-of
              time-month-of
              time-day-of
              time-day-of-week-of
              time-hour-of
              time-minute-of
              time-second-of
              time-zone-of
              acceleration-of
              actions-of
              age-of
              agent-of
              text-agent-of
              all-subevents-of
              angle-of
              animacy-of
              area-of
              away-from-of
              text-away-from-of
              base-of
              text-base-of
              beneficiary-of
              text-beneficiary-of
              breakability-of
              brightness-of
              means-by-which
              capability-of
              capacity-of
              cardinal-unit-class-of
              cardinal-value-of
              categorical-constant-class-of
              categorical-constant-of
              categorical-value-of
              caused-by-class-of
              caused-by
              text-caused-by
              circumference-of
              cmap-correspondence-of
              color-of
              complement-of
              component-of
              consistency-of
              content-of
              text-content-of
              dcs-list-of
              defeated-by-class-of
              defeated-by
              density-of
              depth-of
              description-of
              destination-of
              text-destination-of
              diameter-of
              direction-of
              disjunctive-next-events-of
              distance-of
              doc-file-of
              donor-of
              text-donor-of
              duration-of
              edit-state-of
              element-of
              enabled-by
              equation-expression-of
              equation-symbol-of
              used-in-equation
              equation-of
              experiencer-of
              feature-slot-of
              first-element-of
              first-subevent-of
              frequency-of
              from-value-of
              less-than-or-equal-to
              less-than
              is-basic-functional-unit-of
              is-basic-structural-unit-of
              is-example-of
              is-functional-part-of
              is-goal-of
              is-part-of
              text-is-part-of
              is-region-of
              is-structural-part-of
              height-of
              identifier-of
              importance-of
              in-event-of
              in-organization-of
              information-content-of
              text-information-content-of
              information-language-of
              inhibited-by
              input-of
              instrument-of
              text-instrument-of
              integrity-of
              intensity-of
              interrupts
              is-below
              text-is-below
              is-at-of
              text-is-at-of
              is-in-front-of
              text-is-in-front-of
              is-between-of
              text-is-between-of
              is-faced-by
              text-is-faced-by
              encloses
              text-encloses
              text-is-near-of
              is-south-of
              text-is-south-of
              is-southeast-of
              text-is-southeast-of
              text-is-southwest
              has-on-it
              text-has-on-it
              is-oriented-toward-of
              text-is-oriented-toward-of
              does-not-enclose
              text-is-outside-of
              is-under
              text-is-under
              is-northeast-of
              text-is-northeast-of
              is-east-of
              text-is-east-of
              kreq-list-of
              latitude-of
              length-of
              location-of
              longitude-of
              luminance-of
              luminous-flux-of
              luminous-intensity-of
              manner-of
              mass-of
              material-of
              text-material-of
              max-value-of
              mcs-list-of
              min-value-of
              moment-of-inertia-of
              momentum-of
              previous-element
              prev-event
              number-of-elements-of
              numeric-value-of
              object-of
              text-object-of
              objective-of
              orientation-of
              origin-of
              text-origin-of
              output-of
              path-of
              text-path-of
              perimeter-of
              physical-state-of
              played-by
              polarity-of
              is-possessed-by
              text-is-possessed-by
              power-of
              preferred-unit-of
              preparatory-event-of
              pressure-of
              prevented-by
              primary-slot-of
              primitive-actions-of
              priority-of
              property-of-slot-of
              property-slot-of
              purpose-of
              quantity-of
              radius-of
              range2-of
              rate-of
              raw-material-of
              text-raw-material-of
              recipient-of
              text-recipient-of
              reference-class-of
              required-slot-of
              result-of
              text-result-of
              resulting-state-of
              text-resulting-state-of
              rotational-rate-of
              scalar-constant-class-of
              scalar-constant-of
              scalar-value-of
              scale-class-of
              secondary-slot-of
              sentience-of
              sex-of
              shape-of
              site-of
              text-site-of
              size-of
              skolem-string-of
              slope-of
              slot-gloss-of
              smell-of
              soft-pcs-list-of
              space-int-inside
              space-int-coveredby
              subevent-of
              text-subevent-of
              substrate-of
              supported-by
              target-unit-of
              taste-of
              temperature-of
              test-case-of
              text-active-phrase-of
              text-active-sentence-of
              text-active-verbseq-pl-of
              text-active-verbseq-sg-of
              text-active-verbseq-of
              text-argslots-of
              text-arguments-of
              text-base-phrase-of
              text-def-determiner-of
              text-def-head-of
              text-definition-sentence-of
              text-description-of
              text-dobj-phrase-of
              text-dobj-of
              text-existential-there-of
              text-gen-of
              text-gloss-of
              text-head-of
              text-indef-determiner-of
              text-indef-head-of
              text-indef-phrase-of
              text-nom-sentence-of
              text-nominalization-of
              text-number-of
              text-particle-of
              text-passive-phrase-of
              text-passive-sentence-of
              text-passive-verbseq-pl-of
              text-passive-verbseq-sg-of
              text-passive-verbseq-of
              text-phrase-of
              text-postmods-of
              text-postmodslots-of
              text-premods-of
              text-premodslots-of
              text-sentence-of
              text-slot-of
              text-subj-phrase-of
              text-subj-of
              texture-of
              thickness-of
              time-of
              time-after
              time-is-beginning-or-inside
              time-beginning-of
              time-between-of
              time-contains
              time-end-of
              time-is-inside
              time-int-after
              time-int-contains
              time-int-finished-by
              time-int-met-by
              time-int-overlapped-by
              time-int-started-by
              time-of-existence-of
              time-value-of
              to-value-of
              toward-of
              text-toward-of
              trait-of
              truth-of
              typical-instance-of
              unit-of
              user-assumption-of
              user-comment-of
              user-description-of
              value-of
              velocity-of
              view-of
              viewpoint-answer-page-of
              viewpoint-answer-of
              viewpoint-answerable-query-of
              viewpoint-correspondence-of
              viewpoint-detail-of
              viewpoint-eq-solver-info-of
              viewpoint-filter-of
              viewpoint-model-graph-of
              viewpoint-multislot-type-of
              viewpoint-child
              viewpoint-query-of
              viewpoint-question-of
              viewpoint-scenario-of
              viewpoint-score-of
              viewpoint-source-of
              viewpoint-target-of
              voltage-of
              volume-of
              wetness-of
              width-of
              wn16-synset-of
              wn20-synset-of
              worth-of))
  (range-of (feature-slot
             primary-slot
             property-of-slot
             property-slot
             range2-of
             required-slot
             secondary-slot
             slot-gloss-of
             text-argslots
             text-gloss-of
             text-postmodslots
             text-premodslots
             text-slot))
  (domain-of (feature-slot-of
              primary-slot-of
              property-of-slot-of
              property-slot-of
              range2
              required-slot-of
              secondary-slot-of
              slot-gloss
              text-argslots-of
              text-gloss
              text-postmodslots-of
              text-premodslots-of
              text-slot-of)))

;;; ----------

(Spatial-Relation has 
  (superclasses (Relation))
  (instances (abuts
              away-from
              away-from-of
              destination
              destination-of
              has-part
              is-part-of
              is-above
              is-below
              is-along
              is-at
              is-at-of
              is-behind
              is-in-front-of
              is-beside
              is-between
              is-facing
              is-faced-by
              is-inside
              encloses
              is-near
              is-north-of
              is-south-of
              is-northwest-of
              is-southeast-of
              is-on
              has-on-it
              is-opposite
              is-oriented-toward
              is-oriented-toward-of
              is-outside
              does-not-enclose
              is-over
              is-under
              is-southwest-of
              is-northeast-of
              is-west-of
              is-east-of
              location
              location-of
              origin
              origin-of
              path
              path-of
              site
              site-of
              space-int-contains
              space-int-inside
              space-int-covers
              space-int-coveredby
              space-int-disjoint
              space-int-equal
              space-int-meet
              space-int-overlap
              toward
              toward-of)))

;;; ----------

(Temporal-Relation has 
  (superclasses (Relation))
  (instances (time-at
              time-of
              time-before
              time-after
              time-begins-or-in
              time-is-beginning-or-inside
              time-begins
              time-beginning-of
              time-between
              time-during
              time-contains
              time-ends
              time-end-of
              time-inside
              time-is-inside
              time-int-before
              time-int-after
              time-int-during
              time-int-contains
              time-int-equals
              time-int-finishes
              time-int-finished-by
              time-int-meets
              time-int-met-by
              time-int-overlaps
              time-int-overlapped-by
              time-int-starts
              time-int-started-by
              time-of-existence
              time-of-existence-of)))

;;; ----------

(Situation has 
  (domain-of (time-during))
  (range-of (time-contains))
  (superclasses (Thing)))

;;; ----------

(*abnormal has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*ACDT has 
  (instance-of (Time-Zone-Constant))
  (name ("ACDT")))

;;; ----------

(*ACST has 
  (instance-of (Time-Zone-Constant))
  (name ("ACST")))

;;; ----------

(*acute has 
  (instance-of (Angle-Constant)))

;;; ----------

(*adolescent has 
  (instance-of (Age-Constant)))

;;; ----------

(*ADT has 
  (instance-of (Time-Zone-Constant))
  (name ("ADT")))

;;; ----------

(*AEDT has 
  (instance-of (Time-Zone-Constant))
  (name ("AEDT")))

;;; ----------

(*AEST has 
  (instance-of (Time-Zone-Constant))
  (name ("AEST")))

;;; ----------

(*aggressive has 
  (instance-of (Trait-Constant)))

;;; ----------

(*AKDT has 
  (instance-of (Time-Zone-Constant))
  (name ("AKDT")))

;;; ----------

(*AKST has 
  (instance-of (Time-Zone-Constant))
  (name ("AKST")))

;;; ----------

(*aliceBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*animate has 
  (instance-of (Animacy-Constant)))

;;; ----------

(*antiqueWhite has 
  (instance-of (Color-Constant)))

;;; ----------

(*aqua has 
  (instance-of (Color-Constant)))

;;; ----------

(*aquamarine has 
  (instance-of (Color-Constant)))

;;; ----------

(*aqueous has 
  (instance-of (State-Constant)))

;;; ----------

(*Arabic has 
  (instance-of (Natural-Language)))

;;; ----------

(*arcminute has 
  (instance-of (UoM-Coordinate
                UoM-Angle))
  (wn20-synset ((:set (:triple "arcminute" 0 "n") (:triple "arcminutes" 0 "n") (:triple "arcmin" 0 "n")))))

;;; ----------

(*arcsecond has 
  (instance-of (UoM-Coordinate
                UoM-Angle))
  (wn20-synset ((:set (:triple "arcsecond" 0 "n") (:triple "arcseconds" 0 "n") (:triple "arcs" 0 "n")))))

;;; ----------

(*arid has 
  (instance-of (Wetness-Constant)))

;;; ----------

(*AST has 
  (instance-of (Time-Zone-Constant))
  (name ("AST")))

;;; ----------

(*auburn has 
  (instance-of (Color-Constant)))

;;; ----------

(*average has 
  (instance-of (Height-Constant)))

;;; ----------

(*AWST has 
  (instance-of (Time-Zone-Constant))
  (name ("AWST")))

;;; ----------

(*azure has 
  (instance-of (Color-Constant)))

;;; ----------

(*bar has 
  (instance-of (UoM-Pressure))
  (wn20-synset ((:set (:triple "bar" 7 "n")))))

;;; ----------

(*beat-per-minute has 
  (instance-of (UoM-Rate))
  (wn20-synset ((:set (:triple "beat per minute" 0 "n") (:triple "beats per minute" 0 "n") (:triple "bpm" 0 "n")))))

;;; ----------

(*beige has 
  (instance-of (Color-Constant)))

;;; ----------

(*Bengali has 
  (instance-of (Natural-Language)))

;;; ----------

(*big has 
  (instance-of (Size-Constant)))

;;; ----------

(*bisque has 
  (instance-of (Color-Constant)))

;;; ----------

(*bitter has 
  (instance-of (Taste-Constant)))

;;; ----------

(*black has 
  (instance-of (Color-Constant)))

;;; ----------

(*blanchedAlmond has 
  (instance-of (Color-Constant)))

;;; ----------

(*blinding has 
  (instance-of (Brightness-Constant)))

;;; ----------

(*blond has 
  (instance-of (Color-Constant)))

;;; ----------

(*blonde has 
  (instance-of (Color-Constant)))

;;; ----------

(*blue has 
  (instance-of (Color-Constant)))

;;; ----------

(*blueViolet has 
  (instance-of (Color-Constant)))

;;; ----------

(*boiling has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*boney has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*breakable has 
  (instance-of (Breakability-Constant)))

;;; ----------

(*breakable-unbreakable-scale has 
  (instance-of (Breakability-Scale))
  (element-type (Breakability-Constant))
  (element ((:seq *breakable *fragile *delicate *brittle *unbreakable))))

;;; ----------

(*brief has 
  (instance-of (Duration-Constant)))

;;; ----------

(*bright has 
  (instance-of (Brightness-Constant)))

;;; ----------

(*britishpound has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "bp" 0 "n")))))

;;; ----------

(*brittle has 
  (instance-of (Breakability-Constant)))

;;; ----------

(*brown has 
  (instance-of (Color-Constant)))

;;; ----------

(*brunette has 
  (instance-of (Color-Constant)))

;;; ----------

(*burlyWood has 
  (instance-of (Color-Constant)))

;;; ----------

(*buttery has 
  (instance-of (Taste-Constant)))

;;; ----------

(*cadetBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*canadiandollar has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "cad" 0 "n")))))

;;; ----------

(*candela has 
  (instance-of (UoM-Luminous-Intensity
                UoM-Brightness))
  (wn20-synset ((((:set (:triple "candela" 0 "n") (:triple "candelas" 0 "n") (:triple "cd" 0 "n"))) && ((:set (:triple "candela" 0 "n") (:triple "candelas" 0 "n")))))))

;;; ----------

(*candela-per-centimeter-squared has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "candela per centimeter squared" 0 "n") (:triple "candelas per centimeter squared" 0 "n")))))

;;; ----------

(*candela-per-foot-squared has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "candela per foot squared" 0 "n") (:triple "candelas per foot squared" 0 "n")))))

;;; ----------

(*candela-per-meter-squared has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "candela per meter squared" 0 "n") (:triple "candelas per meter squared" 0 "n")))))

;;; ----------

(*Cantonese has 
  (instance-of (Natural-Language)))

;;; ----------

(*capacious has 
  (instance-of (Capacity-Constant)))

;;; ----------

(*CDT has 
  (instance-of (Time-Zone-Constant))
  (name ("CDT")))

;;; ----------

(*celsius has 
  (instance-of (UoM-Temperature))
  (wn20-synset ((:set (:triple "celsius" 0 "n")))))

;;; ----------

(*centimeter has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "centimeter" 0 "n") (:triple "centimeters" 0 "n") (:triple "cm" 0 "n")))))

;;; ----------

(*centimeter-per-second has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "centimeter_per_second" 0 "n") (:triple "centimeters_per_second" 0 "n") (:triple "cm/s" 0 "n")))))

;;; ----------

(*centimeter-per-second-squared has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "centimeter per second squared" 0 "n") (:triple "centimeters per second squared" 0 "n") (:triple "cm/s^2" 0 "n")))))

;;; ----------

(*CEST has 
  (instance-of (Time-Zone-Constant))
  (name ("CEST")))

;;; ----------

(*CET has 
  (instance-of (Time-Zone-Constant))
  (name ("CET")))

;;; ----------

(*chartreuse has 
  (instance-of (Color-Constant)))

;;; ----------

(*cheap has 
  (instance-of (Worth-Constant)))

;;; ----------

(*chocolate has 
  (instance-of (Color-Constant)))

;;; ----------

(*circle has 
  (instance-of (Shape-Constant)))

;;; ----------

(*class-description has 
  (instance-of (Viewpoint-Query-Type)))

;;; ----------

(*cold has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*cold-hot-scale has 
  (instance-of (Temperature-Scale))
  (element-type (Temperature-Constant))
  (element ((:seq *cold *warm *hot))))

;;; ----------

(*colorless has 
  (instance-of (Color-Constant)))

;;; ----------

(*cool has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*coral has 
  (instance-of (Color-Constant)))

;;; ----------

(*cornflowerBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*cornsilk has 
  (instance-of (Color-Constant)))

;;; ----------

(*creamy has 
  (instance-of (Taste-Constant)))

;;; ----------

(*crimson has 
  (instance-of (Color-Constant)))

;;; ----------

(*crystalline has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*CST has 
  (instance-of (Time-Zone-Constant))
  (name ("CST")))

;;; ----------

(*CXT has 
  (instance-of (Time-Zone-Constant))
  (name ("CXT")))

;;; ----------

(*cyan has 
  (instance-of (Color-Constant)))

;;; ----------

(*daily has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "daily" 0 "n")))))

;;; ----------

(*dalton has 
  (instance-of (UoM-Mass))
  (wn20-synset ((:set (:triple "dalton" 0 "n") (:triple "daltons" 0 "n")))))

;;; ----------

(*damp has 
  (instance-of (Wetness-Constant)))

;;; ----------

(*dark has 
  (instance-of (Brightness-Constant)))

;;; ----------

(*dark-blinding-scale has 
  (instance-of (Brightness-Scale))
  (element-type (Brightness-Constant))
  (element ((:seq *dark *dim *bright *blinding))))

;;; ----------

(*darkBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkCyan has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkGoldenRod has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkGray has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkKhaki has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkMagenta has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkOliveGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkorange has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkOrchid has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkRed has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkSalmon has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkSeaGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkSlateBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkSlateGray has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkTurquoise has 
  (instance-of (Color-Constant)))

;;; ----------

(*darkViolet has 
  (instance-of (Color-Constant)))

;;; ----------

(*day has 
  (instance-of (UoM-Time
                UoM-Duration))
  (wn20-synset ((((:set (:triple "day" 0 "n") (:triple "days" 0 "n"))) && ((:set (:triple "day" 0 "n") (:triple "day" 0 "n")))))))

;;; ----------

(*deep has 
  (instance-of (Depth-Constant
                Primary-Constant)))

;;; ----------

(*deepPink has 
  (instance-of (Color-Constant)))

;;; ----------

(*deepSkyBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*degree has 
  (instance-of (UoM-Coordinate
                UoM-Angle))
  (wn20-synset ((:set (:triple "degree" 0 "n") (:triple "degrees" 0 "n")))))

;;; ----------

(*dejectedly has 
  (instance-of (Manner-Constant)))

;;; ----------

(*delicate has 
  (instance-of (Breakability-Constant)))

;;; ----------

(*dense has 
  (instance-of (Density-Constant)))

;;; ----------

(*dim has 
  (instance-of (Brightness-Constant)))

;;; ----------

(*dimGray has 
  (instance-of (Color-Constant)))

;;; ----------

(*dishonest has 
  (instance-of (Trait-Constant)))

;;; ----------

(*dodgerBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*dozen has 
  (instance-of (UoM-Quantity))
  (wn20-synset ((:set (:triple "dozen" 0 "n") (:triple "dozens" 0 "n")))))

;;; ----------

(*dry has 
  (instance-of (Wetness-Constant)))

;;; ----------

(*dry-wet-scale has 
  (instance-of (Wetness-Scale))
  (element-type (Wetness-Constant))
  (element ((:seq *dry *arid *damp *moist *wet))))

;;; ----------

(*EDT has 
  (instance-of (Time-Zone-Constant))
  (name ("EDT")))

;;; ----------

(*EEST has 
  (instance-of (Time-Zone-Constant))
  (name ("EEST")))

;;; ----------

(*EET has 
  (instance-of (Time-Zone-Constant))
  (name ("EET")))

;;; ----------

(*elderly has 
  (instance-of (Age-Constant)))

;;; ----------

(*English has 
  (instance-of (Natural-Language)))

;;; ----------

(*EST has 
  (instance-of (Time-Zone-Constant))
  (name ("EST")))

;;; ----------

(*euro has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "euro" 0 "n") (:triple "euros" 0 "n")))))

;;; ----------

(*expensive has 
  (instance-of (Worth-Constant)))

;;; ----------

(*fahrenheit has 
  (instance-of (UoM-Temperature))
  (wn20-synset ((:set (:triple "fahrenheit" 0 "n")))))

;;; ----------

(*false has 
  (instance-of (Truth-Constant)))

;;; ----------

(*far has 
  (instance-of (Distance-Constant)))

;;; ----------

(*fast has 
  (instance-of (Rate-Constant)))

;;; ----------

(*feldspar has 
  (instance-of (Color-Constant)))

;;; ----------

(*female has 
  (instance-of (Sex-Constant)))

;;; ----------

(*fireBrick has 
  (instance-of (Color-Constant)))

;;; ----------

(*floralWhite has 
  (instance-of (Color-Constant)))

;;; ----------

(*flowery has 
  (instance-of (Smell-Constant)))

;;; ----------

(*foot has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "foot" 0 "n") (:triple "feet" 0 "n") (:triple "ft" 0 "n")))))

;;; ----------

(*foot-per-second has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "foot_per_second" 0 "n") (:triple "feet_per_second" 0 "n") (:triple "ft/s" 0 "n")))))

;;; ----------

(*foot-per-second-squared has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "foot per second squared" 0 "n") (:triple "feet per second squared" 0 "n") (:triple "ft/s^2" 0 "n")))))

;;; ----------

(*footlambert has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "footlambert" 0 "n") (:triple "footlamberts" 0 "n")))))

;;; ----------

(*forestGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*forever has 
  (instance-of (Duration-Constant)))

;;; ----------

(*forever-brief-scale has 
  (instance-of (Duration-Scale))
  (element-type (Duration-Constant))
  (element ((:seq *forever *brief))))

;;; ----------

(*foul has 
  (instance-of (Smell-Constant)))

;;; ----------

(*fragile has 
  (instance-of (Breakability-Constant)))

;;; ----------

(*freezing has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*freezing-boiling-scale has 
  (instance-of (Temperature-Scale))
  (element-type (Temperature-Constant))
  (element ((:seq *freezing *cold *warm *hot *boiling))))

;;; ----------

(*French has 
  (instance-of (Natural-Language)))

;;; ----------

(*fresh has 
  (instance-of (Smell-Constant)))

;;; ----------

(*Friday has 
  (instance-of (Day-Constant))
  (name ("Friday")))

;;; ----------

(*fruity has 
  (instance-of (Smell-Constant)))

;;; ----------

(*fuchsia has 
  (instance-of (Color-Constant)))

;;; ----------

(*G has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "G" 0 "n")))))

;;; ----------

(*gainsboro has 
  (instance-of (Color-Constant)))

;;; ----------

(*gallon has 
  (instance-of (UoM-Volume))
  (wn20-synset ((:set (:triple "gallon" 0 "n") (:triple "gallons" 0 "n")))))

;;; ----------

(*gas has 
  (instance-of (State-Constant)))

;;; ----------

(*German has 
  (instance-of (Natural-Language)))

;;; ----------

(*GEST has 
  (instance-of (Time-Zone-Constant))
  (name ("GEST")))

;;; ----------

(*GET has 
  (instance-of (Time-Zone-Constant))
  (name ("GET")))

;;; ----------

(*ghostWhite has 
  (instance-of (Color-Constant)))

;;; ----------

(*gigahertz has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "gigahertz" 0 "n") (:triple "GHz" 0 "n")))))

;;; ----------

(*gigantic has 
  (instance-of (Size-Constant)))

;;; ----------

(*glassy has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*GMT has 
  (instance-of (Time-Zone-Constant))
  (name ("GMT")))

;;; ----------

(*gold has 
  (instance-of (Color-Constant)))

;;; ----------

(*goldenRod has 
  (instance-of (Color-Constant)))

;;; ----------

(*grad has 
  (instance-of (UoM-Angle))
  (wn20-synset ((:set (:triple "grad" 0 "n") (:triple "grads" 0 "n")))))

;;; ----------

(*gradual has 
  (instance-of (Slope-Constant)))

;;; ----------

(*grainy has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*gram has 
  (instance-of (UoM-Mass))
  (wn20-synset ((:set (:triple "gram" 0 "n") (:triple "grams" 0 "n") (:triple "g" 0 "n")))))

;;; ----------

(*gram/liter has 
  (instance-of (UoM-Density))
  (wn20-synset ((:set (:triple "gram/liter" 0 "n") (:triple "gram per liter" 0 "n") (:triple "g/l" 0 "n") (:triple "grams/liter" 0 "n") (:triple "grams per liter" 0 "n")))))

;;; ----------

(*granitic has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*Gravity has 
  (instance-of (Acceleration-Value))
  (value ((:pair 9.8 *meter-per-second-squared))))

;;; ----------

(*gray has 
  (instance-of (Color-Constant)))

;;; ----------

(*green has 
  (instance-of (Color-Constant)))

;;; ----------

(*greenYellow has 
  (instance-of (Color-Constant)))

;;; ----------

(*gritty has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*gross has 
  (instance-of (UoM-Quantity))
  (wn20-synset ((:set (:triple "gross" 0 "n") (:triple "grosses" 0 "n")))))

;;; ----------

(*happily has 
  (instance-of (Manner-Constant)))

;;; ----------

(*hazel has 
  (instance-of (Color-Constant)))

;;; ----------

(*hefty has 
  (instance-of (Mass-Constant)))

;;; ----------

(*hertz has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "hertz" 0 "n") (:triple "Hz" 0 "n")))))

;;; ----------

(*high has 
  (instance-of (Intensity-Constant
                Pressure-Constant
                Priority-Constant)))

;;; ----------

(*Hindi has 
  (instance-of (Natural-Language)))

;;; ----------

(*hollow-volume has 
  (instance-of (Shape-Constant)))

;;; ----------

(*honest has 
  (instance-of (Trait-Constant)))

;;; ----------

(*honeyDew has 
  (instance-of (Color-Constant)))

;;; ----------

(*horizontal has 
  (instance-of (Orientation-Constant
                Slope-Constant)))

;;; ----------

(*horizontal-vertical-scale has 
  (instance-of (Slope-Scale))
  (element-type (Slope-Constant))
  (element ((:seq *horizontal *gradual *steep *vertical))))

;;; ----------

(*horsepower has 
  (instance-of (UoM-Power))
  (wn20-synset ((:set (:triple "horsepower" 0 "n") (:triple "horsepowers" 0 "n") (:triple "hp" 0 "n")))))

;;; ----------

(*hot has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*hotPink has 
  (instance-of (Color-Constant)))

;;; ----------

(*hour has 
  (instance-of (UoM-Time
                UoM-Duration))
  (wn20-synset ((((:set (:triple "hour" 0 "n") (:triple "hours" 0 "n") (:triple "h" 0 "n"))) && ((:set (:triple "hour" 0 "n") (:triple "hours" 0 "n")))))))

;;; ----------

(*hourly has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "hourly" 0 "n")))))

;;; ----------

(*HST has 
  (instance-of (Time-Zone-Constant))
  (name ("HST")))

;;; ----------

(*huge has 
  (instance-of (Area-Constant
                Size-Constant)))

;;; ----------

(*IDLE has 
  (instance-of (Time-Zone-Constant))
  (name ("IDLE")))

;;; ----------

(*IDLW has 
  (instance-of (Time-Zone-Constant))
  (name ("IDLW")))

;;; ----------

(*impermeable has 
  (instance-of (Integrity-Constant)))

;;; ----------

(*impermeable-permeable-scale has 
  (instance-of (Integrity-Scale))
  (element-type (Integrity-Constant))
  (element ((:seq *impermeable *semi-permeable *permeable))))

;;; ----------

(*important has 
  (instance-of (Importance-Constant)))

;;; ----------

(*inch has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "inch" 0 "n") (:triple "inches" 0 "n") (:triple "in" 0 "n")))))

;;; ----------

(*indianRed has 
  (instance-of (Color-Constant)))

;;; ----------

(*indigo has 
  (instance-of (Color-Constant)))

;;; ----------

(*Indonesian has 
  (instance-of (Natural-Language)))

;;; ----------

(*inexpensive has 
  (instance-of (Worth-Constant)))

;;; ----------

(*IST has 
  (instance-of (Time-Zone-Constant))
  (name ("IST")))

;;; ----------

(*Italian has 
  (instance-of (Natural-Language)))

;;; ----------

(*ivory has 
  (instance-of (Color-Constant)))

;;; ----------

(*Japanese has 
  (instance-of (Natural-Language)))

;;; ----------

(*JST has 
  (instance-of (Time-Zone-Constant))
  (name ("JST")))

;;; ----------

(*juicy has 
  (instance-of (Taste-Constant)))

;;; ----------

(*juvenile has 
  (instance-of (Age-Constant)))

;;; ----------

(*KDT has 
  (instance-of (Time-Zone-Constant))
  (name ("KDT")))

;;; ----------

(*kelvin has 
  (instance-of (UoM-Temperature))
  (wn20-synset ((:set (:triple "kelvin" 0 "n")))))

;;; ----------

(*KGST has 
  (instance-of (Time-Zone-Constant))
  (name ("KGST")))

;;; ----------

(*KGT has 
  (instance-of (Time-Zone-Constant))
  (name ("KGT")))

;;; ----------

(*khaki has 
  (instance-of (Color-Constant)))

;;; ----------

(*kilogram has 
  (instance-of (UoM-Mass))
  (wn20-synset ((:set (:triple "kilogram" 0 "n") (:triple "kilograms" 0 "n") (:triple "kg" 0 "n")))))

;;; ----------

(*kilogram-meter-per-second has 
  (instance-of (UoM-Momentum))
  (wn20-synset ((:set (:triple "kilogram meter per second" 0 "n") (:triple "kilograms meter per second" 0 "n")))))

;;; ----------

(*kilogram-meter-squared has 
  (instance-of (UoM-Moment-of-Inertia))
  (wn20-synset ((:set (:triple "kilogram meter squared" 0 "n") (:triple "kilograms meter squared" 0 "n")))))

;;; ----------

(*kilohertz has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "kilohertz" 0 "n") (:triple "kHz" 0 "n")))))

;;; ----------

(*kilometer has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "kilometer" 0 "n") (:triple "kilometers" 0 "n") (:triple "km" 0 "n")))))

;;; ----------

(*kilometer-per-hour has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "kilometer_per_hour" 0 "n") (:triple "kilometers_per_hour" 0 "n") (:triple "km/h" 0 "n")))))

;;; ----------

(*kilometer-per-hour-minute has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "kilometer per hour minute" 0 "n") (:triple "kilometers per hour minute" 0 "n")))))

;;; ----------

(*kilometer-per-second has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "kilometer_per_second" 0 "n") (:triple "kilometers_per_second" 0 "n") (:triple "km/s" 0 "n")))))

;;; ----------

(*kilometer-per-second-squared has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "kilometer per second squared" 0 "n") (:triple "kilometers per second squared" 0 "n") (:triple "km/s^2" 0 "n")))))

;;; ----------

(*kilopascal has 
  (instance-of (UoM-Pressure))
  (wn20-synset ((:set (:triple "kilopascal" 0 "n") (:triple "kpa" 0 "n")))))

;;; ----------

(*kilowatt has 
  (instance-of (UoM-Power))
  (wn20-synset ((:set (:triple "kilowatt" 0 "n") (:triple "kilowatts" 0 "n") (:triple "kW" 0 "n")))))

;;; ----------

(*Korean has 
  (instance-of (Natural-Language)))

;;; ----------

(*KST has 
  (instance-of (Time-Zone-Constant))
  (name ("KST")))

;;; ----------

(*lambert has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "lambert" 0 "n") (:triple "lamberts" 0 "n")))))

;;; ----------

(*large has 
  (instance-of (Volume-Constant)))

;;; ----------

(*lavender has 
  (instance-of (Color-Constant)))

;;; ----------

(*lavenderBlush has 
  (instance-of (Color-Constant)))

;;; ----------

(*lawnGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*lazy has 
  (instance-of (Trait-Constant)))

;;; ----------

(*lemonChiffon has 
  (instance-of (Color-Constant)))

;;; ----------

(*light has 
  (instance-of (Mass-Constant)))

;;; ----------

(*light-hefty-scale has 
  (instance-of (Mass-Scale))
  (element-type (Mass-Constant))
  (element ((:seq *light *hefty))))

;;; ----------

(*lightBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightCoral has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightCyan has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightGoldenRodYellow has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightGrey has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightPink has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightSalmon has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightSeaGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightSkyBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightSlateBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightSlateGray has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightSteelBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*lightYellow has 
  (instance-of (Color-Constant)))

;;; ----------

(*lime has 
  (instance-of (Color-Constant)))

;;; ----------

(*limeGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*linen has 
  (instance-of (Color-Constant)))

;;; ----------

(*liquid has 
  (instance-of (State-Constant)))

;;; ----------

(*liter has 
  (instance-of (UoM-Volume))
  (wn20-synset ((:set (:triple "liter" 0 "n") (:triple "liters" 0 "n") (:triple "l" 0 "n")))))

;;; ----------

(*little has 
  (instance-of (Size-Constant)))

;;; ----------

(*little-gigantic-scale has 
  (instance-of (Size-Scale))
  (element-type (Size-Constant))
  (element ((:seq *little *undersized *oversized *gigantic))))

;;; ----------

(*long has 
  (instance-of (Distance-Constant
                Primary-Constant
                Duration-Constant
                Length-Constant)))

;;; ----------

(*low has 
  (instance-of (Intensity-Constant
                Pressure-Constant
                Priority-Constant)))

;;; ----------

(*low-urgent-scale has 
  (instance-of (Priority-Scale))
  (element-type (Priority-Constant))
  (element ((:seq *low *medium *high *urgent))))

;;; ----------

(*lumen has 
  (instance-of (UoM-Luminous-Flux))
  (wn20-synset ((:set (:triple "lumen" 0 "n") (:triple "lumens" 0 "n")))))

;;; ----------

(*magenta has 
  (instance-of (Color-Constant)))

;;; ----------

(*male has 
  (instance-of (Sex-Constant)))

;;; ----------

(*Mandarin has 
  (instance-of (Natural-Language)))

;;; ----------

(*Marathi has 
  (instance-of (Natural-Language)))

;;; ----------

(*maroon has 
  (instance-of (Color-Constant)))

;;; ----------

(*match-result has 
  (instance-of (Viewpoint-Query-Type)))

;;; ----------

(*mavajoWhite has 
  (instance-of (Color-Constant)))

;;; ----------

(*MDT has 
  (instance-of (Time-Zone-Constant))
  (name ("MDT")))

;;; ----------

(*medium has 
  (instance-of (Intensity-Constant
                Priority-Constant)))

;;; ----------

(*mediumAquaMarine has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumOrchid has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumPurple has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumSeaGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumSlateBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumSpringGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumTurquoise has 
  (instance-of (Color-Constant)))

;;; ----------

(*mediumVioletRed has 
  (instance-of (Color-Constant)))

;;; ----------

(*megahertz has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "megahertz" 0 "n") (:triple "MHz" 0 "n")))))

;;; ----------

(*megawatt has 
  (instance-of (UoM-Power))
  (wn20-synset ((:set (:triple "megawatt" 0 "n") (:triple "megawatts" 0 "n") (:triple "MW" 0 "n")))))

;;; ----------

(*meter has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "meter" 0 "n") (:triple "meters" 0 "n") (:triple "m" 0 "n")))))

;;; ----------

(*meter-per-second has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "meter_per_second" 0 "n") (:triple "meters_per_second" 0 "n") (:triple "m/s" 0 "n")))))

;;; ----------

(*meter-per-second-squared has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "meter per second squared" 0 "n") (:triple "meters per second squared" 0 "n") (:triple "m/s^2" 0 "n")))))

;;; ----------

(*micrometer has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "micrometer" 0 "n") (:triple "micrometers" 0 "n")))))

;;; ----------

(*microscopic has 
  (instance-of (Size-Constant)))

;;; ----------

(*microscopic-gigantic-scale has 
  (instance-of (Size-Scale))
  (element-type (Size-Constant))
  (element ((:seq *microscopic *tiny *little *undersized *average *oversized *big *huge *gigantic))))

;;; ----------

(*microsecond has 
  (instance-of (UoM-Duration))
  (wn20-synset ((:set (:triple "microsecond" 0 "n") (:triple "microseconds" 0 "n")))))

;;; ----------

(*middle-aged has 
  (instance-of (Age-Constant)))

;;; ----------

(*midnightBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*mild has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*mile has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "mile" 0 "n") (:triple "miles" 0 "n") (:triple "mi" 0 "n")))))

;;; ----------

(*mile-per-hour has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "mile_per_hour" 0 "n") (:triple "miles_per_hour" 0 "n") (:triple "mph" 0 "n")))))

;;; ----------

(*mile-per-second has 
  (instance-of (UoM-Velocity))
  (wn20-synset ((:set (:triple "mile_per_second" 0 "n") (:triple "miles_per_second" 0 "n")))))

;;; ----------

(*mile-per-second-squared has 
  (instance-of (UoM-Acceleration))
  (wn20-synset ((:set (:triple "mile per second squared" 0 "n") (:triple "miles per second squared" 0 "n") (:triple "mi/s^2" 0 "n")))))

;;; ----------

(*millibar has 
  (instance-of (UoM-Pressure))
  (wn20-synset ((:set (:triple "millibar" 1 "n")))))

;;; ----------

(*millilambert has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "millilambert" 0 "n") (:triple "millilamberts" 0 "n")))))

;;; ----------

(*milliliter has 
  (instance-of (UoM-Volume))
  (wn20-synset ((:set (:triple "milliliter" 0 "n") (:triple "milliliters" 0 "n") (:triple "ml" 0 "n")))))

;;; ----------

(*millimeter has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "millimeter" 0 "n") (:triple "millimeters" 0 "n") (:triple "mm" 0 "n")))))

;;; ----------

(*millisecond has 
  (instance-of (UoM-Duration))
  (wn20-synset ((:set (:triple "millisecond" 0 "n") (:triple "milliseconds" 0 "n") (:triple "ms" 0 "n")))))

;;; ----------

(*milliwatt has 
  (instance-of (UoM-Power))
  (wn20-synset ((:set (:triple "milliwatt" 0 "n") (:triple "milliwatts" 0 "n") (:triple "mW" 0 "n")))))

;;; ----------

(*mintCream has 
  (instance-of (Color-Constant)))

;;; ----------

(*minute has 
  (instance-of (UoM-Time
                UoM-Duration))
  (wn20-synset ((((:set (:triple "minute" 0 "n") (:triple "minutes" 0 "n") (:triple "min" 0 "n"))) && ((:set (:triple "minute" 0 "n") (:triple "minutes" 0 "n")))))))

;;; ----------

(*mistyRose has 
  (instance-of (Color-Constant)))

;;; ----------

(*moccasin has 
  (instance-of (Color-Constant)))

;;; ----------

(*moderately-important has 
  (instance-of (Importance-Constant)))

;;; ----------

(*moist has 
  (instance-of (Wetness-Constant)))

;;; ----------

(*mole has 
  (instance-of (UoM-Quantity))
  (wn20-synset ((:set (:triple "mole" 0 "n") (:triple "moles" 0 "n")))))

;;; ----------

(*Monday has 
  (instance-of (Day-Constant))
  (name ("Monday")))

;;; ----------

(*month has 
  (instance-of (UoM-Time
                UoM-Duration))
  (wn20-synset ((:set (:triple "month" 0 "n") (:triple "months" 0 "n")))))

;;; ----------

(*monthly has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "monthly" 0 "n")))))

;;; ----------

(*MSD has 
  (instance-of (Time-Zone-Constant))
  (name ("MSD")))

;;; ----------

(*MSK has 
  (instance-of (Time-Zone-Constant))
  (name ("MSK")))

;;; ----------

(*MST has 
  (instance-of (Time-Zone-Constant))
  (name ("MST")))

;;; ----------

(*musky has 
  (instance-of (Smell-Constant)))

;;; ----------

(*nanometer has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "nanometer" 0 "n") (:triple "nm" 0 "n")))))

;;; ----------

(*nanosecond has 
  (instance-of (UoM-Duration))
  (wn20-synset ((:set (:triple "nanosecond" 0 "n") (:triple "nanoseconds" 0 "n") (:triple "ns" 0 "n")))))

;;; ----------

(*narrow has 
  (instance-of (Width-Constant)))

;;; ----------

(*narrow-wide-scale has 
  (instance-of (Width-Scale))
  (element-type (Width-Constant))
  (element ((:seq *narrow *wide))))

;;; ----------

(*navy has 
  (instance-of (Color-Constant)))

;;; ----------

(*NDT has 
  (instance-of (Time-Zone-Constant))
  (name ("NDT")))

;;; ----------

(*near has 
  (instance-of (Distance-Constant)))

;;; ----------

(*near-far-scale has 
  (instance-of (Distance-Scale))
  (element-type (Distance-Constant))
  (element ((:seq *near *far))))

;;; ----------

(*negative has 
  (instance-of (Polarity-Constant)))

;;; ----------

(*negligible has 
  (instance-of (Intensity-Constant)))

;;; ----------

(*never has 
  (instance-of (Frequency-Constant)))

;;; ----------

(*nit has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "nit" 0 "n") (:triple "nits" 0 "n")))))

;;; ----------

(*none has 
  (instance-of (Capacity-Constant)))

;;; ----------

(*none-unlimited-scale has 
  (instance-of (Capacity-Scale))
  (element-type (Capacity-Constant))
  (element ((:seq *none *roomy *capacious *unlimited))))

;;; ----------

(*normal has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*not-animate has 
  (instance-of (Animacy-Constant)))

;;; ----------

(*not-sentient has 
  (instance-of (Sentience-Constant)))

;;; ----------

(*NST has 
  (instance-of (Time-Zone-Constant))
  (name ("NST")))

;;; ----------

(*ntdollar has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "ntdollar" 0 "n")))))

;;; ----------

(*NZDT has 
  (instance-of (Time-Zone-Constant))
  (name ("NZDT")))

;;; ----------

(*NZST has 
  (instance-of (Time-Zone-Constant))
  (name ("NZST")))

;;; ----------

(*obtuse has 
  (instance-of (Angle-Constant)))

;;; ----------

(*odorless has 
  (instance-of (Smell-Constant)))

;;; ----------

(*often has 
  (instance-of (Frequency-Constant)))

;;; ----------

(*often-never-scale has 
  (instance-of (Frequency-Scale))
  (element-type (Frequency-Constant))
  (element ((:seq *often *rarely *never))))

;;; ----------

(*old has 
  (instance-of (Age-Constant
                Primary-Constant)))

;;; ----------

(*oldLace has 
  (instance-of (Color-Constant)))

;;; ----------

(*olive has 
  (instance-of (Color-Constant)))

;;; ----------

(*oliveDrab has 
  (instance-of (Color-Constant)))

;;; ----------

(*orange has 
  (instance-of (Color-Constant)))

;;; ----------

(*orangeRed has 
  (instance-of (Color-Constant)))

;;; ----------

(*orchid has 
  (instance-of (Color-Constant)))

;;; ----------

(*oval has 
  (instance-of (Shape-Constant)))

;;; ----------

(*oversized has 
  (instance-of (Size-Constant)))

;;; ----------

(*pair has 
  (instance-of (UoM-Quantity))
  (wn20-synset ((:set (:triple "pair" 0 "n") (:triple "pairs" 0 "n")))))

;;; ----------

(*paleGoldenRod has 
  (instance-of (Color-Constant)))

;;; ----------

(*paleGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*paleTurquoise has 
  (instance-of (Color-Constant)))

;;; ----------

(*paleVioletRed has 
  (instance-of (Color-Constant)))

;;; ----------

(*papayaWhip has 
  (instance-of (Color-Constant)))

;;; ----------

(*parallelogram has 
  (instance-of (Shape-Constant)))

;;; ----------

(*pascal has 
  (instance-of (UoM-Pressure))
  (wn20-synset ((:set (:triple "pascal" 1 "n") (:triple "pa" 1 "n")))))

;;; ----------

(*PDT has 
  (instance-of (Time-Zone-Constant))
  (name ("PDT")))

;;; ----------

(*peachPuff has 
  (instance-of (Color-Constant)))

;;; ----------

(*per-day has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per day" 0 "n")))))

;;; ----------

(*per-hour has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per hour" 0 "n")))))

;;; ----------

(*per-minute has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per minute" 0 "n")))))

;;; ----------

(*per-month has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per month" 0 "n")))))

;;; ----------

(*per-second has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per second" 0 "n")))))

;;; ----------

(*per-week has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per week" 0 "n")))))

;;; ----------

(*per-year has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "per year" 0 "n")))))

;;; ----------

(*permeable has 
  (instance-of (Integrity-Constant)))

;;; ----------

(*peru has 
  (instance-of (Color-Constant)))

;;; ----------

(*pink has 
  (instance-of (Color-Constant)))

;;; ----------

(*plum has 
  (instance-of (Color-Constant)))

;;; ----------

(*politely has 
  (instance-of (Manner-Constant)))

;;; ----------

(*polygon has 
  (instance-of (Shape-Constant)))

;;; ----------

(*Portugese has 
  (instance-of (Natural-Language)))

;;; ----------

(*positive has 
  (instance-of (Polarity-Constant)))

;;; ----------

(*pounds-per-square-inch has 
  (instance-of (UoM-Pressure))
  (wn20-synset ((:set (:triple "pounds per square inch" 1 "n") (:triple "psi" 1 "n")))))

;;; ----------

(*powderBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*PST has 
  (instance-of (Time-Zone-Constant))
  (name ("PST")))

;;; ----------

(*Punjabi has 
  (instance-of (Natural-Language)))

;;; ----------

(*purple has 
  (instance-of (Color-Constant)))

;;; ----------

(*radian has 
  (instance-of (UoM-Angle))
  (wn20-synset ((:set (:triple "radian" 0 "n") (:triple "radians" 0 "n") (:triple "rad" 0 "n")))))

;;; ----------

(*rancid has 
  (instance-of (Smell-Constant)))

;;; ----------

(*rare has 
  (instance-of (Density-Constant)))

;;; ----------

(*rare-dense-scale has 
  (instance-of (Density-Scale))
  (element-type (Density-Constant))
  (element ((:seq *rare *dense))))

;;; ----------

(*rarely has 
  (instance-of (Frequency-Constant)))

;;; ----------

(*rectangle has 
  (instance-of (Shape-Constant)))

;;; ----------

(*red has 
  (instance-of (Color-Constant)))

;;; ----------

(*redhead has 
  (instance-of (Color-Constant)))

;;; ----------

(*reflex has 
  (instance-of (Angle-Constant)))

;;; ----------

(*revolution-per-minute has 
  (instance-of (UoM-Rotational-Rate))
  (wn20-synset ((:set (:triple "revolution per minute" 0 "n") (:triple "revolutions per minute" 0 "n") (:triple "rpm" 0 "n")))))

;;; ----------

(*right has 
  (instance-of (Angle-Constant)))

;;; ----------

(*ringgit has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "ringit" 0 "n")))))

;;; ----------

(*rmb has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "rmb" 0 "n")))))

;;; ----------

(*rocky has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*rol has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "rol" 0 "n")))))

;;; ----------

(*roomy has 
  (instance-of (Capacity-Constant)))

;;; ----------

(*rosyBrown has 
  (instance-of (Color-Constant)))

;;; ----------

(*rough has 
  (instance-of (Texture-Constant)))

;;; ----------

(*royalBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*Russian has 
  (instance-of (Natural-Language)))

;;; ----------

(*saddleBrown has 
  (instance-of (Color-Constant)))

;;; ----------

(*salmon has 
  (instance-of (Color-Constant)))

;;; ----------

(*sandyBrown has 
  (instance-of (Color-Constant)))

;;; ----------

(*Saturday has 
  (instance-of (Day-Constant))
  (name ("Saturday")))

;;; ----------

(*score has 
  (instance-of (UoM-Quantity))
  (wn20-synset ((:set (:triple "score" 0 "n") (:triple "scores" 0 "n")))))

;;; ----------

(*seaGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*seaShell has 
  (instance-of (Color-Constant)))

;;; ----------

(*second has 
  (instance-of (UoM-Time
                UoM-Duration))
  (wn20-synset ((:set (:triple "second" 0 "n") (:triple "seconds" 0 "n") (:triple "s" 0 "n")))))

;;; ----------

(*semi-permeable has 
  (instance-of (Integrity-Constant)))

;;; ----------

(*sentient has 
  (instance-of (Sentience-Constant)))

;;; ----------

(*sgdollar has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "sgdollar" 0 "n")))))

;;; ----------

(*shallow has 
  (instance-of (Depth-Constant)))

;;; ----------

(*shallow-deep-scale has 
  (instance-of (Depth-Scale))
  (element-type (Depth-Constant))
  (element ((:seq *shallow *deep))))

;;; ----------

(*short has 
  (instance-of (Height-Constant
                Length-Constant)))

;;; ----------

(*short-long-scale has 
  (instance-of (Length-Scale))
  (element-type (Length-Constant))
  (element ((:seq *short *long))))

;;; ----------

(*short-tall-scale has 
  (instance-of (Height-Scale))
  (element-type (Height-Constant))
  (element ((:seq *short *average *tall))))

;;; ----------

(*sienna has 
  (instance-of (Color-Constant)))

;;; ----------

(*silver has 
  (instance-of (Color-Constant)))

;;; ----------

(*skyBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*slateBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*slateGray has 
  (instance-of (Color-Constant)))

;;; ----------

(*slot-query has 
  (instance-of (Viewpoint-Query-Type)))

;;; ----------

(*slot-value has 
  (instance-of (Viewpoint-Query-Type)))

;;; ----------

(*slow has 
  (instance-of (Rate-Constant)))

;;; ----------

(*slow-fast-scale has 
  (instance-of (Rate-Scale))
  (element-type (Rate-Constant))
  (element ((:seq *slow *fast))))

;;; ----------

(*slug has 
  (instance-of (UoM-Mass))
  (wn20-synset ((:set (:triple "slug" 0 "n") (:triple "slugs" 0 "n")))))

;;; ----------

(*small has 
  (instance-of (Size-Constant
                Volume-Constant)))

;;; ----------

(*small-large-scale has 
  (instance-of (Volume-Scale))
  (element-type (Volume-Constant))
  (element ((:seq *small *large))))

;;; ----------

(*smokey has 
  (instance-of (Smell-Constant)))

;;; ----------

(*smooth has 
  (instance-of (Texture-Constant)))

;;; ----------

(*snow has 
  (instance-of (Color-Constant)))

;;; ----------

(*solid has 
  (instance-of (State-Constant)))

;;; ----------

(*sour has 
  (instance-of (Taste-Constant)))

;;; ----------

(*Spanish has 
  (instance-of (Natural-Language)))

;;; ----------

(*spicy has 
  (instance-of (Smell-Constant)))

;;; ----------

(*springGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*square has 
  (instance-of (Shape-Constant)))

;;; ----------

(*square-foot has 
  (instance-of (UoM-Area))
  (wn20-synset ((:set (:triple "square foot" 0 "n") (:triple "square feet" 0 "n") (:triple "ft^2" 0 "n")))))

;;; ----------

(*square-inch has 
  (instance-of (UoM-Area))
  (wn20-synset ((:set (:triple "square inch" 0 "n") (:triple "square inches" 0 "n") (:triple "in^2" 0 "n")))))

;;; ----------

(*square-meter has 
  (instance-of (UoM-Area))
  (wn20-synset ((:set (:triple "square meter" 0 "n") (:triple "square meters" 0 "n") (:triple "m^2" 0 "n")))))

;;; ----------

(*steelBlue has 
  (instance-of (Color-Constant)))

;;; ----------

(*steep has 
  (instance-of (Slope-Constant)))

;;; ----------

(*stilb has 
  (instance-of (UoM-Luminance))
  (wn20-synset ((:set (:triple "stilb" 0 "n") (:triple "stilbs" 0 "n")))))

;;; ----------

(*stinky has 
  (instance-of (Smell-Constant)))

;;; ----------

(*stony has 
  (instance-of (Consistency-Constant)))

;;; ----------

(*straight has 
  (instance-of (Angle-Constant)))

;;; ----------

(*strong has 
  (instance-of (Intensity-Constant)))

;;; ----------

(*submissive has 
  (instance-of (Trait-Constant)))

;;; ----------

(*Sunday has 
  (instance-of (Day-Constant))
  (name ("Sunday")))

;;; ----------

(*sweet has 
  (instance-of (Taste-Constant)))

;;; ----------

(*tall has 
  (instance-of (Height-Constant
                Primary-Constant)))

;;; ----------

(*Tamil has 
  (instance-of (Natural-Language)))

;;; ----------

(*tan has 
  (instance-of (Color-Constant)))

;;; ----------

(*tasteless has 
  (instance-of (Taste-Constant)))

;;; ----------

(*teal has 
  (instance-of (Color-Constant)))

;;; ----------

(*teenage has 
  (instance-of (Age-Constant)))

;;; ----------

(*Telugu has 
  (instance-of (Natural-Language)))

;;; ----------

(*thick has 
  (instance-of (Thickness-Constant
                Primary-Constant)))

;;; ----------

(*thin has 
  (instance-of (Thickness-Constant)))

;;; ----------

(*thin-thick-scale has 
  (instance-of (Thickness-Scale))
  (element-type (Thickness-Constant))
  (element ((:seq *thin *thick))))

;;; ----------

(*thistle has 
  (instance-of (Color-Constant)))

;;; ----------

(*Thursday has 
  (instance-of (Day-Constant))
  (name ("Thursday")))

;;; ----------

(*tiny has 
  (instance-of (Area-Constant
                Size-Constant)))

;;; ----------

(*tiny-huge-scale has 
  (instance-of (Area-Scale))
  (element-type (Area-Constant))
  (element ((:seq *tiny *huge))))

;;; ----------

(*tireless has 
  (instance-of (Trait-Constant)))

;;; ----------

(*tomato has 
  (instance-of (Color-Constant)))

;;; ----------

(*triangle has 
  (instance-of (Shape-Constant)))

;;; ----------

(*true has 
  (instance-of (Truth-Constant)))

;;; ----------

(*Tuesday has 
  (instance-of (Day-Constant))
  (name ("Tuesday")))

;;; ----------

(*turquoise has 
  (instance-of (Color-Constant)))

;;; ----------

(*unbreakable has 
  (instance-of (Breakability-Constant)))

;;; ----------

(*undersized has 
  (instance-of (Size-Constant)))

;;; ----------

(*unimportant has 
  (instance-of (Importance-Constant)))

;;; ----------

(*unimportant-important-scale has 
  (instance-of (Importance-Scale))
  (element-type (Importance-Constant))
  (element ((:seq *unimportant *moderately-important *important))))

;;; ----------

(*unity has 
  (instance-of (UoM-Unitless))
  (wn20-synset ((:set (:triple "no unit" 0 "n") (:triple "unity" 0 "n")))))

;;; ----------

(*unlimited has 
  (instance-of (Capacity-Constant)))

;;; ----------

(*upright has 
  (instance-of (Orientation-Constant)))

;;; ----------

(*Urdu has 
  (instance-of (Natural-Language)))

;;; ----------

(*urgent has 
  (instance-of (Priority-Constant)))

;;; ----------

(*usdollar has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "usd" 0 "n")))))

;;; ----------

(*UTC has 
  (instance-of (Time-Zone-Constant))
  (name ("UTC")))

;;; ----------

(*vertical has 
  (instance-of (Orientation-Constant
                Slope-Constant)))

;;; ----------

(*violet has 
  (instance-of (Color-Constant)))

;;; ----------

(*violetRed has 
  (instance-of (Color-Constant)))

;;; ----------

(*volt has 
  (instance-of (UoM-Voltage))
  (wn20-synset ((:set (:triple "volt" 0 "n") (:triple "volts" 0 "n")))))

;;; ----------

(*vulnerable has 
  (instance-of (Trait-Constant)))

;;; ----------

(*warm has 
  (instance-of (Temperature-Constant)))

;;; ----------

(*watery has 
  (instance-of (Taste-Constant)))

;;; ----------

(*watt has 
  (instance-of (UoM-Power))
  (wn20-synset ((:set (:triple "watt" 0 "n") (:triple "watts" 0 "n") (:triple "W" 0 "n")))))

;;; ----------

(*weak has 
  (instance-of (Intensity-Constant)))

;;; ----------

(*weak-strong-scale has 
  (instance-of (Intensity-Scale))
  (element-type (Intensity-Constant))
  (element ((:seq *negligible *weak *strong))))

;;; ----------

(*Wednesday has 
  (instance-of (Day-Constant))
  (name ("Wednesday")))

;;; ----------

(*week has 
  (instance-of (UoM-Duration))
  (wn20-synset ((:set (:triple "week" 0 "n") (:triple "weeks" 0 "n")))))

;;; ----------

(*weekly has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "weekly" 0 "n")))))

;;; ----------

(*WEST has 
  (instance-of (Time-Zone-Constant))
  (name ("WEST")))

;;; ----------

(*wet has 
  (instance-of (Wetness-Constant)))

;;; ----------

(*WET has 
  (instance-of (Time-Zone-Constant))
  (name ("WET")))

;;; ----------

(*wheat has 
  (instance-of (Color-Constant)))

;;; ----------

(*white has 
  (instance-of (Color-Constant)))

;;; ----------

(*whiteSmoke has 
  (instance-of (Color-Constant)))

;;; ----------

(*wide has 
  (instance-of (Width-Constant
                Primary-Constant)))

;;; ----------

(*yard has 
  (instance-of (UoM-Length))
  (wn20-synset ((:set (:triple "yard" 0 "n") (:triple "yards" 0 "n")))))

;;; ----------

(*year has 
  (instance-of (UoM-Time
                UoM-Duration))
  (wn20-synset ((((:set (:triple "year" 0 "n") (:triple "years" 0 "n"))) && ((:set (:triple "year" 0 "n") (:triple "year" 0 "n")))))))

;;; ----------

(*yearly has 
  (instance-of (UoM-Frequency))
  (wn20-synset ((:set (:triple "yearly" 0 "n")))))

;;; ----------

(*yellow has 
  (instance-of (Color-Constant)))

;;; ----------

(*yellowGreen has 
  (instance-of (Color-Constant)))

;;; ----------

(*yen has 
  (instance-of (UoM-Worth))
  (wn20-synset ((:set (:triple "yen" 0 "n")))))

;;; ----------

(*yes-no-question has 
  (instance-of (Viewpoint-Query-Type)))

;;; ----------

(*young has 
  (instance-of (Age-Constant)))

;;; ----------

(*young-old-scale has 
  (instance-of (Age-Scale))
  (element-type (Age-Constant))
  (element ((:seq *young *adolescent *juvenile *teenage *middle-aged *old))))

;;; ----------

(_Partition1 has 
  (instance-of (Partition))
  (members (Event
            Entity)))

;;; ----------

(_Partition2 has 
  (instance-of (Partition))
  (members (Animal
            Plant)))

;;; ----------

(_Partition3 has 
  (instance-of (Partition))
  (members (Nonrenewable-Resource
            Renewable-Resource)))

;;; ----------

(_Partition4 has 
  (instance-of (Partition))
  (members (Tangible-Entity
            Place)))

;;; ----------

(_Partition5 has 
  (instance-of (Partition))
  (members (Substance
            Chemical-Entity)))

;;; ----------

(Absorb has 
  (superclasses (Take-In))
  (required-slot (object
                  destination
                  agent))
  (primary-slot (origin
                 path))
  (cmap-correspondence ((:seq agent "the absorb'er")
                        (:seq object "the Fluid being absorbed")
                        (:seq destination "final location")
                        (:seq origin "original location")
                        (:seq path "the portal")))
  (test-case ('((*Plant has (instance-of (Living-Entity)) (location ((a Place)))) (*Water has (instance-of (Fluid-Substance))) (*Absorb has (instance-of (Absorb)) (agent (*Plant)) (object (*Water))) (do-and-next *Absorb) (the text-gen of (thelast Absorb)) ((the is-inside of *Water) includes *Plant) ((the content of (the Container plays of *Plant)) includes *Water) ((the encloses of (the location of *Plant)) includes *Water))))
  (wn16-synset ((:set (:triple "absorb" 1 "v"))))
  (wn20-synset ((:set (:triple "absorb" 1 "v")))))

(every Absorb has 
  (object ((a Fluid-Substance)))
  (text-active-verbseq-sg ("absorbs"))
  (text-active-verbseq-pl ("absorb"))
  (text-passive-verbseq-sg ("gets absorbed"))
  (text-passive-verbseq-pl ("get absorbed"))
  (text-nominalization ("absorption")))

;;; ----------

(abuts has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (abuts))
  (text-slot (text-abuts))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(acceleration has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Acceleration-Value))
  (scale-class (Acceleration-Scale))
  (scalar-constant-class (Acceleration-Constant))
  (cardinal-unit-class (UoM-Acceleration))
  (inverse (acceleration-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "acceleration" 1 "n") (:triple "acceleration" 2 "n") (:triple "quickening" 3 "n") (:triple "speedup" 1 "n") (:triple "acceleration" 3 "n") (:triple "accelerating" 0 "n")))))

;;; ----------

(Acceleration-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (acceleration)))

;;; ----------

(acceleration-of has 
  (inverse (acceleration))
  (range (Event))
  (domain (Acceleration-Value))
  (instance-of (EventProperty)))

;;; ----------

(Acceleration-Scale has 
  (superclasses (Scale))
  (scale-class-of (acceleration)))

;;; ----------

(Acceleration-Value has 
  (superclasses (Property-Value))
  (doc-file ("acceleration"))
  (instances (*Gravity))
  (range-of (acceleration))
  (domain-of (acceleration-of)))

(every Acceleration-Value has 
  (primary-slot (acceleration)))

;;; ----------

(Action has 
  (superclasses (Event))
  (primary-slot (agent
                 object
                 instrument))
  (secondary-slot (subevent))
  (cmap-correspondence ((:seq object "the thing Acted upon")
                        (:seq agent "the Actor")
                        (:seq instrument "the thing used to Act")))
  (wn16-synset ((:set (:triple "act" 1 "v") (:triple "do" 1 "v") (:triple "do" 2 "v") (:triple "execute" 6 "v") (:triple "make" 1 "v") (:triple "move" 8 "v") (:triple "perform" 1 "v"))))
  (wn20-synset ((:set (:triple "act" 1 "v") (:triple "do" 1 "v") (:triple "do" 2 "v") (:triple "execute" 6 "v") (:triple "make" 1 "v") (:triple "move" 8 "v") (:triple "perform" 1 "v"))))
  (subclasses (Transfer
               Take-Control
               Store
               Specify
               Send
               Select
               Replace
               Repair
               Remove
               Release-Resource
               Place-Order
               Perceive
               Penetrate
               Orient
               Move
               Move-Together
               Move-Apart
               Make-Inaccessible
               Make-Contact
               Make-Accessible
               Interpret
               Increase
               Impair
               Forget
               Express
               Edit
               Disperse
               Detach
               Decrease
               Create
               Convey
               Communicate
               Come-Together
               Break-Contact
               Authorize
               Attach
               Allocate-Resource
               Add))
  (domain-of (defeats))
  (range-of (defeated-by)))

(every Action has 
  (object ((must-be-a Thing)))
  (instrument ((must-be-a Entity)))
  (soft-pcs-list ((if ((has-value (the agent of Self)) and (has-value (the instrument of Self))) then (forall (the instrument of Self) (:set (:triple It object-of (a Be-Controlled with (agent ((the agent of Self))))) (:triple It object-of (mustnt-be-a Be-Inaccessible with (base ((the agent of Self))))))))
                  (if (has-value (the instrument of Self)) then (forall (the instrument of Self) (:triple It object-of (mustnt-be-a Be-Inaccessible))))
                  (if ((has-value (the agent of Self)) and (has-value (the object of Self))) then (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Inaccessible with (base ((the agent of Self)))))))
                  (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Inaccessible)))))
  (preparatory-event ((:default (if ((the agent of Self) /= (the object of Self)) then (a Move with (object ((the agent of Self))) (destination ((the object of Self))))) (a Move with (object ((the instrument of Self))) (destination ((the object of Self)))))))
  (text-nominalization ("action")))

;;; ----------

(actions has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (range (Event))
  (inverse (actions-of))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(actions-of has 
  (inverse (actions))
  (range (Event))
  (domain (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Activate has 
  (superclasses (Make-Accessible))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "The thing activated")
                        (:seq agent "The activator")
                        (:seq instrument "instrument")))
  (wn16-synset ((:set (:triple "activate" 2 "v") (:triple "enable" 1 "v") (:triple "flip" 2 "v") (:triple "gear_up" 1 "v") (:triple "prepare" 1 "v") (:triple "reactivate" 1 "v") (:triple "ready" 2 "v") (:triple "set" 7 "v") (:triple "set" 8 "v") (:triple "set_up" 15 "v") (:triple "switch" 5 "v") (:triple "throw" 6 "v"))))
  (wn20-synset ((:set (:triple "activate" 2 "v") (:triple "enable" 1 "v") (:triple "reactivate" 1 "v") (:triple "set" 8 "v"))))
  (caused-by-class-of (Be-Activated)))

(every Activate has 
  (preparatory-event ((:default (a Deactivate with (object ((the object of Self)))))))
  (resulting-state ((a Be-Activated)))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Activated) [Activate-pcs-1]))))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Activate-add-1])))
  (text-active-verbseq-sg ("activates"))
  (text-active-verbseq-pl ("activate"))
  (text-passive-verbseq-sg ("gets activated"))
  (text-passive-verbseq-pl ("get activated"))
  (text-argslots ((:seq base instrument path result)))
  (text-nominalization ("activation")))

;;; ----------

(Activity has 
  (superclasses (Event))
  (description ("a collection of related events, often to achieve a goal or produce a result, but less structured than a step-by-step process"))
  (test-case ('((*BeNeatAndClean has (instance-of (State))) (*MyHouse has (instance-of (Building))) (*Dusting has (instance-of (Action))) (*Vacuuming has (instance-of (Action))) (*Washing has (instance-of (Action))) (*Housekeeping has (instance-of (Activity)) (objective (*BeNeatAndClean)) (subevent (*Dusting *Vacuuming *Washing)) (add-list ((:triple *MyHouse object-of (the objective of Activity))))) (do-and-next (*Housekeeping)))))
  (wn20-synset ((:set (:triple "activity" 1 "n") (:triple "act" 2 "n") (:triple "human_action" 1 "n") (:triple "human_activity" 1 "n"))))
  (subclasses (Training
               Shipping
               Service
               Selling
               Research
               Reporting
               Prosecution
               Planning
               Operations
               Meal
               Maintenance
               Learning
               Interaction
               Innovation
               Healing
               Financing
               Distribution
               Discovery
               Development
               Destruction
               Defense
               Construction
               Analysis)))

(every Activity has 
  (text-nominalization ("activity")))

;;; ----------

(Add has 
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq agent "the adder")
                        (:seq object "the part added.")
                        (:seq base "the thing to which the part is being added")
                        (:seq instrument "instrument of the add")))
  (wn16-synset ((:set (:triple "add" 1 "v") (:triple "add" 6 "v") (:triple "include" 1 "v") (:triple "include" 3 "v"))))
  (wn20-synset ((:set (:triple "add" 1 "v") (:triple "add" 6 "v") (:triple "include" 1 "v") (:triple "include" 3 "v")))))

(every Add has 
  (preparatory-event ((:default (a Move with (object ((the object of Self))) (destination ((the base of Self))) (agent ((the agent of Self)))))))
  (object ((a Tangible-Entity)))
  (base ((a Tangible-Entity)))
  (add-list ((forall (the object of Self) (:triple It is-part-of (the base of Self) [Add-add-1]))))
  (text-active-verbseq-sg ("adds"))
  (text-active-verbseq-pl ("add"))
  (text-passive-verbseq-sg ("gets added"))
  (text-passive-verbseq-pl ("get added"))
  (text-nominalization ("addition")))

;;; ----------

(Administrative-District has 
  (superclasses (Territory))
  (description ("a Territory delineated on administrative grounds"))
  (wn20-synset ((:set (:triple "administrative_district" 1 "n") (:triple "administrative_division" 1 "n") (:triple "territorial_division" 1 "n"))))
  (subclasses (Province
               Political-State
               County
               Country
               City)))

;;; ----------

(Admit has 
  (superclasses (Unobstruct))
  (required-slot (object
                  base))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "object")
                        (:seq object "the enclosure")
                        (:seq agent "admitter")))
  (test-case ('((*child has (instance-of (Physical-Object)) (is-outside (*cinema))) (*cinema has (instance-of (Physical-Object))) (a Shut-Out with (object (*child)) (base (*cinema))) (do-and-next (thelast Shut-Out)) (the text-gen of (thelast Shut-Out)) (has-value (the Be-Shut-Out object-of of *child)) (a Move-Into with (object (*child)) (base (*cinema))) (not (try-do (thelast Move-Into))) (the text-gen of (thelast Move-Into)) (a Admit with (object (*child)) (base (*cinema))) (do-and-next (thelast Admit)) (the text-gen of (thelast Admit)) (not (has-value (the Be-Shut-Out object-of of *child))) (do-and-next (thelast Move-Into)) (the text-gen of (thelast Move-Into)))))
  (wn16-synset ((:set (:triple "admit" 2 "v") (:triple "allow_in" 1 "v") (:triple "let_in" 2 "v"))))
  (wn20-synset ((:set (:triple "admit" 2 "v") (:triple "allow_in" 1 "v") (:triple "let_in" 2 "v"))))
  (defeated-by-class-of (Be-Shut-Out)))

(every Admit has 
  (base ((a Tangible-Entity with (plays ((a Container))))))
  (object ((a Tangible-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the base of It) = (the base of Self)) and ((the classes of It) = Be-Shut-Out)))))
  (ncs-list ((forall (the object of Self) (:triple It is-inside (the base of Self) [Admit-ncs-1]))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Shut-Out with (base ((the base of Self)))) [Admit-pcs-1]))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Admit-del-1]) (:triple It base (the base of Self) [Admit-del-2])))))
  (text-active-verbseq-sg ("admits"))
  (text-active-verbseq-pl ("admit"))
  (text-passive-verbseq-sg ("gets admitted"))
  (text-passive-verbseq-pl ("get admitted"))
  (preparatory-event ((:default (a Shut-Out with (base ((the base of Self))) (object ((the object of Self)))))))
  (text-nominalization ("admission")))

;;; ----------

(age has 
  (instance-of (EntityProperty))
  (domain (Entity))
  (range (Duration-Value))
  (scale-class (Age-Scale))
  (scalar-constant-class (Age-Constant))
  (cardinal-unit-class (UoM-Duration))
  (fluent-status (*Inertial-Fluent))
  (inverse (age-of))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "age" 1 "n")))))

;;; ----------

(Age-Constant has 
  (superclasses (Constant))
  (instances (*young
              *juvenile
              *teenage
              *adolescent
              *middle-aged
              *old
              *elderly))
  (scalar-constant-class-of (age))
  (element-type-of (*young-old-scale)))

;;; ----------

(age-of has 
  (inverse (age))
  (range (Entity))
  (domain (Duration-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Age-Scale has 
  (superclasses (Scale))
  (scale-class-of (age))
  (instances (*young-old-scale)))

;;; ----------

(agent has 
  (required-slot-of (Absorb
                     Be-Held
                     Carry
                     Command
                     Deceive
                     Donate
                     Eat
                     Enter
                     Exit
                     Express
                     Feed
                     Follow
                     Forget
                     Give
                     Go-Through
                     Go-To
                     Hold
                     Inquire
                     Interpret
                     Invade
                     Learn
                     Leave
                     Let-Fall
                     Let-Go-Of
                     Lie
                     Locomotion
                     Penetrate
                     Relinquish
                     Send
                     Supply
                     Take-Control
                     Take-In
                     Teach
                     Trespass))
  (primary-slot-of (Action
                    Activate
                    Add
                    Admit
                    Allocate-Resource
                    Attach
                    Block
                    Breach
                    Break-Contact
                    Break
                    Close
                    Collide
                    Communicate
                    Conceal
                    Confine
                    Convey
                    Copy
                    Create
                    Damage
                    Deactivate
                    Deliver
                    Detach
                    Duplicate
                    Emit
                    Expose
                    Harm
                    Impair
                    Lose
                    Make-Accessible
                    Make-Contact
                    Make-Inaccessible
                    Move-Apart
                    Move-Into
                    Move-Out-Of
                    Move-Through
                    Move-Together
                    Move
                    Obstruct
                    Open
                    Perceive
                    Produce
                    Receive
                    Recognize
                    Release-Resource
                    Release
                    Remove
                    Restrain
                    Ruin
                    Shut-Out
                    Slide
                    Store
                    Take-Apart
                    Take-In
                    Transfer
                    Transmit
                    Unblock
                    Unobstruct
                    Unrestrain
                    Withdraw))
  (instance-of (Participant-Relation
                Agentive-Relation))
  (domain (Event))
  (range (Entity))
  (inverse (agent-of))
  (fluent-status (*Inertial-Fluent))
  (text-slot (text-agent))
  (cardinality (N-to-N))
  (text-gloss ("is done by"))
  (wn20-synset ((:set (:triple "agentive_role" 1 "n") (:triple "agent" 6 "n") (:triple "actor" 2 "n") (:triple "doer" 1 "n") (:triple "worker" 4 "n")))))

;;; ----------

(agent-of has 
  (inverse (agent))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation
                Agentive-Relation))
  (text-gloss ("does"))
  (text-slot (text-agent-of))
  (combine-values-by-appending (t)))

;;; ----------

(Agent-Role has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "agent" 1 "n") (:triple "agent" 3 "n") (:triple "causal_agency" 1 "n") (:triple "causal_agent" 1 "n") (:triple "cause" 4 "n"))))
  (wn20-synset ((:set (:triple "agent" 1 "n") (:triple "agent" 2 "n") (:triple "causal_agency" 1 "n") (:triple "causal_agent" 1 "n") (:triple "cause" 4 "n"))))
  (subclasses (Participant)))

(every Agent-Role has 
  (in-event ((must-be-a Event)))
  (played-by ((a Entity with (agent-of ((the in-event of Self)))))))

;;; ----------

(Aggregate has 
  (superclasses (Entity))
  (description ("top level component for collections"))
  (test-case ('((E has (superclasses (Entity))) (F has (superclasses (Entity))) (*a1 has (instance-of (Aggregate)) (element-type (E F)) (element ((a E) (a E) (a F))) (number-of-elements (10))) (the element of *a1) (the number-of-elements of *a1) (*a2 has (instance-of (Aggregate)) (element-type (E F)) (element ((a E) (a E) (a F)))) ((the number-of-elements of *a2) = 3))))
  (wn20-synset ((:set (:triple "whole" 2 "n") (:triple "whole_thing" 1 "n") (:triple "unit" 6 "n") (:triple "aggregate" 1 "n") (:triple "congeries" 1 "n") (:triple "conglomeration" 2 "n") (:triple "group" 1 "n") (:triple "grouping" 1 "n"))))
  (subclasses (View
               Scale
               Property-Class-Order
               Organization
               Ensemble
               Community))
  (domain-of (element
              first-element
              number-of-elements))
  (range-of (element-of
             first-element-of
             number-of-elements-of)))

(every Aggregate has 
  (number-of-elements ((a Number)
                       (if ((has-value (the element of Self)) and (not (has-value (the number-of-elements of Self)))) then ((the number of (the element of Self))))
                       (constraint (if (has-value (the element of Self)) then (TheValue >= (the number of (the element of Self))) else (t))))))

;;; ----------

(Air has 
  (superclasses (Gas-Substance))
  (wn20-synset ((:set (:triple "air" 1 "n")))))

;;; ----------

(all-subevents has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (range (Event))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(all-subevents-of has 
  (range (Event))
  (domain (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Allocate-Resource has 
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 base))
  (cmap-correspondence ((:seq object "the resource made unavailable")
                        (:seq agent "the entity that makes the resource unavailable")
                        (:seq base "what the resource is made unavailable to")))
  (test-case ('((*Mojo has (instance-of (Physical-Object))) (a Release-Resource with (object (*Mojo))) (try-do-and-next (thelast Release-Resource)) (the text-gen of (thelast Release-Resource)) (has-value (the Be-Available object-of of *Mojo)) (a Allocate-Resource with (object (*Mojo))) (try-do-and-next (thelast Allocate-Resource)) (the text-gen of (thelast Allocate-Resource)) (not (has-value (the Be-Available object-of of *Mojo))))))
  (wn20-synset ((:set (:triple "allocate" 1 "v") (:triple "apportion" 1 "v"))))
  (caused-by-class-of (Be-Available))
  (defeated-by-class-of (Be-Unavailable)))

(every Allocate-Resource has 
  (object ((a Resource)))
  (agent ((must-be-a Entity)))
  (base ((must-be-a Thing)))
  (soft-pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Available)))))
  (defeats ((if (has-value (the base of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Available) and ((the base of It) = (the base of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Available)))))
  (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Allocate-Resource-del-1]))))
  (text-active-verbseq-sg ("allocates"))
  (text-active-verbseq-pl ("allocate"))
  (text-passive-verbseq-sg ("gets allocated"))
  (text-passive-verbseq-pl ("get allocated"))
  (text-argslots ((:seq base instrument)))
  (preparatory-event ((:default (a Release-Resource with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("allocation")))

;;; ----------

(Analysis has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "analysis" 1 "n") (:triple "analysis" 2 "n") (:triple "investigation" 2 "n") (:triple "investigation" 1 "n") (:triple "reasoning" 1 "n") (:triple "logical_thinking" 1 "n") (:triple "abstract_thought" 1 "n")))))

(every Analysis has 
  (text-nominalization ("analysis")))

;;; ----------

(angle has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Angle-Value))
  (scalar-constant-class (Angle-Constant))
  (cardinal-unit-class (UoM-Angle))
  (inverse (angle-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "angle" 1 "n")))))

;;; ----------

(Angle-Constant has 
  (superclasses (Constant))
  (instances (*acute
              *obtuse
              *right
              *reflex
              *straight))
  (scalar-constant-class-of (angle)))

;;; ----------

(angle-of has 
  (inverse (angle))
  (range (Spatial-Entity))
  (domain (Angle-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Angle-Value has 
  (superclasses (Property-Value))
  (doc-file ("angle"))
  (range-of (angle
             direction
             latitude
             longitude
             orientation))
  (domain-of (angle-of
              direction-of
              latitude-of
              longitude-of
              orientation-of)))

(every Angle-Value has 
  (primary-slot (angle)))

;;; ----------

(animacy has 
  (instance-of (EntityProperty))
  (domain (Entity))
  (range (Animacy-Value))
  (categorical-constant-class (Animacy-Constant))
  (inverse (animacy-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "animateness" 1 "n") (:triple "aliveness" 2 "n") (:triple "liveness" 1 "n")))))

;;; ----------

(Animacy-Constant has 
  (superclasses (Constant))
  (instances (*animate
              *not-animate))
  (categorical-constant-class-of (animacy)))

;;; ----------

(animacy-of has 
  (inverse (animacy))
  (range (Entity))
  (domain (Animacy-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Animacy-Value has 
  (superclasses (Property-Value))
  (range-of (animacy))
  (domain-of (animacy-of)))

;;; ----------

(Animal has 
  (superclasses (Organism))
  (description ("a living entity capable of locomotion"))
  (test-case ('((*ShinerTheCat has (instance-of (Animal))) ((the instance-of of (the in-event of (the capability of *ShinerTheCat))) = Locomotion))))
  (wn20-synset ((:set (:triple "animal" 1 "n") (:triple "animate_being" 1 "n") (:triple "beast" 1 "n") (:triple "brute" 2 "n") (:triple "creature" 1 "n") (:triple "fauna" 2 "n"))))
  (member-of (_Partition2))
  (subclasses (Person)))

(every Animal has 
  (capability ((a Agent-Role with (in-event ((a Locomotion)))))))

;;; ----------

(Architectural-Structure has 
  (superclasses (Artifact))
  (description ("a stable, supported artifact"))
  (wn20-synset ((:set (:triple "structure" 1 "n") (:triple "construction" 3 "n"))))
  (subclasses (Wall
               Room
               Roof
               Platform
               ParkingLot
               Ceiling
               Building
               Building-Complex
               Bridge)))

(every Architectural-Structure has 
  (object-of ((((a Be-Supported)) && ((a Be-Stable))))))

;;; ----------

(area has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Area-Value))
  (scale-class (Area-Scale))
  (scalar-constant-class (Area-Constant))
  (cardinal-unit-class (UoM-Area))
  (inverse (area-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "area" 6 "n") (:triple "expanse" 2 "n") (:triple "surface area" 1 "n")))))

;;; ----------

(Area-Constant has 
  (superclasses (Constant))
  (instances (*tiny
              *huge))
  (scalar-constant-class-of (area))
  (element-type-of (*tiny-huge-scale)))

;;; ----------

(area-of has 
  (inverse (area))
  (range (Spatial-Entity))
  (domain (Area-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Area-Scale has 
  (superclasses (Scale))
  (scale-class-of (area))
  (instances (*tiny-huge-scale)))

;;; ----------

(Area-Value has 
  (superclasses (Property-Value))
  (test-case ('((Carpet has (superclasses (Physical-Object))) (*LivingroomCarpet has (instance-of (Carpet)) (area ((a Area-Value)))) (*BedroomCarpet has (instance-of (Carpet)) (area ((a Area-Value with (value ((:pair *tiny Carpet) (:pair 20 *square-meter))) (less-than ((the area of *LivingroomCarpet))))))) (the value of (the area of *BedroomCarpet)) ((the less-than of (the area of *BedroomCarpet)) includes (the area of *LivingroomCarpet)) ((the greater-than of (the area of *LivingroomCarpet)) includes (the area of *BedroomCarpet)))))
  (range-of (area))
  (domain-of (area-of)))

;;; ----------

(Artifact has 
  (subclasses (Physical-Document
               Furnishing
               Device
               Architectural-Structure))
  (superclasses (Inanimate-Object))
  (description ("A man-made object"))
  (wn20-synset ((:set (:triple "artifact" 1 "n")))))

(every Artifact has 
  (result-of ((a Create))))

;;; ----------

(Assurance has 
  (superclasses (Message))
  (description ("a message expressing a commitment to do (or not do) something"))
  (wn20-synset ((:set (:triple "commitment" 4 "n") (:triple "dedication" 3 "n")))))

;;; ----------

(Attach has 
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent))
  (cmap-correspondence ((:seq base "the object being attached to")
                        (:seq object "the object(s) being attached")))
  (test-case ('((*bumper has (instance-of (Physical-Object))) (*sticker has (instance-of (Physical-Object))) (a Attach with (object (*sticker)) (base (*bumper))) (do-and-next (thelast Attach)) (the text-gen of (thelast Attach)) (forall (the resulting-state of (thelast Attach)) (the text-gen of It)) (oneof (the Be-Attached-To object-of of *sticker) where ((the object of It) includes *bumper)))))
  (wn16-synset ((:set (:triple "attach" 1 "v") (:triple "attach" 3 "v") (:triple "connect" 1 "v") (:triple "link" 2 "v") (:triple "tie" 4 "v"))))
  (wn20-synset ((:set (:triple "attach" 1 "v") (:triple "attach" 3 "v") (:triple "connect" 1 "v") (:triple "link" 2 "v") (:triple "tie" 4 "v"))))
  (caused-by-class-of (Be-Attached-To)))

(every Attach has 
  (object ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
  (base ((exactly 1 Tangible-Entity)
         (a Tangible-Entity)))
  (soft-pcs-list ((:triple (the base of Self) object-of (mustnt-be-a Be-Inaccessible))))
  (resulting-state ((a Be-Attached-To)))
  (add-list ((:set (:triple (the resulting-state of Self) object (the object of Self) [Attach-add-1]) (:triple (the resulting-state of Self) object (the base of Self) [Attach-add-2]))))
  (text-active-verbseq-sg ("attaches"))
  (text-active-verbseq-pl ("attach"))
  (text-passive-verbseq-sg ("gets attached"))
  (text-passive-verbseq-pl ("get attached"))
  (preparatory-event ((:default (a Make-Contact with (object ((the object of Self))) (base ((the base of Self)))) (a Detach with (object ((the object of Self))) (base ((the base of Self)))))))
  (text-nominalization ("attachment")))

;;; ----------

(Authorize has 
  (superclasses (Action))
  (wn20-synset ((:set (:triple "authorize" 1 "v") (:triple "authorise" 2 "v") (:triple "pass" 24 "v") (:triple "clear" 4 "v") (:triple "empower" 1 "v") (:triple "authorise" 1 "v") (:triple "authorize" 2 "v")))))

(every Authorize has 
  (agent ((a Entity)))
  (is-goal-of ((a Entity)))
  (enables ((a Authorized)))
  (text-nominalization ("authorization")))

;;; ----------

(Authorized has 
  (superclasses (Cliche))
  (wn20-synset ((:set (:triple "authorized" 1 "a") (:triple "authorised" 1 "a")))))

(every Authorized has-definition 
  (instance-of (Event))
  (agent ((a Entity)))
  (enabled-by ((a Authorize with (is-goal-of ((a Entity)))))))

(every Authorized has 
  (agent ((a Entity)))
  (enabled-by ((a Authorize with (is-goal-of ((a Entity))))))
  (text-definition-sentence (()))
  (text-definition-sentence-of (()))
  (text-nominalization (()))
  (text-nominalization-of (()))
  (text-content (()))
  (text-content-of (()))
  (text-existential-there (()))
  (text-existential-there-of (()))
  (text-toward (()))
  (text-toward-of (()))
  (text-subj (()))
  (text-subj-of (()))
  (text-subj-phrase (()))
  (text-subj-phrase-of (()))
  (text-slot (()))
  (text-slot-of (()))
  (text-sentence (()))
  (text-sentence-of (()))
  (text-premodslots (()))
  (text-premodslots-of (()))
  (text-premods (()))
  (text-premods-of (()))
  (text-postmodslots (()))
  (text-postmodslots-of (()))
  (text-postmods (()))
  (text-postmods-of (()))
  (text-phrase (()))
  (text-phrase-of (()))
  (text-passive-verbseq (()))
  (text-passive-verbseq-of (()))
  (text-passive-verbseq-sg (()))
  (text-passive-verbseq-sg-of (()))
  (text-passive-verbseq-pl (()))
  (text-passive-verbseq-pl-of (()))
  (text-passive-sentence (()))
  (text-passive-sentence-of (()))
  (text-passive-phrase (()))
  (text-passive-phrase-of (()))
  (text-particle (()))
  (text-particle-of (()))
  (text-number (()))
  (text-number-of (()))
  (text-nom-sentence (()))
  (text-nom-sentence-of (()))
  (text-indef-head (()))
  (text-indef-head-of (()))
  (text-indef-determiner (()))
  (text-indef-determiner-of (()))
  (text-head (()))
  (text-head-of (()))
  (text-gen (()))
  (text-gen-of (()))
  (text-dobj (()))
  (text-dobj-of (()))
  (text-dobj-phrase (()))
  (text-dobj-phrase-of (()))
  (text-description (()))
  (text-description-of (()))
  (text-def-head (()))
  (text-def-head-of (()))
  (text-def-determiner (()))
  (text-def-determiner-of (()))
  (text-base-phrase (()))
  (text-base-phrase-of (()))
  (text-arguments (()))
  (text-arguments-of (()))
  (text-argslots (()))
  (text-argslots-of (()))
  (text-active-verbseq (()))
  (text-active-verbseq-of (()))
  (text-active-verbseq-sg (()))
  (text-active-verbseq-sg-of (()))
  (text-active-verbseq-pl (()))
  (text-active-verbseq-pl-of (()))
  (text-active-sentence (()))
  (text-active-sentence-of (()))
  (text-active-phrase (()))
  (text-active-phrase-of (()))
  (text-subevent-of (()))
  (text-subevent (()))
  (slot-gloss (()))
  (slot-gloss-of (()))
  (text-site (()))
  (text-site-of (()))
  (text-resulting-state (()))
  (text-resulting-state-of (()))
  (text-result (()))
  (text-result-of (()))
  (text-recipient (()))
  (text-recipient-of (()))
  (text-raw-material (()))
  (text-raw-material-of (()))
  (text-is-possessed-by (()))
  (text-possesses (()))
  (text-path (()))
  (text-path-of (()))
  (text-origin (()))
  (text-origin-of (()))
  (text-object (()))
  (text-object-of (()))
  (text-material (()))
  (text-material-of (()))
  (text-is-west-of (()))
  (text-is-east-of (()))
  (text-is-southwest-of (()))
  (text-is-northeast-of (()))
  (text-is-over (()))
  (text-is-under (()))
  (text-is-outside (()))
  (text-is-outside-of (()))
  (text-is-oriented-toward (()))
  (text-is-oriented-toward-of (()))
  (text-is-opposite (()))
  (text-is-on (()))
  (text-has-on-it (()))
  (text-is-northwest-of (()))
  (text-is-southeast-of (()))
  (text-is-north-of (()))
  (text-is-south-of (()))
  (text-is-near (()))
  (text-is-near-of (()))
  (text-is-inside (()))
  (text-encloses (()))
  (text-is-facing (()))
  (text-is-faced-by (()))
  (text-is-between (()))
  (text-is-between-of (()))
  (text-is-beside (()))
  (text-is-behind (()))
  (text-is-in-front-of (()))
  (text-is-at (()))
  (text-is-at-of (()))
  (text-is-along (()))
  (text-is-along-of (()))
  (text-is-above (()))
  (text-is-below (()))
  (text-instrument (()))
  (text-instrument-of (()))
  (text-is-part-of (()))
  (text-has-part (()))
  (text-donor (()))
  (text-donor-of (()))
  (text-destination (()))
  (text-destination-of (()))
  (text-causes (()))
  (text-caused-by (()))
  (text-beneficiary (()))
  (text-beneficiary-of (()))
  (text-base (()))
  (text-base-of (()))
  (text-away-from (()))
  (text-away-from-of (()))
  (text-agent (()))
  (text-agent-of (()))
  (text-abuts (()))
  (text-abuts-of (())))

;;; ----------

(away-from has 
  (secondary-slot-of (Move))
  (instance-of (Spatial-Relation))
  (domain (Event))
  (range (Spatial-Entity))
  (inverse (away-from-of))
  (text-slot (text-away-from))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(away-from-of has 
  (inverse (away-from))
  (range (Event))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is away from")))

;;; ----------

(Barrier has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "barrier" 1 "n") (:triple "barrier" 3 "n") (:triple "obstruction" 1 "n") (:triple "impediment" 2 "n") (:triple "impedimenta" 1 "n"))))
  (wn20-synset ((:set (:triple "barrier" 1 "n") (:triple "barrier" 3 "n") (:triple "obstruction" 1 "n") (:triple "impediment" 2 "n") (:triple "impedimenta" 1 "n"))))
  (subclasses (Portal-Covering
               Cover
               Container)))

(every Barrier has 
  (in-event ((a Block with (object ((the location of Self))))))
  (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self))) (is-between ((a Spatial-Entity) (a Spatial-Entity with (abuts ((excluded-values (the first of (the is-between of (the played-by of Self)))))))))))))

;;; ----------

(base has 
  (required-slot-of (Add
                     Admit
                     Attach
                     Be-Confined
                     Be-Shut-Out
                     Be-Stored
                     Break-Contact
                     Confine
                     Detach
                     Enter
                     Load
                     Make-Contact
                     Move-Into
                     Move-Out-Of
                     Move-Through
                     Release
                     Remove
                     Replace
                     Shut-Out
                     Store
                     Withdraw))
  (primary-slot-of (Allocate-Resource
                    Be-Accessible
                    Be-Available
                    Be-Concealed
                    Be-Inaccessible
                    Be-Stable
                    Be-Unavailable
                    Collide
                    Conceal
                    Expose
                    Make-Accessible
                    Make-Inaccessible
                    Release-Resource))
  (instance-of (Participant-Relation))
  (range (Thing))
  (inverse (base-of))
  (text-slot (text-base))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (domain (Event))
  (text-gloss ("has base")))

;;; ----------

(base-of has 
  (inverse (base))
  (domain (Thing))
  (instance-of (Participant-Relation))
  (range (Event))
  (combine-values-by-appending (t))
  (text-gloss ("is the base of")))

;;; ----------

(Bathroom has 
  (superclasses (Room))
  (wn20-synset ((:set (:triple "bathroom" 1 "n") (:triple "bath" 6 "n")))))

;;; ----------

(Be-Accessible has 
  (superclasses (State))
  (required-slot (object))
  (primary-slot (base))
  (caused-by-class (Make-Accessible))
  (defeated-by-class (Make-Inaccessible))
  (cmap-correspondence ((:seq object "thing accessible")
                        (:seq base "the thing the object is accessible to")))
  (test-case ('((*Peak has (instance-of (Physical-Object))) (*Climber has (instance-of (Living-Entity))) (a Make-Inaccessible with (object (*Peak)) (base (*Climber))) (try-do-and-next (thelast Make-Inaccessible)) (the text-gen of (thelast Make-Inaccessible)) (has-value (the Be-Inaccessible object-of of *Peak)) (a Make-Accessible with (object (*Peak)) (base (*Climber))) (try-do-and-next (thelast Make-Accessible)) (the text-gen of (thelast Make-Accessible)) (not (has-value (the Be-Inaccessible object-of of *Peak))))))
  (subclasses (Be-Unblocked
               Be-Activated)))

(every Be-Accessible has 
  (object ((a Entity)))
  (base ((must-be-a Thing)))
  (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Make-Accessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Accessible with (object ((the object of Self)))))))
  (defeated-by ((if (has-value (the base of Self)) then (must-be-a Make-Inaccessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Inaccessible with (object ((the object of Self)))))))
  (text-particle ("accessible")))

;;; ----------

(Be-Activated has 
  (superclasses (Be-Accessible))
  (required-slot (object))
  (caused-by-class (Activate))
  (defeated-by-class (Deactivate))
  (cmap-correspondence ((:seq object "the thing that's active")))
  (wn16-synset ((:set (:triple "activated" 3 "a") (:triple "active" 13 "a") (:triple "on" 1 "a"))))
  (wn20-synset ((:set (:triple "activated" 3 "a") (:triple "active" 12 "a") (:triple "on" 1 "a")))))

(every Be-Activated has 
  (object ((a Entity)))
  (text-particle ("activated")))

;;; ----------

(Be-Attached-To has 
  (superclasses (Be-Touching))
  (primary-slot (instrument))
  (caused-by-class (Attach))
  (defeated-by-class (Detach))
  (cmap-correspondence ((:seq object "the attached objects")
                        (:seq instrument "the connector")))
  (wn20-synset ((:set (:triple "attached" 1 "a") (:triple "attach" 2 "v")))))

(every Be-Attached-To has 
  (object ((exactly 2 Tangible-Entity)))
  (text-particle ("attached")))

;;; ----------

(Be-Available has 
  (superclasses (State))
  (required-slot (object))
  (primary-slot (base))
  (caused-by-class (Allocate-Resource))
  (defeated-by-class (Release-Resource))
  (cmap-correspondence ((:seq object "Resource available")
                        (:seq base "the thing the object is available to")))
  (test-case ('((*Mojo has (instance-of (Resource))) (*AustinPowers has (instance-of (Living-Entity))) (a Release-Resource with (object (*Mojo)) (base (*AustinPowers))) (try-do-and-next (thelast Release-Resource)) (the text-gen of (thelast Release-Resource)) (has-value (the Be-Available object-of of *Mojo)) (a Allocate-Resource with (object (*Mojo)) (base (*AustinPowers))) (try-do-and-next (thelast Allocate-Resource)) (the text-gen of (thelast Allocate-Resource)) (not (has-value (the Be-Available object-of of *Mojo)))))))

(every Be-Available has 
  (object ((a Resource)))
  (base ((must-be-a Thing)))
  (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Allocate-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Allocate-Resource with (object ((the object of Self)))))))
  (defeated-by ((if (has-value (the base of Self)) then (must-be-a Release-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Release-Resource with (object ((the object of Self)))))))
  (text-particle ("available")))

;;; ----------

(Be-Blocked has 
  (superclasses (Be-Inaccessible))
  (required-slot (object))
  (primary-slot (instrument))
  (caused-by-class (Block))
  (defeated-by-class (Unblock))
  (cmap-correspondence ((:seq object "the object blocked")
                        (:seq instrument "the blockage")))
  (wn20-synset ((:set (:triple "blocked" 1 "a") (:triple "out_of_use" 1 "a") (:triple "blocked" 2 "a") (:triple "plugged" 2 "a") (:triple "closed" 1 "a"))))
  (subclasses (Be-Closed)))

(every Be-Blocked has 
  (object ((a Spatial-Entity)))
  (resulting-state-of ((must-be-a Block with (object ((the object of Self))))))
  (defeated-by ((must-be-a Unblock with (object ((the object of Self))))))
  (text-particle ("blocked")))

;;; ----------

(Be-Broken has 
  (superclasses (Be-Damaged))
  (required-slot (object))
  (caused-by-class (Break))
  (defeated-by-class (Repair))
  (wn16-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a"))))
  (wn20-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a"))))
  (subclasses (Be-Ruined)))

(every Be-Broken has 
  (object ((a Physical-Object)))
  (defeated-by ((must-be-a Repair with (object ((the object of Self))))))
  (resulting-state-of ((must-be-a Break with (object ((the object of Self))))))
  (text-particle ("broken")))

;;; ----------

(Be-Closed has 
  (superclasses (Be-Blocked))
  (required-slot (object))
  (caused-by-class (Close))
  (defeated-by-class (Open))
  (cmap-correspondence ((:seq object "path that's closed")))
  (wn20-synset ((:set (:triple "closed" 3 "a") (:triple "shut" 1 "a") (:triple "unopen" 1 "a") (:triple "closed" 4 "a") (:triple "shut" 2 "a") (:triple "closed" 6 "a")))))

(every Be-Closed has 
  (object ((exactly 1 Spatial-Entity)))
  (instrument ((a Tangible-Entity with (plays ((a Portal-Covering))))))
  (resulting-state-of ((must-be-a Close with (object ((the object of Self))))))
  (defeated-by ((must-be-a Open with (object ((the object of Self))))))
  (text-particle ("closed")))

;;; ----------

(Be-Concealed has 
  (superclasses (Be-Inaccessible))
  (required-slot (object))
  (primary-slot (base))
  (caused-by-class (Conceal))
  (defeated-by-class (Expose))
  (cmap-correspondence ((:seq object "the object being concealed")
                        (:seq base "the thing the object is concealed from")))
  (wn16-synset ((:set (:triple "concealed" 1 "a") (:triple "concealed" 2 "a") (:triple "hidden" 1 "a") (:triple "out_of_sight" 1 "a"))))
  (wn20-synset ((:set (:triple "concealed" 1 "a") (:triple "concealed" 2 "a") (:triple "hidden" 1 "a") (:triple "out_of_sight" 1 "a")))))

(every Be-Concealed has 
  (object ((a Tangible-Entity)))
  (base ((must-be-a Thing)))
  (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Conceal with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Conceal with (object ((the object of Self)))))))
  (defeated-by ((if (has-value (the base of Self)) then (must-be-a Expose with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Expose with (object ((the object of Self)))))))
  (text-particle ("concealed"))
  (text-base ((if (has-value (the base of Self)) then ("from")))))

;;; ----------

(Be-Confined has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  base))
  (caused-by-class (Confine))
  (defeated-by-class (Release))
  (cmap-correspondence ((:seq object "the thing Being-Confined")
                        (:seq base "the confining enclosure")))
  (wn16-synset ((:set (:triple "confined" 4 "a") (:triple "enclosed" 1 "a") (:triple "fenced_in" 1 "a") (:triple "penned" 1 "a"))))
  (wn20-synset ((:set (:triple "confined" 2 "a") (:triple "fenced_in" 1 "a") (:triple "penned" 1 "a")))))

(every Be-Confined has 
  (base ((a Tangible-Entity)))
  (object ((a Tangible-Entity with (is-inside ((the base of Self))))))
  (resulting-state-of ((must-be-a Confine with (object ((the object of Self))) (base ((the base of Self))))))
  (defeated-by ((must-be-a Release with (object ((the object of Self))) (base ((the base of Self))))))
  (text-particle ("confined")))

;;; ----------

(Be-Contained has 
  (superclasses (State))
  (required-slot (object))
  (caused-by-class (Move-Into))
  (defeated-by-class (Move-Out-Of))
  (wn16-synset ((:set (:triple "contain" 2 "v") (:triple "bear" 7 "v") (:triple "carry" 7 "v") (:triple "hold" 9 "v"))))
  (wn20-synset ((:set (:triple "contain" 2 "v") (:triple "bear" 7 "v") (:triple "carry" 7 "v") (:triple "hold" 8 "v")))))

(every Be-Contained has 
  (object ((a Tangible-Entity)))
  (base ((a Tangible-Entity)))
  (origin ((a Spatial-Entity)))
  (destination ((a Spatial-Entity)))
  (resulting-state-of ((must-be-a Move-Into with (object ((the object of Self))) (base ((the base of Self))))))
  (defeated-by ((must-be-a Move-Out-Of with (object ((the object of Self))) (base ((the base of Self))))))
  (text-particle ("contained")))

;;; ----------

(Be-Controlled has 
  (superclasses (State))
  (required-slot (object))
  (caused-by-class (Take-Control))
  (defeated-by-class (Take-Control))
  (cmap-correspondence ((:seq object "the thing that's controlled")))
  (wn20-synset ((:set (:triple "controlled" 1 "a")))))

(every Be-Controlled has 
  (object ((a Entity)))
  (text-particle ("controlled")))

;;; ----------

(Be-Damaged has 
  (subclasses (Be-Broken))
  (superclasses (State))
  (required-slot (object))
  (caused-by-class (Damage)))

(every Be-Damaged has 
  (object ((a Tangible-Entity)))
  (resulting-state-of ((must-be-a Damage with (object ((the object of Self))))))
  (text-particle ("damaged")))

;;; ----------

(Be-Different has 
  (superclasses (State))
  (wn20-synset ((:set (:triple "difference" 1 "n") (:triple "different" 1 "a") (:triple "different" 4 "a") (:triple "dissimilar" 1 "a") (:triple "dissimilar" 2 "a") (:triple "dissimilar" 3 "a") (:triple "unalike" 1 "a") (:triple "unlike" 1 "a")))))

(every Be-Different has 
  (object ((exactly 2 Thing)))
  (text-particle ("different")))

;;; ----------

(Be-Held has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  agent))
  (caused-by-class (Hold))
  (defeated-by-class (Let-Go-Of))
  (cmap-correspondence ((:seq object "the object being held")
                        (:seq agent "the holder")))
  (wn16-synset ((:set (:triple "held" 1 "a"))))
  (wn20-synset ((:set (:triple "held" 1 "a")))))

(every Be-Held has 
  (agent ((a Tangible-Entity)))
  (object ((a Tangible-Entity)))
  (resulting-state-of ((must-be-a Hold with (object ((the object of Self))) (agent ((the agent of Self))))))
  (defeated-by ((must-be-a Let-Go-Of with (object ((the object of Self))) (agent ((the agent of Self))))))
  (text-particle ("held")))

;;; ----------

(Be-Inaccessible has 
  (subclasses (Be-Obstructed
               Be-Concealed
               Be-Blocked))
  (superclasses (State))
  (required-slot (object))
  (primary-slot (base))
  (caused-by-class (Make-Inaccessible))
  (defeated-by-class (Make-Accessible))
  (cmap-correspondence ((:seq object "the inaccessible object")
                        (:seq base "the thing the object is inaccessible to"))))

(every Be-Inaccessible has 
  (object ((a Entity)))
  (base ((must-be-a Thing)))
  (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Make-Inaccessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Inaccessible with (object ((the object of Self)))))))
  (defeated-by ((if (has-value (the base of Self)) then (must-be-a Make-Accessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Accessible with (object ((the object of Self)))))))
  (text-particle ("inaccessible")))

;;; ----------

(Be-Known has 
  (superclasses (State))
  (required-slot (object
                  experiencer))
  (wn20-synset ((:set (:triple "known" 1 "a") (:triple "familiar" 1 "a") (:triple "familiar" 3 "a") (:triple "conversant" 1 "a") (:triple "versed" 1 "a") (:triple "knowledgeable" 2 "a") (:triple "intimate" 6 "a") (:triple "intimate_with" 1 "a") (:triple "knowledgeable" 4 "a") (:triple "knowledgeable_about" 1 "a") (:triple "know" 1 "v")))))

(every Be-Known has 
  (object ((a Entity)))
  (experiencer ((a Tangible-Entity)))
  (text-active-verbseq-sg ("knows"))
  (text-active-verbseq-pl ("know"))
  (text-subj ((the experiencer of Self)))
  (text-dobj ((the object of Self)))
  (text-argslots ((:seq))))

;;; ----------

(Be-Obstructed has 
  (subclasses (Be-Supported
               Be-Shut-Out
               Be-Restrained
               Be-Held
               Be-Confined))
  (superclasses (Be-Inaccessible))
  (required-slot (object))
  (caused-by-class (Obstruct))
  (defeated-by-class (Unobstruct))
  (cmap-correspondence ((:seq object "the object being obstructed")))
  (wn20-synset ((:set (:triple "obstructed" 1 "a")))))

(every Be-Obstructed has 
  (object ((a Entity)))
  (resulting-state-of ((must-be-a Obstruct with (object ((the object of Self))))))
  (defeated-by ((must-be-a Unobstruct with (object ((the object of Self))))))
  (text-particle ("obstructed")))

;;; ----------

(Be-Open has 
  (superclasses (Be-Unblocked))
  (required-slot (object))
  (caused-by-class (Open))
  (defeated-by-class (Close))
  (cmap-correspondence ((:seq object "the thing that is open")))
  (wn16-synset ((:set (:triple "open" 1 "a") (:triple "unfastened" 2 "a") (:triple "open" 5 "a") (:triple "opened" 1 "a"))))
  (wn20-synset ((:set (:triple "open" 1 "a") (:triple "unfastened" 2 "a") (:triple "open" 5 "a") (:triple "opened" 1 "a")))))

(every Be-Open has 
  (object ((a Spatial-Entity with (plays ((a Portal))))))
  (resulting-state-of ((must-be-a Open with (object ((the object of Self))))))
  (defeated-by ((must-be-a Close with (object ((the object of Self))))))
  (text-particle ("open")))

;;; ----------

(Be-Related has 
  (superclasses (State)))

(every Be-Related has 
  (object ((exactly 2 Thing)))
  (text-particle ("related")))

;;; ----------

(Be-Restrained has 
  (superclasses (Be-Obstructed))
  (required-slot (object))
  (caused-by-class (Restrain))
  (defeated-by-class (Unrestrain))
  (cmap-correspondence ((:seq object "the thing Being-Restrained")))
  (wn20-synset ((:set (:triple "restrained" 2 "a") (:triple "immobile" 1 "a") (:triple "immovable" 1 "a") (:triple "immoveable" 1 "a") (:triple "stabile" 2 "a") (:triple "unmovable" 1 "a") (:triple "fixed" 5 "a") (:triple "frozen" 7 "a")))))

(every Be-Restrained has 
  (resulting-state-of ((must-be-a Restrain with (object ((the object of Self))))))
  (defeated-by ((must-be-a Unrestrain with (object ((the object of Self))))))
  (text-particle ("restrained")))

;;; ----------

(Be-Ruined has 
  (superclasses (Be-Broken))
  (caused-by-class (Ruin))
  (wn16-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a"))))
  (wn20-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a") (:triple "irreparable" 1 "a")))))

(every Be-Ruined has 
  (object ((a Tangible-Entity)))
  (defeated-by ((mustnt-be-a Action with (object ((the object of Self))))))
  (resulting-state-of ((must-be-a Ruin with (object ((the object of Self))))))
  (text-particle ("ruined")))

;;; ----------

(Be-Shut-Out has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  base))
  (caused-by-class (Shut-Out))
  (defeated-by-class (Admit))
  (cmap-correspondence ((:seq object "the object shut-out")
                        (:seq base "the enclosure")))
  (wn20-synset ((:set (:triple "external" 1 "a")))))

(every Be-Shut-Out has 
  (base ((a Tangible-Entity with (plays ((a Container))) (in-event (Self)))))
  (object ((a Tangible-Entity with (is-outside ((the base of Self))))))
  (text-particle ("shut out"))
  (text-base ((if (has-value (the base of Self)) then ("of")))))

;;; ----------

(Be-Similar has 
  (superclasses (State))
  (wn20-synset ((:set (:triple "similarity" 1 "n") (:triple "similar" 1 "a") (:triple "similar" 2 "a") (:triple "similar" 3 "a") (:triple "alike" 1 "a") (:triple "like" 1 "a") (:triple "like" 3 "a") (:triple "same" 2 "a")))))

(every Be-Similar has 
  (object ((exactly 2 Thing)))
  (text-particle ("similar")))

;;; ----------

(Be-Sitting has 
  (superclasses (State))
  (wn20-synset ((:set (:triple "seated" 1 "a") (:triple "sitting" 1 "a")))))

(every Be-Sitting has 
  (object ((a Entity)))
  (resulting-state-of ((must-be-a Sit-Down with (agent ((the object of Self))))))
  (defeated-by ((must-be-a Stand-Up with (agent ((the object of Self))))))
  (text-particle ("sitting")))

;;; ----------

(Be-Stable has 
  (superclasses (State))
  (required-slot (object))
  (primary-slot (base))
  (cmap-correspondence ((:seq object "stable thing")
                        (:seq base "the thing the object is stable with respect to")))
  (wn16-synset ((:set (:triple "stable" 1 "a") (:triple "stable" 2 "a") (:triple "stable" 3 "a") (:triple "stable" 4 "a") (:triple "stable" 5 "a") (:triple "static" 3 "a") (:triple "unchanging" 3 "a"))))
  (wn20-synset ((:set (:triple "stable" 1 "a") (:triple "stable" 2 "a") (:triple "stable" 3 "a") (:triple "stable" 4 "a") (:triple "stable" 5 "a") (:triple "static" 4 "a") (:triple "unchanging" 3 "a")))))

(every Be-Stable has 
  (object ((a Entity)))
  (base ((must-be-a Thing)))
  (text-particle ("stable")))

;;; ----------

(Be-Standing has 
  (superclasses (State))
  (wn20-synset ((:set (:triple "standing" 6 "a")))))

(every Be-Standing has 
  (object ((a Entity)))
  (resulting-state-of ((must-be-a Stand-Up with (agent ((the object of Self))))))
  (defeated-by ((must-be-a Sit-Down with (agent ((the object of Self))))))
  (text-particle ("standing")))

;;; ----------

(Be-Stored has 
  (superclasses (State))
  (required-slot (object
                  base))
  (caused-by-class (Store))
  (defeated-by-class (Withdraw))
  (cmap-correspondence ((:seq object "the thing stored")
                        (:seq base "the storage")))
  (wn20-synset ((:set (:triple "stored" 1 "a")))))

(every Be-Stored has 
  (object ((a Entity)))
  (base ((a Tangible-Entity with (plays ((a Container with (content ((the object of Self)))))))))
  (text-particle ("stored"))
  (text-base ((if (has-value (the base of Self)) then ("in")))))

;;; ----------

(Be-Supported has 
  (superclasses (Be-Obstructed))
  (required-slot (object))
  (primary-slot (instrument))
  (caused-by-class (Support))
  (defeated-by-class (Let-Fall))
  (cmap-correspondence ((:seq object "the thing Being-Supported")
                        (:seq instrument "the thing used to Support")))
  (wn20-synset ((:set (:triple "supported" 2 "a")))))

(every Be-Supported has 
  (object ((a Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (text-particle ("supported")))

;;; ----------

(Be-Touching has 
  (subclasses (Be-Attached-To))
  (superclasses (State))
  (caused-by-class (Make-Contact))
  (defeated-by-class (Break-Contact))
  (cmap-correspondence ((:seq object "the things touching")))
  (wn16-synset ((:set (:triple "touch" 5 "v") (:triple "adjoin" 2 "v") (:triple "meet" 14 "v"))))
  (wn20-synset ((:set (:triple "touch" 5 "v") (:triple "adjoin" 2 "v") (:triple "contact" 2 "v") (:triple "meet" 13 "v")))))

(every Be-Touching has 
  (object ((exactly 2 Tangible-Entity)))
  (text-particle ("touching")))

;;; ----------

(Be-Unavailable has 
  (superclasses (State))
  (required-slot (object))
  (primary-slot (base))
  (caused-by-class (Release-Resource))
  (defeated-by-class (Allocate-Resource))
  (cmap-correspondence ((:seq object "the unavailable resource")
                        (:seq base "the thing the resource is unavailable to"))))

(every Be-Unavailable has 
  (object ((a Resource)))
  (base ((must-be-a Thing)))
  (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Release-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Release-Resource with (object ((the object of Self)))))))
  (defeated-by ((if (has-value (the base of Self)) then (must-be-a Allocate-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Allocate-Resource with (object ((the object of Self)))))))
  (text-particle ("unavailable")))

;;; ----------

(Be-Unblocked has 
  (subclasses (Be-Open))
  (superclasses (Be-Accessible))
  (required-slot (object))
  (primary-slot (instrument))
  (caused-by-class (Unblock))
  (defeated-by-class (Block))
  (cmap-correspondence ((:seq object "the object blocked")
                        (:seq instrument "the blockage")))
  (wn20-synset ((:set (:triple "patent" 1 "a") (:triple "unclogged" 1 "a") (:triple "clear" 3 "a") (:triple "open" 2 "a") (:triple "open" 23 "a")))))

(every Be-Unblocked has 
  (object ((a Spatial-Entity)))
  (resulting-state-of ((must-be-a Unblock with (object ((the object of Self))))))
  (defeated-by ((must-be-a Block with (object ((the object of Self))))))
  (text-particle ("unblocked")))

;;; ----------

(beneficiary has 
  (required-slot-of (Donate))
  (instance-of (Participant-Relation))
  (domain (Event))
  (range (Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (beneficiary-of))
  (text-slot (text-beneficiary))
  (cardinality (N-to-N))
  (text-gloss ("benefits"))
  (wn20-synset ((:set (:triple "benefactive_role" 1 "n") (:triple "beneficiary" 2 "n") (:triple "profit" 1 "v") (:triple "gain" 3 "v") (:triple "benefit" 1 "v") (:triple "benefit" 2 "v") (:triple "do_good" 1 "v")))))

;;; ----------

(beneficiary-of has 
  (inverse (beneficiary))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation))
  (text-gloss ("is beneficiary of")))

;;; ----------

(Block has 
  (caused-by-class-of (Be-Blocked))
  (defeated-by-class-of (Be-Unblocked))
  (superclasses (Make-Inaccessible))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "the place blocked")
                        (:seq agent "blocker")
                        (:seq instrument "the blockage")))
  (test-case ('((*path1 has (instance-of (Place))) (a Block with (object (*path1))) (do-and-next (thelast Block)) (has-value (the Be-Blocked object-of of *path1)) (a Move with (object (*car1)) (path (*path1))) (not (try-do (thelast Move))) (new-situation) (*pipe has (instance-of (Physical-Object))) (*garbage has (instance-of (Substance))) (*water has (instance-of (Fluid-Substance))) (a Block with (object (*pipe)) (instrument (*garbage))) (do-and-next (thelast Block)) (has-value (the Be-Blocked object-of of *pipe)) (a Move with (object (*water)) (path (*pipe))) (not (try-do (thelast Move))) (a Unblock with (object (*pipe))) (do-and-next (thelast Unblock)) (not (has-value (the Be-Blocked object-of of *pipe))) (not (has-value (the Be-Blocked instrument-of of *pipe))) (do-and-next (thelast Move)))))
  (wn16-synset ((:set (:triple "block" 1 "v") (:triple "block" 9 "v") (:triple "block" 10 "v") (:triple "bar" 2 "v") (:triple "barricade" 1 "v") (:triple "block_off" 2 "v") (:triple "block_up" 1 "v") (:triple "blockade" 2 "v") (:triple "choke_up" 1 "v") (:triple "close_up" 1 "v") (:triple "impede" 2 "v") (:triple "jam" 7 "v") (:triple "lug" 2 "v") (:triple "obstruct" 2 "v") (:triple "occlude" 1 "v") (:triple "stuff" 4 "v"))))
  (wn20-synset ((:set (:triple "block" 1 "v") (:triple "block" 9 "v") (:triple "block" 10 "v") (:triple "bar" 2 "v") (:triple "barricade" 1 "v") (:triple "block_off" 2 "v") (:triple "block_up" 1 "v") (:triple "blockade" 2 "v") (:triple "choke_up" 1 "v") (:triple "close_up" 1 "v") (:triple "impede" 2 "v") (:triple "jam" 7 "v") (:triple "lug" 2 "v") (:triple "obstruct" 2 "v") (:triple "occlude" 1 "v") (:triple "stuff" 3 "v"))))
  (subclasses (Close)))

(every Block has 
  (object ((a Spatial-Entity)))
  (resulting-state ((a Be-Blocked)))
  (add-list ((:triple (the object of Self) object-of (the resulting-state of Self) [Block-add-1])
             (if (has-value (the instrument of Self)) then (:triple (the instrument of Self) instrument-of (the resulting-state of Self) [Block-add-2]))))
  (text-active-verbseq-sg ("blocks"))
  (text-active-verbseq-pl ("block"))
  (text-passive-verbseq-sg ("gets blocked"))
  (text-passive-verbseq-pl ("get blocked"))
  (preparatory-event ((:default (a Unblock with (object ((the object of Self)))))))
  (text-nominalization ("blocking")))

;;; ----------

(Breach has 
  (superclasses (Break))
  (required-slot (object))
  (primary-slot (agent
                 result))
  (cmap-correspondence ((:seq agent "the breacher")
                        (:seq object "the barrier breached")
                        (:seq result "the resulting portal")))
  (test-case ('((*wall has (instance-of (Tangible-Entity))) (*Breacher has (instance-of (Tangible-Entity))) (*Portal has (instance-of (Spatial-Entity))) (a Breach with (agent (*Breacher)) (object (*wall)) (result (*Portal))) (do-and-next (thelast Breach)) ((the is-region-of of *Portal) = *wall))))
  (wn16-synset ((:set (:triple "breach" 2 "v") (:triple "gap" 1 "v"))))
  (wn20-synset ((:set (:triple "breach" 2 "v") (:triple "gap" 1 "v")))))

(every Breach has 
  (object ((must-be-a Tangible-Entity with (plays ((a Barrier))))))
  (result ((a Spatial-Entity with (plays ((a Portal))))))
  (agent ((must-be-a Tangible-Entity with (agent-of ((a Create with (result ((the result of Self)))))))))
  (add-list ((forall (the result of Self) (:triple It is-region-of (the object of Self) [Breach-add-1]))))
  (text-active-verbseq-sg ("breaches"))
  (text-active-verbseq-pl ("breach"))
  (text-passive-verbseq-sg ("gets breached"))
  (text-passive-verbseq-pl ("get breached"))
  (text-nominalization ("breach")))

;;; ----------

(Break has 
  (caused-by-class-of (Be-Broken))
  (subclasses (Take-Apart
               Ruin
               Divide
               Destroy
               Breach))
  (superclasses (Damage))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq object "the thing broken")
                        (:seq agent "the breaker")
                        (:seq by-means-of "the precipitating event")))
  (test-case ('((*Vase has (instance-of (Physical-Object))) (a Break with (object (*Vase))) (do-and-next (thelast Break)) (the text-gen of (thelast Break)) (the text-gen of (the resulting-state of (thelast Break))) (has-value (the Be-Broken object-of of *Vase)))))
  (wn16-synset ((:set (:triple "break" 3 "v") (:triple "break" 17 "v") (:triple "break_down" 4 "v") (:triple "conk_out" 1 "v") (:triple "die" 4 "v") (:triple "fail" 4 "v") (:triple "give_out" 4 "v") (:triple "give_way" 4 "v") (:triple "go" 30 "v"))))
  (wn20-synset ((:set (:triple "break" 4 "v") (:triple "break" 17 "v") (:triple "break_down" 4 "v") (:triple "conk_out" 1 "v") (:triple "die" 4 "v") (:triple "fail" 4 "v") (:triple "give_out" 4 "v") (:triple "give_way" 4 "v") (:triple "go" 30 "v")))))

(every Break has 
  (object ((a Tangible-Entity)))
  (resulting-state ((a Be-Broken)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Break-add-1])))
  (text-active-verbseq-sg ("breaks"))
  (text-active-verbseq-pl ("break"))
  (text-passive-verbseq-sg ("gets broken"))
  (text-passive-verbseq-pl ("get broken"))
  (text-nominalization ("breaking")))

;;; ----------

(Break-Contact has 
  (defeated-by-class-of (Be-Touching))
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things Breaking-Contact")
                        (:seq agent "the Contact-Breaker")))
  (wn16-synset ((:set (:triple "let_go" 1 "v"))))
  (wn20-synset ((:set (:triple "let_go" 1 "v")))))

(every Break-Contact has 
  (object ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
  (base ((exactly 1 Tangible-Entity)
         (a Tangible-Entity)))
  (defeats ((allof (the object-of of (the base of Self)) where (((the classes of It) = Be-Touching) and ((the object of It) includes (the object of Self))))))
  (del-list ((:set (forall (the defeats of Self) (:triple It object (the object of It) [Break-Contact-del-1])) (:triple (the base of Self) abuts (the object of Self) [Break-Contact-del-2]) (:triple (the object of Self) abuts (the base of Self) [Break-Contact-del-3]))))
  (text-active-verbseq-sg ("breaks contact between"))
  (text-active-verbseq-pl ("break contact between"))
  (text-passive-verbseq-sg ("breaks contact"))
  (text-passive-verbseq-pl ("break contact"))
  (text-base ((if (has-value (the base of Self)) then ("with"))))
  (preparatory-event ((:default (a Detach with (object ((the object of Self))) (base ((the base of Self)))) (a Make-Contact with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("breaking")))

;;; ----------

(breakability has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Breakability-Value))
  (scale-class (Breakability-Scale))
  (scalar-constant-class (Breakability-Constant))
  (inverse (breakability-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "breakability" 1 "n") (:triple "fragility" 1 "n")))))

;;; ----------

(Breakability-Constant has 
  (superclasses (Constant))
  (instances (*breakable
              *fragile
              *brittle
              *delicate
              *unbreakable))
  (scalar-constant-class-of (breakability))
  (element-type-of (*breakable-unbreakable-scale)))

;;; ----------

(breakability-of has 
  (inverse (breakability))
  (range (Tangible-Entity))
  (domain (Breakability-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Breakability-Scale has 
  (superclasses (Scale))
  (scale-class-of (breakability))
  (instances (*breakable-unbreakable-scale)))

;;; ----------

(Breakability-Value has 
  (superclasses (Property-Value))
  (test-case ('((Glass has (superclasses (Substance))) (Stone has (superclasses (Substance))) (*window has (instance-of (Glass)) (breakability ((a Breakability-Value with (value ((:pair *brittle Substance))))))) (*granite has (instance-of (Stone)) (breakability ((a Breakability-Value with (value ((:pair *fragile Substance))) (less-than ((the breakability of *window))))))) (the value of (the breakability of *granite)) ((the less-than of (the breakability of *granite)) includes (the breakability of *window)) ((the greater-than of (the breakability of *window)) includes (the breakability of *granite)))))
  (range-of (breakability))
  (domain-of (breakability-of)))

;;; ----------

(Breakfast has 
  (superclasses (Meal))
  (wn20-synset ((:set (:triple "breakfast" 1 "n")))))

(every Breakfast has 
  (text-nominalization ("breakfast")))

;;; ----------

(Bridge has 
  (superclasses (Architectural-Structure))
  (description ("an architectural structure that acts as conduit over a barrier"))
  (test-case ('((*TooFar has (instance-of (Bridge))) (*RiverKwai has (instance-of (Tangible-Entity)) (plays ((a Barrier)))) (do-and-next (the in-event of (the plays of *RiverKwai))) (a Move with (object ((a Artifact))) (path ((the object of (the in-event of (the plays of *RiverKwai)))))) (not (try-do (thelast Move))) (a Move with (object ((a Artifact))) (path (*TooFar))) (do-and-next (thelast Move)))))
  (wn20-synset ((:set (:triple "bridge" 1 "n") (:triple "span" 5 "n")))))

(every Bridge has 
  (plays ((a Conduit)))
  (is-over ((a Entity with (plays ((a Barrier)))))))

;;; ----------

(Brighten has 
  (superclasses (Increase))
  (test-case ('((*mylamp has (instance-of (Physical-Object)) (brightness (*mylampsbrightness))) (*mylampsbrightness has (instance-of (Brightness-Value)) (value ((:pair *blinding Physical-Object)))) (a Increase with (object (*mylamp)) (property-slot (brightness))) ((thelast Increase) isa Brighten) (do-and-next (thelast Brighten)) ((the greater-than of (the brightness of *mylamp)) includes *mylampsbrightness))))
  (wn20-synset ((:set (:triple "brighten" 1 "v") (:triple "brighten" 3 "v") (:triple "brighten" 4 "v") (:triple "lighten_up" 1 "v") (:triple "lighten" 3 "v") (:triple "lighten" 4 "v")))))

(every Brighten has-definition 
  (instance-of (Increase))
  (property-slot (brightness)))

(every Brighten has 
  (text-nominalization ("brightening")))

;;; ----------

(brightness has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Brightness-Value))
  (scalar-constant-class (Brightness-Constant))
  (cardinal-unit-class (UoM-Brightness))
  (scale-class (Brightness-Scale))
  (inverse (brightness-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "brightness" 1 "n") (:triple "brightness" 3 "n") (:triple "luminosity" 1 "n") (:triple "brightness level" 1 "n") (:triple "luminance" 1 "n") (:triple "luminousness" 1 "n") (:triple "light" 4 "n")))))

;;; ----------

(Brightness-Constant has 
  (superclasses (Constant))
  (instances (*blinding
              *bright
              *dim
              *dark))
  (scalar-constant-class-of (brightness))
  (element-type-of (*dark-blinding-scale)))

;;; ----------

(brightness-of has 
  (inverse (brightness))
  (range (Tangible-Entity))
  (domain (Brightness-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Brightness-Scale has 
  (superclasses (Scale))
  (scale-class-of (brightness))
  (instances (*dark-blinding-scale)))

;;; ----------

(Brightness-Value has 
  (superclasses (Property-Value))
  (test-case ('((Star has (superclasses (Tangible-Entity))) (Lightbulb has (superclasses (Tangible-Entity))) (*whitegiant has (instance-of (Drink)) (brightness ((a Brightness-Value)))) (*browndwarf has (instance-of (Drink)) (brightness ((a Brightness-Value with (value ((:pair *bright Lightbulb) (:pair *dim Star))) (less-than ((the brightness of *whitegiant))))))) (the value of (the brightness of *browndwarf)) ((the less-than of (the brightness of *browndwarf)) includes (the brightness of *whitegiant)) ((the greater-than of (the brightness of *whitegiant)) includes (the brightness of *browndwarf)))))
  (range-of (brightness))
  (domain-of (brightness-of)))

;;; ----------

(Brunch has 
  (superclasses (Meal))
  (wn20-synset ((:set (:triple "brunch" 1 "n")))))

(every Brunch has 
  (text-nominalization ("brunch")))

;;; ----------

(Building has 
  (superclasses (Architectural-Structure))
  (description ("an architectural structure playing a container, having a floor, rooms, walls and a roof"))
  (wn20-synset ((:set (:triple "building" 1 "n")))))

(every Building has 
  (plays ((a Container)))
  (has-part ((a Room)
             (a Floor)
             (a Wall)
             (a Roof))))

;;; ----------

(Building-Complex has 
  (superclasses (Architectural-Structure))
  (wn20-synset ((:set (:triple "complex" 4 "n") (:triple "building_complex" 1 "n")))))

;;; ----------

(Buy has 
  (superclasses (Obtain))
  (test-case ('((new-situation) (*My-Bike has (instance-of (Tangible-Entity))) (*Me has (instance-of (Tangible-Entity)) (possesses (*My-Bike))) (*200-Dollars has (instance-of (Money)) (worth ((a Worth-Value with (value ((:pair 200 *usdollar))))))) (*Jim has (instance-of (Tangible-Entity)) (possesses (*200-Dollars))) (a Buy with (agent (*Jim)) (object (*My-Bike)) (donor (*Me)) (instrument (*200-Dollars))) (do-script (thelast Buy)) (the text-gen of (thelast Buy)) ((the possesses of *Jim) = *My-Bike) ((the is-possessed-by of *My-Bike) = *Jim) ((the agent of (thelast Buy)) = (the recipient of (thelast Buy))) ((the possesses of *Me) = *200-Dollars) ((the is-possessed-by of *200-Dollars) = *Me))))
  (wn20-synset ((:set (:triple "buy" 1 "v") (:triple "purchase" 1 "v")))))

(every Buy has 
  (donor ((a Tangible-Entity)))
  (instrument ((a Money with (worth ((a Worth-Value with (value ((the value of (the worth of (the object of Self)))))))))))
  (first-subevent ((a Transfer with (object ((the instrument of Self))) (agent ((the agent of Self))) (donor ((the agent of Self))) (recipient ((the donor of Self))))))
  (subevent ((the first-subevent of Self)))
  (text-active-verbseq-sg ("buys"))
  (text-active-verbseq-pl ("buy"))
  (text-instrument ("for"))
  (text-nominalization ("buying")))

;;; ----------

(by-means-of has 
  (primary-slot-of (Break
                    Copy
                    Create
                    Damage
                    Duplicate
                    Harm
                    Impair
                    Ruin))
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (means-by-which))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("is done by means of")))

;;; ----------

(Cabinet has 
  (superclasses (Furniture))
  (wn20-synset ((:set (:triple "cabinet" 1 "n")))))

;;; ----------

(capability has 
  (instance-of (Causal-Relation))
  (domain (Entity))
  (range (Role))
  (fluent-status (*Inertial-Fluent))
  (inverse (capability-of))
  (cardinality (N-to-N))
  (text-gloss ("has the capability to be")))

;;; ----------

(capability-of has 
  (inverse (capability))
  (range (Entity))
  (domain (Role))
  (instance-of (Causal-Relation))
  (text-gloss ("is a capability of")))

;;; ----------

(capacity has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Capacity-Value))
  (scale-class (Capacity-Scale))
  (scalar-constant-class (Capacity-Constant))
  (inverse (capacity-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "capacity" 3 "n") (:triple "capacity" 6 "n") (:triple "content" 4 "n")))))

;;; ----------

(Capacity-Constant has 
  (superclasses (Constant))
  (instances (*none
              *unlimited
              *roomy
              *capacious))
  (scalar-constant-class-of (capacity))
  (element-type-of (*none-unlimited-scale)))

;;; ----------

(capacity-of has 
  (inverse (capacity))
  (range (Spatial-Entity))
  (domain (Capacity-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Capacity-Scale has 
  (superclasses (Scale))
  (scale-class-of (capacity))
  (instances (*none-unlimited-scale)))

;;; ----------

(Capacity-Value has 
  (superclasses (Property-Value))
  (test-case ('((*myBigBox has (instance-of (Physical-Object)) (capacity ((a Capacity-Value)))) (*myLittleBox has (instance-of (Physical-Object)) (capacity ((a Capacity-Value with (value ((:pair *roomy Physical-Object))) (less-than ((the capacity of *myBigBox))))))) (the value of (the capacity of *myLittleBox)) ((the less-than of (the capacity of *myLittleBox)) includes (the capacity of *myBigBox)) ((the greater-than of (the capacity of *myBigBox)) includes (the capacity of *myLittleBox)))))
  (range-of (capacity))
  (domain-of (capacity-of)))

;;; ----------

(Cardinal has 
  (superclasses (Property-Group))
  (range-of (cardinal-value
             numeric-value-of
             reference-class-of
             unit-of))
  (domain-of (cardinal-value-of
              numeric-value
              reference-class
              unit)))

;;; ----------

(cardinal-unit-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property))
  (range (Unit-of-Measurement))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(cardinal-unit-class-of has 
  (range (Property))
  (domain (Unit-of-Measurement))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(cardinal-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (range (Cardinal))
  (inverse (cardinal-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(cardinal-value-of has 
  (inverse (cardinal-value))
  (range (Property-Value))
  (domain (Cardinal))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Carrier has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "carrier" 6 "n"))))
  (wn20-synset ((:set (:triple "carrier" 6 "n")))))

(every Carrier has 
  (in-event ((a Transmit)))
  (played-by ((a Entity with (instrument-of ((the in-event of Self)))))))

;;; ----------

(Carry has 
  (superclasses (Move))
  (required-slot (agent
                  object))
  (primary-slot (origin
                 destination
                 path))
  (cmap-correspondence ((:seq agent "the carrier")
                        (:seq object "the thing carried")
                        (:seq origin "original location")
                        (:seq destination "final location")
                        (:seq path "through")))
  (test-case ('((*Carry has (instance-of (Carry)) (agent (*agent)) (object (*object))) (the subevent of *Carry) (the text-gen of (thelast Carry)))))
  (wn16-synset ((:set (:triple "carry" 1 "v") (:triple "carry" 2 "v") (:triple "pack" 2 "v") (:triple "take" 30 "v") (:triple "transport" 1 "v"))))
  (wn20-synset ((:set (:triple "carry" 1 "v") (:triple "carry" 2 "v") (:triple "pack" 2 "v") (:triple "take" 30 "v") (:triple "transport" 1 "v")))))

(every Carry has 
  (agent ((a Tangible-Entity)))
  (object ((a Tangible-Entity)))
  (first-subevent ((:set (the Locomotion subevent of Self) (the Hold subevent of Self))))
  (subevent ((a Locomotion with (agent ((the agent of Self))) (origin ((the origin of Self))) (destination ((the destination of Self))) (time-during ((a Time-Interval with (time-int-during ((the time-during of (the Hold subevent of Self))))))))
             (a Hold with (agent ((the agent of Self))) (object ((the object of Self))))))
  (text-active-verbseq-sg ("carries"))
  (text-active-verbseq-pl ("carry"))
  (text-passive-verbseq-sg ("gets carried"))
  (text-passive-verbseq-pl ("get carried"))
  (text-nominalization ("carrying")))

;;; ----------

(Categorical has 
  (superclasses (Property-Group))
  (domain-of (categorical-constant
              categorical-value-of))
  (range-of (categorical-constant-of
             categorical-value)))

;;; ----------

(categorical-constant has 
  (instance-of (CLIB-Slot-Group))
  (domain (Categorical))
  (range (Constant))
  (inverse (categorical-constant-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(categorical-constant-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property))
  (range (Constant))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(categorical-constant-class-of has 
  (range (Property))
  (domain (Constant))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(categorical-constant-of has 
  (inverse (categorical-constant))
  (range (Categorical))
  (domain (Constant))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(categorical-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (range (Categorical))
  (inverse (categorical-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(categorical-value-of has 
  (inverse (categorical-value))
  (range (Property-Value))
  (domain (Categorical))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(caused-by has 
  (inverse (causes))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-slot (text-caused-by))
  (text-gloss ("is caused by")))

;;; ----------

(caused-by-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(caused-by-class-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(causes has 
  (required-slot-of (Let-Fall))
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (caused-by))
  (text-slot (text-causes))
  (cardinality (N-to-N))
  (text-gloss ("causes")))

;;; ----------

(Ceiling has 
  (superclasses (Architectural-Structure))
  (description ("a horizontal architectural structure covering a room"))
  (wn20-synset ((:set (:triple "ceiling" 1 "n")))))

(every Ceiling has 
  (orientation ((a Angle-Value with (value ((:pair *horizontal Entity))))))
  (is-part-of ((a Room)))
  (plays ((a Cover)))
  (is-above ((((the Room is-part-of of Self)) && ((the content of (the Container plays of (the Room is-part-of of Self))))))))

;;; ----------

(Cell has 
  (superclasses (Living-Entity))
  (description ("The basic unit from which living organisms are made,
                     consisting of an aqueous solution of organic molecules
                     enclosed by a membrane.  All cells arise from existing
                     cells, usually by a process of division into two.
                     (Alberts:ECB:G-3).")))

(every Cell has 
  (is-part-of ((must-be-a Organism))))

;;; ----------

(Chemical has 
  (domain-of (volume))
  (range-of (volume-of)))

;;; ----------

(Chemical-Energy has 
  (superclasses (Energy))
  (description ("Energy produced by or stored in chemical 
                                properties or property differentials, such as
                                chemical bonds, such as charge gradients, 
                                density gradients, etc."))
  (wn20-synset ((:set (:triple "chemical_energy" 1 "n")))))

;;; ----------

(Chemical-Entity has 
  (superclasses (Physical-Object))
  (member-of (_Partition5)))

;;; ----------

(circumference has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Circumference-Scale))
  (scalar-constant-class (Circumference-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (circumference-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "circumference" 2 "n")))))

;;; ----------

(Circumference-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (circumference)))

;;; ----------

(circumference-of has 
  (inverse (circumference))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Circumference-Scale has 
  (superclasses (Scale))
  (scale-class-of (circumference)))

;;; ----------

(City has 
  (superclasses (Administrative-District))
  (wn20-synset ((:set (:triple "city" 1 "n") (:triple "metropolis" 1 "n") (:triple "urban_center" 1 "n") (:triple "city" 2 "n") (:triple "city" 3 "n") (:triple "metropolis" 2 "n")))))

;;; ----------

(Class has 
  (range-of (range2))
  (domain-of (range2-of))
  (superclasses (Thing)))

;;; ----------

(Class-Definition-Viewpoint has 
  (superclasses (Viewpoint)))

(every Class-Definition-Viewpoint has 
  (viewpoint-question ((if (has-value (the1 of (the viewpoint-target of Self))) then (make-phrase (:seq "What is" (if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (STRING (KM-UNIQUE0 '(the1 of (the viewpoint-target of Self)))) 1))))) then (:seq "an") else (:seq "a")) (the1 of (the viewpoint-target of Self)) "nospace" "?")) else "Unable to answer the question.")))
  (viewpoint-answer ((if (has-value (the1 of (the viewpoint-target of Self))) then (if ((the1 of (the1 of (the viewpoint-query of Self))) = *class-description) then (make-phrase (:seq "<b>" (the instance-of of (the1 of (the viewpoint-target of Self))) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the text-definition-sentence of (the1 of (the viewpoint-target of Self)))))))))))
  (viewpoint-detail ((if (has-value (the1 of (the viewpoint-target of Self))) then (make-phrase ((?targ == (the1 of (the viewpoint-target of Self))) and (?relcon1 == (forall ?trip in (the viewpoint-model-graph of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?targ) and (?concorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(the3 of ?trip)))))) and (not (?concorig includes *CLIB-LIST*)) and (not (?concorig includes *BIO-LBR-PUMP-PRIME-LIST*)) and (?instphrase == (make-phrase (the text-indef-phrase of (the1 of ?trip)))) and (?instphrase /= "")) (the1 of ?trip))) and (?relcon2 == (forall ?trip in (the viewpoint-model-graph of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?targ) and (?concorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(the3 of ?trip)))))) and (?concorig includes *BIO-LBR-PUMP-PRIME-LIST*) and (?instphrase == (make-phrase (the text-indef-phrase of (the1 of ?trip)))) and (?instphrase /= "")) (the1 of ?trip))) and (?concsl == (forall ?trip in (the viewpoint-model-graph of Self) where ((((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property)) and (?valphrase == (make-phrase (the text-indef-phrase of (the3 of ?trip)))) and (?valphrase /= "") and (not ((:set "an entity" "an event" "a role" "an intangible-entity" "a tangible-entity" "a spatial-entity" "a place") includes ?valphrase)) and (?fconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of (the1 of ?trip)) where t)))))) and ((?fconcorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?fconcorig includes *CLIB-LIST*))) and (?vconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of (the3 of ?trip)) where t)))))) and ((?vconcorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?vconcorig includes *CLIB-LIST*)))) (:pair (the1 of ?trip) (the2 of ?trip)))) and (:seq (get-justification (:triple (the1 of (the viewpoint-target of Self)) instance-of *)) (if ((has-value ?relcon1) or (has-value ?relcon2)) then (:seq "<b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?targ) "</i></b>" "involves" (andify (:set (forall ?c in ?relcon1 (make-phrase (:seq "<font color=green>" (the text-indef-phrase of ?c) "</font>"))) (forall ?c in ?relcon2 (make-phrase (the text-indef-phrase of ?c))))))) "
")) "<ul>
" (forall ?cs in ?concsl (:seq "<li>" "nospace" (make-sentence (if ((the2 of ?cs) isa Property) then (the text-description of (the (the2 of ?cs) of (the1 of ?cs))) else (:seq (if (oneof ?headcl in (the classes of (the1 of ?cs)) where ((#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '?headcl)))) = ())) then "<font color=green>" else "<font color=black>") (the text-def-head of (the1 of ?cs)) "</font>" (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the viewpoint-model-graph of Self) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (:set (forall ?vconc in (the3 of ?trip) where ((?vconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of ?vconc) where t)))))) and (?vconcorig = ())) (:seq "<font color=green>" (the text-indef-phrase of ?vconc) "</font>")) (forall ?vconc in (the3 of ?trip) where ((?vconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of ?vconc) where t)))))) and (has-value ?vconcorig) and ((?vconcorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?vconcorig includes *CLIB-LIST*)))) (the text-indef-phrase of ?vconc)))))))) "</li>
")) "</ul>
")))))))

;;; ----------

(Cliche has 
  (subclasses (Unauthorized
               Reflexive-Cliche
               Intentional
               Authorized))
  (superclasses (KM-Class)))

;;; ----------

(Close has 
  (caused-by-class-of (Be-Closed))
  (defeated-by-class-of (Be-Open))
  (superclasses (Block))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "portal through the barrier")
                        (:seq agent "closer")
                        (:seq instrument "portal covering")))
  (wn16-synset ((:set (:triple "close" 3 "v") (:triple "shut" 1 "v"))))
  (wn20-synset ((:set (:triple "close" 3 "v") (:triple "shut" 1 "v")))))

(every Close has 
  (object ((a Spatial-Entity with (plays ((a Portal))))))
  (instrument ((a Tangible-Entity)))
  (resulting-state ((a Be-Closed)))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Open))))
  (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Closed) [Close-pcs-1])
             (:triple (the object of Self) object-of (a Be-Open) [Close-pcs-2])
             (:triple (the object of Self) object-of (mustnt-be-a Be-Blocked) [Close-pcs-3])))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Close-add-1])
             (:triple (the resulting-state of Self) instrument (the instrument of Self) [Close-add-2])
             (:triple (the instrument of Self) plays (a Portal-Covering with (in-event ((the resulting-state of Self)))) [Close-add-3])))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Close-del-1]))
             (:triple (the object of Self) plays (the Portal plays of (the object of Self)) [Close-del-2])))
  (text-active-verbseq-sg ("closes"))
  (text-active-verbseq-pl ("close"))
  (text-passive-verbseq-sg ("gets closed"))
  (text-passive-verbseq-pl ("get closed"))
  (text-argslots ((:seq base instrument path result)))
  (preparatory-event ((:default (a Open with (object ((the object of Self))) (base ((the base of Self))) (agent ((the agent of Self))) (instrument ((the instrument of Self)))) (a Unblock with (object ((the object of Self)))))))
  (text-nominalization ("closing")))

;;; ----------

(cmap-correspondence has 
  (instance-of (Shaken-Slot-Group))
  (domain (Thing))
  (cardinality (N-to-N)))

;;; ----------

(cmap-correspondence-of has 
  (range (Thing))
  (instance-of (Shaken-Slot-Group)))

;;; ----------

(Collide has 
  (superclasses (Make-Contact))
  (required-slot (object))
  (primary-slot (agent
                 base
                 location))
  (cmap-correspondence ((:seq object "the thing(s) Collided")
                        (:seq agent "the Collider")
                        (:seq base "the thing Collided with")
                        (:seq location "the place of the collision")
                        (:seq intensity "the intensity of the collison")))
  (test-case ('((*side-walk has (instance-of (Place))) (*Semi-Truck has (instance-of (Tangible-Entity))) (*Mini-Van has (instance-of (Tangible-Entity)) (location (*side-walk))) (a Collide with (object (*Mini-Van)) (base (*Semi-Truck)) (location (*side-walk))) (do-and-next (thelast Collide)) (the text-gen of (thelast Collide)) (allof (the Be-Touching object-of of *Mini-Van) where ((the object of It) includes *Semi-Truck)) ((the abuts of *Mini-Van) includes *Semi-Truck))))
  (wn16-synset ((:set (:triple "collide" 2 "v") (:triple "collide" 3 "v") (:triple "clash" 1 "v"))))
  (wn20-synset ((:set (:triple "collide" 1 "v") (:triple "collide" 3 "v") (:triple "clash" 1 "v") (:triple "collide_with" 1 "v") (:triple "hit" 2 "v") (:triple "strike" 1 "v") (:triple "impinge_on" 1 "v") (:triple "run_into" 3 "v")))))

(every Collide has 
  (intensity (*strong))
  (text-active-verbseq-sg ("causes to collide"))
  (text-active-verbseq-pl ("cause to collide"))
  (text-passive-verbseq-sg ("collides"))
  (text-passive-verbseq-pl ("collide"))
  (text-nominalization ("collision")))

;;; ----------

(color has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Color-Value))
  (categorical-constant-class (Color-Constant))
  (inverse (color-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "color" 1 "n") (:triple "color" 2 "n") (:triple "colour" 6 "n") (:triple "coloring" 2 "n") (:triple "colouring" 2 "n") (:triple "colour" 8 "n")))))

;;; ----------

(Color-Constant has 
  (superclasses (Constant))
  (instances (*red
              *blue
              *yellow
              *green
              *orange
              *purple
              *pink
              *brown
              *black
              *white
              *gray
              *colorless
              *auburn
              *blond
              *blonde
              *brunette
              *redhead
              *silver
              *hazel
              *aqua
              *fuchsia
              *lime
              *maroon
              *navy
              *olive
              *teal
              *aliceBlue
              *antiqueWhite
              *aquamarine
              *azure
              *beige
              *bisque
              *blanchedAlmond
              *blueViolet
              *burlyWood
              *cadetBlue
              *chartreuse
              *chocolate
              *coral
              *cornflowerBlue
              *cornsilk
              *crimson
              *cyan
              *darkBlue
              *darkCyan
              *darkGoldenRod
              *darkGray
              *darkGreen
              *darkKhaki
              *darkMagenta
              *darkOliveGreen
              *darkorange
              *darkOrchid
              *darkRed
              *darkSalmon
              *darkSeaGreen
              *darkSlateBlue
              *darkSlateGray
              *darkTurquoise
              *darkViolet
              *deepPink
              *deepSkyBlue
              *dimGray
              *dodgerBlue
              *feldspar
              *fireBrick
              *floralWhite
              *forestGreen
              *gainsboro
              *ghostWhite
              *gold
              *goldenRod
              *greenYellow
              *honeyDew
              *hotPink
              *indianRed
              *indigo
              *ivory
              *khaki
              *lavender
              *lavenderBlush
              *lawnGreen
              *lemonChiffon
              *lightBlue
              *lightCoral
              *lightCyan
              *lightGoldenRodYellow
              *lightGrey
              *lightGreen
              *lightPink
              *lightSalmon
              *lightSeaGreen
              *lightSkyBlue
              *lightSlateBlue
              *lightSlateGray
              *lightSteelBlue
              *lightYellow
              *limeGreen
              *linen
              *magenta
              *mediumAquaMarine
              *mediumBlue
              *mediumOrchid
              *mediumPurple
              *mediumSeaGreen
              *mediumSlateBlue
              *mediumSpringGreen
              *mediumTurquoise
              *mediumVioletRed
              *midnightBlue
              *mintCream
              *mistyRose
              *moccasin
              *mavajoWhite
              *oldLace
              *oliveDrab
              *orangeRed
              *orchid
              *paleGoldenRod
              *paleGreen
              *paleTurquoise
              *paleVioletRed
              *papayaWhip
              *peachPuff
              *peru
              *plum
              *powderBlue
              *rosyBrown
              *royalBlue
              *saddleBrown
              *salmon
              *sandyBrown
              *seaGreen
              *seaShell
              *sienna
              *skyBlue
              *slateBlue
              *slateGray
              *snow
              *springGreen
              *steelBlue
              *tan
              *thistle
              *tomato
              *turquoise
              *violet
              *violetRed
              *wheat
              *whiteSmoke
              *yellowGreen))
  (wn20-synset ((:set (:triple "chromatic_color" 1 "n"))))
  (categorical-constant-class-of (color)))

;;; ----------

(color-of has 
  (inverse (color))
  (range (Spatial-Entity))
  (domain (Color-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Color-Value has 
  (superclasses (Property-Value))
  (range-of (color))
  (domain-of (color-of)))

;;; ----------

(Come-Together has 
  (superclasses (Action))
  (required-slot (object
                  destination))
  (primary-slot (subevent))
  (cmap-correspondence ((:seq object "the things moved")
                        (:seq destination "moved to")
                        (:seq subevent "the Move of each object")))
  (test-case ('((*safety has (instance-of (Physical-Object)) (location ((a Place)))) (*running-back has (instance-of (Physical-Object)) (location ((a Place)))) (*goal-line has (instance-of (Place))) (a Come-Together with (object (*running-back *safety)) (destination (*goal-line))) (do-script (thelast Come-Together)) (the text-gen of (thelast Come-Together)) ((the location of *safety) = *goal-line) ((the location of *running-back) = *goal-line) (forall (the subevent of (thelast Come-Together)) ((It isa Go-To) and ((:set *running-back *safety) includes (the object of It)))) (new-situation) (*dog has (instance-of (Physical-Object)) (location ((a Place)))) (*cat has (instance-of (Physical-Object)) (location ((a Place)))) (*rat has (instance-of (Physical-Object)) (location ((a Place)))) (*trap has (instance-of (Physical-Object)) (location ((a Place)))) (a Come-Together with (object (*dog *cat *rat)) (destination (*trap))) (do-script (thelast Come-Together)) (the text-gen of (thelast Come-Together)) ((the location of *dog) = (the location of *trap)) ((the location of *cat) = (the location of *trap)) ((the location of *rat) = (the location of *trap)) ((the location-of of (the location of (the destination of (thelast Come-Together)))) is-superset-of (:set *dog *cat *rat *trap)))))
  (wn16-synset ((:set (:triple "meet" 7 "v") (:triple "gather" 2 "v") (:triple "assemble" 2 "v") (:triple "forgather" 1 "v") (:triple "foregather" 1 "v"))))
  (wn20-synset ((:set (:triple "meet" 8 "v") (:triple "gather" 2 "v") (:triple "assemble" 2 "v") (:triple "forgather" 1 "v") (:triple "foregather" 1 "v")))))

(every Come-Together has 
  (object ((at-least 2 Tangible-Entity)
           (a Tangible-Entity)
           (a Tangible-Entity)))
  (destination ((exactly 1 Spatial-Entity)
                (a Spatial-Entity)))
  (first-subevent ((the subevent of Self)))
  (subevent ((forall (the object of Self) (a Go-To with (object (It)) (agent (It)) (destination ((the destination of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (origin ((if (has-value (the origin of Self)) then (the origin of Self))))))))
  (text-active-verbseq-sg ("causes to come together"))
  (text-active-verbseq-pl ("cause to come together"))
  (text-passive-verbseq-sg ("comes together"))
  (text-passive-verbseq-pl ("come together"))
  (text-nominalization ("coming together")))

;;; ----------

(Command has 
  (superclasses (Express))
  (required-slot (agent
                  object
                  recipient))
  (test-case ('((Blow-to-smithereens has (superclasses (Action))) (*Enemy has (instance-of (Tangible-Entity))) (*Commander has (instance-of (Tangible-Entity))) (*Soldier has (instance-of (Tangible-Entity))) (*Orders has (instance-of (Information)) (information-content ((a Blow-to-smithereens with (agent (*Soldier)) (object (*Enemy)))))) (*Command has (instance-of (Command)) (agent (*Commander)) (recipient (*Soldier)) (object (*Orders))) (do-and-next *Command) ((the experiencer of (thelast Be-Known)) = *Commander) (do-and-next (the objective of *Command)) ((the agent of (thelast Action)) = *Soldier))))
  (wn16-synset ((:set (:triple "command" 2 "v") (:triple "command" 3 "v") (:triple "require" 3 "v") (:triple "compel" 2 "v") (:triple "order" 1 "v") (:triple "tell" 4 "v") (:triple "enjoin" 2 "v"))))
  (wn20-synset ((:set (:triple "command" 2 "v") (:triple "command" 3 "v") (:triple "require" 3 "v") (:triple "compel" 2 "v") (:triple "order" 1 "v") (:triple "tell" 4 "v") (:triple "enjoin" 2 "v")))))

(every Command has 
  (object ((must-be-a Information with (plays ((a Instruction))))))
  (recipient ((a Tangible-Entity)))
  (objective ((the Action information-content of (the object of Self))))
  (text-nominalization ("commanding")))

;;; ----------

(Committee has 
  (superclasses (Workgroup))
  (wn20-synset ((:set (:triple "committee" 1 "n") (:triple "commission" 1 "n")))))

;;; ----------

(Communicate has 
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 recipient))
  (test-case ('((*John has (instance-of (Tangible-Entity))) (*Paul has (instance-of (Tangible-Entity))) (*Guitar has (instance-of (Tangible-Entity))) (*Story has (instance-of (Information)) (information-content ((a Break with (agent (*John)) (object (*Guitar)))))) ((a Be-Known with (experiencer (*John)) (object (*Story)))) (a Communicate with (donor (*John)) (recipient (*Paul)) (object (*Story))) (do-script (thelast Communicate)) ((the information-content of (the object of (oneof (the instances of Be-Known) where ((the experiencer of It) includes *Paul)))) isa Break))))
  (wn16-synset ((:set (:triple "communicate" 1 "v") (:triple "communicate" 2 "v") (:triple "communicate" 3 "v") (:triple "pass_on" 7 "v") (:triple "pass" 12 "v") (:triple "put_across" 1 "v") (:triple "intercommunicate" 2 "v") (:triple "convey" 3 "v") (:triple "transmit" 1 "v"))))
  (wn20-synset ((:set (:triple "communicate" 1 "v") (:triple "communicate" 2 "v") (:triple "communicate" 3 "v") (:triple "pass_on" 7 "v") (:triple "pass" 12 "v") (:triple "put_across" 1 "v") (:triple "intercommunicate" 2 "v") (:triple "convey" 3 "v") (:triple "transmit" 1 "v"))))
  (subclasses (Teach
               Suggest
               Make-Request)))

(every Communicate has 
  (object ((a Information)))
  (base ((a Message)))
  (donor ((the agent of Self)
          (must-be-a Tangible-Entity)))
  (agent ((the donor of Self)))
  (recipient ((a Tangible-Entity)))
  (resulting-state ((a Be-Known)))
  (first-subevent ((the Express subevent of Self)))
  (subevent ((a Express with (object ((the object of Self))) (agent ((the agent of Self))) (result ((the base of Self))) (next-event ((the Convey subevent of Self))))
             (a Convey with (object ((the base of Self))) (agent ((the agent of Self))) (recipient ((the recipient of Self))) (next-event ((the Interpret subevent of Self))))
             (a Interpret with (agent ((the recipient of Self))) (object ((the base of Self))) (result ((the object of Self))))))
  (pcs-list ((:triple (the object of Self) object-of ((a Be-Known with (experiencer ((the agent of Self)))) [Communicate-pcs-1]))))
  (text-active-verbseq-sg ("communicates"))
  (text-active-verbseq-pl ("communicate"))
  (text-passive-verbseq-sg ("gets communicated"))
  (text-passive-verbseq-pl ("get communicated"))
  (text-recipient ("to"))
  (text-argslots ((:seq recipient)))
  (text-nominalization ("communication")))

;;; ----------

(Community has 
  (superclasses (Aggregate))
  (description ("a group of people with something in common"))
  (wn20-synset ((:set (:triple "people" 1 "n")))))

;;; ----------

(Company has 
  (superclasses (Institution))
  (description ("a private business organization"))
  (wn20-synset ((:set (:triple "company" 1 "n") (:triple "business" 1 "n") (:triple "concern" 3 "n") (:triple "business_concern" 1 "n") (:triple "business_organization" 1 "n") (:triple "business_organisation" 1 "n"))))
  (subclasses (Corporation)))

;;; ----------

(complement has 
  (instance-of (Meronymic-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Non-Fluent))
  (inverse (complement-of))
  (cardinality (N-to-N))
  (text-gloss ("is a complement of")))

;;; ----------

(complement-of has 
  (inverse (complement))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is a complement of")))

;;; ----------

(component has 
  (instance-of (KM-Slot-Group))
  (domain (System))
  (range (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (shaken-ui-hidden-slot (f)))

;;; ----------

(component-of has 
  (range (System))
  (domain (Thing))
  (instance-of (KM-Slot-Group)))

;;; ----------

(Compute-Maximum has 
  (superclasses (Method))
  (description ("given a list of values, return the maximum")))

(every Compute-Maximum has 
  (output (#'(LAMBDA () (FIND-MAX-VALUE (KM0 '(the input of Self)))))))

;;; ----------

(Compute-Minimum has 
  (superclasses (Method))
  (description ("given a list of values, return the minimum value")))

(every Compute-Minimum has 
  (output (#'(LAMBDA () (FIND-MIN-VALUE (KM0 '(the input of Self)))))))

;;; ----------

(Compute-Qualitative-Maximum has 
  (superclasses (Method)))

(every Compute-Qualitative-Maximum has 
  (output (((?x == (allof (the input of Self) where ((the value of It) includes #'(LAMBDA () (LIST (FIND-SCALAR-MAX (KM0 '(the value of (the input of Self))))))))) and (if (((the number of ?x) > 1) and (not ((the input of Self) = ?x))) then (the output of (a Compute-Maximum with (input (?x)))) else ?x)))))

;;; ----------

(Compute-Qualitative-Minimum has 
  (superclasses (Method)))

(every Compute-Qualitative-Minimum has 
  (output (((?x == (allof (the input of Self) where ((the value of It) includes #'(LAMBDA () (LIST (FIND-SCALAR-MIN (KM0 '(the value of (the input of Self))))))))) and (if (((the number of ?x) > 1) and (not ((the input of Self) = ?x))) then (the output of (a Compute-Minimum with (input (?x)))) else ?x)))))

;;; ----------

(Compute-Quantitative-Maximum has 
  (superclasses (Method)))

(every Compute-Quantitative-Maximum has 
  (output ((allof (the input of Self) where ((the1 of (the value of It)) includes (the max of (allof2 (the1 of (the value of (the input of Self))) where (numberp It2))))))))

;;; ----------

(Compute-Quantitative-Minimum has 
  (superclasses (Method)))

(every Compute-Quantitative-Minimum has 
  (output ((allof (the input of Self) where ((the1 of (the value of It)) includes (the min of (allof2 (the1 of (the value of (the input of Self))) where (numberp It2))))))))

;;; ----------

(Conceal has 
  (caused-by-class-of (Be-Concealed))
  (superclasses (Make-Inaccessible))
  (required-slot (object))
  (primary-slot (agent
                 base))
  (cmap-correspondence ((:seq object "the thing Concealed")
                        (:seq base "the thing to which the object is Concealed")
                        (:seq agent "the Concealer")))
  (wn16-synset ((:set (:triple "conceal" 1 "v") (:triple "hide" 1 "v"))))
  (wn20-synset ((:set (:triple "conceal" 1 "v") (:triple "hide" 1 "v")))))

(every Conceal has 
  (object ((a Tangible-Entity)))
  (base ((must-be-a Thing)))
  (agent ((must-be-a Entity)))
  (resulting-state ((a Be-Concealed)))
  (soft-pcs-list ((if (has-value (the agent of Self)) then (:triple (the agent of Self) experiencer-of (a Be-Known with (object ((a Information with (information-content (the location of (the object of Self)))))))))))
  (add-list ((if (has-value (the base of Self)) then (:triple (the resulting-state of Self) base (the base of Self) [Conceal-add-1]))
             (:triple (the resulting-state of Self) object (the object of Self) [Conceal-add-2])))
  (preparatory-event ((:default (a Expose with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-active-verbseq-sg ("conceals"))
  (text-active-verbseq-pl ("conceal"))
  (text-passive-verbseq-sg ("gets concealed"))
  (text-passive-verbseq-pl ("get concealed"))
  (text-base ((if (has-value (the base of Self)) then ("from"))))
  (text-argslots ((:seq base instrument path result)))
  (text-nominalization ("concealment")))

;;; ----------

(Conceptual-Entity has 
  (superclasses (Intangible-Entity))
  (description ("An entity bearing conceptual content, such as a message or a bit of information."))
  (wn20-synset ((:set (:triple "abstraction" 6 "n"))))
  (subclasses (Message
               Information))
  (domain-of (information-content))
  (range-of (information-content-of)))

;;; ----------

(Conduit has 
  (superclasses (Role))
  (wn20-synset ((:set (:triple "conduit" 1 "n"))))
  (subclasses (Portal)))

(every Conduit has 
  (in-event ((a Move)))
  (played-by ((a Spatial-Entity with (path-of ((the in-event of Self)))))))

;;; ----------

(Confine has 
  (caused-by-class-of (Be-Confined))
  (superclasses (Obstruct))
  (required-slot (object
                  base))
  (primary-slot (agent
                 location))
  (cmap-correspondence ((:seq object "the object Confined")
                        (:seq agent "the Confiner")
                        (:seq location "the place where the Confine occurs")))
  (test-case ('((*prisoner has (instance-of (Physical-Object))) (*prison-cell has (instance-of (Tangible-Entity))) (a Confine with (object (*prisoner)) (base (*prison-cell))) (not (has-value (the Be-Confined object-of of *prisoner))) (do-and-next (thelast Confine)) (the text-gen of (thelast Confine)) (has-value (the Be-Confined object-of of *prisoner)) (a Move-Out-Of with (object (*prisoner)) (base (*prison-cell))) (not (try-do (thelast Move-Out-Of))) (the text-gen of (thelast Move-Out-Of)) (a Release with (object (*prisoner)) (base (*prison-cell))) (do-and-next (thelast Release)) (the text-gen of (thelast Release)) (not (has-value (the Be-Confined object-of of *prisoner))) (do-and-next (thelast Move-Out-Of)) ((the is-outside of *prisoner) includes *prison-cell))))
  (wn16-synset ((:set (:triple "confine" 3 "v") (:triple "confine" 4 "v") (:triple "enclose" 2 "v") (:triple "hold_in" 1 "v"))))
  (wn20-synset ((:set (:triple "confine" 3 "v") (:triple "confine" 4 "v") (:triple "enclose" 2 "v") (:triple "hold_in" 1 "v")))))

(every Confine has 
  (preparatory-event ((:default (a Admit with (object ((the object of Self))) (base ((the location of Self)))) (a Open with (object ((the location of Self)))) (a Enter with (object ((the object of Self))) (base ((the location of Self)))))))
  (resulting-state ((a Be-Confined)))
  (base ((a Tangible-Entity with (plays ((a Container))))))
  (object ((a Tangible-Entity)))
  (pcs-list ((:triple (the object of Self) is-inside (the base of Self) [Confine-pcs-1])))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Confine-add-1])
             (:triple (the resulting-state of Self) base (the base of Self) [Confine-add-2])))
  (text-active-verbseq-sg ("confines"))
  (text-active-verbseq-pl ("confine"))
  (text-passive-verbseq-sg ("gets confined"))
  (text-passive-verbseq-pl ("get confined"))
  (text-nominalization ("confinement")))

;;; ----------

(Connector has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "connector" 1 "n") (:triple "connection" 3 "n") (:triple "connexion" 4 "n") (:triple "connecter" 1 "n") (:triple "connective" 2 "n") (:triple "fastener" 1 "n") (:triple "fastening" 1 "n") (:triple "holdfast" 1 "n") (:triple "link" 1 "n") (:triple "nexus" 1 "n"))))
  (wn20-synset ((:set (:triple "connector" 1 "n") (:triple "connection" 3 "n") (:triple "connexion" 4 "n") (:triple "connecter" 1 "n") (:triple "connective" 2 "n") (:triple "fastener" 2 "n") (:triple "fastening" 1 "n") (:triple "holdfast" 1 "n") (:triple "link" 1 "n") (:triple "nexus" 1 "n")))))

(every Connector has 
  (in-event ((a Be-Attached-To)))
  (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self)))))))

;;; ----------

(consistency has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Consistency-Value))
  (categorical-constant-class (Consistency-Constant))
  (inverse (consistency-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "consistency" 1 "n") (:triple "consistence" 2 "n") (:triple "body" 8 "n")))))

;;; ----------

(Consistency-Constant has 
  (superclasses (Constant))
  (instances (*gritty
              *grainy
              *glassy
              *crystalline
              *granitic
              *rocky
              *stony
              *boney))
  (categorical-constant-class-of (consistency)))

;;; ----------

(consistency-of has 
  (inverse (consistency))
  (range (Tangible-Entity))
  (domain (Consistency-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Consistency-Value has 
  (superclasses (Property-Value))
  (range-of (consistency))
  (domain-of (consistency-of)))

;;; ----------

(Constant has 
  (subclasses (Worth-Constant
               Width-Constant
               Wetness-Constant
               Volume-Constant
               Voltage-Constant
               Velocity-Constant
               Truth-Constant
               Trait-Constant
               Time-Zone-Constant
               Thickness-Constant
               Texture-Constant
               Temperature-Constant
               Taste-Constant
               State-Constant
               Smell-Constant
               Slope-Constant
               Size-Constant
               Shape-Constant
               Sex-Constant
               Sentience-Constant
               Rotational-Rate-Constant
               Rate-Constant
               Radius-Constant
               Quantity-Constant
               Priority-Constant
               Primary-Constant
               Pressure-Constant
               Power-Constant
               Polarity-Constant
               Perimeter-Constant
               Orientation-Constant
               Mass-Constant
               Manner-Constant
               Luminous-Intensity-Constant
               Luminous-Flux-Constant
               Luminance-Constant
               Longitude-Constant
               Length-Constant
               Latitude-Constant
               Intensity-Constant
               Integrity-Constant
               Importance-Constant
               Height-Constant
               Frequency-Constant
               Duration-Constant
               Distance-Constant
               Direction-Constant
               Diameter-Constant
               Depth-Constant
               Density-Constant
               Day-Constant
               Consistency-Constant
               Color-Constant
               Circumference-Constant
               Capacity-Constant
               Brightness-Constant
               Breakability-Constant
               Area-Constant
               Animacy-Constant
               Angle-Constant
               Age-Constant
               Acceleration-Constant))
  (superclasses (Property-Group))
  (range-of (categorical-constant-class
             categorical-constant
             scalar-constant-class
             scalar-constant))
  (domain-of (categorical-constant-class-of
              categorical-constant-of
              scalar-constant-class-of
              scalar-constant-of)))

;;; ----------

(Construction has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "building" 2 "n") (:triple "creating_from_raw_materials" 1 "n")))))

(every Construction has 
  (text-nominalization ("construction")))

;;; ----------

(Consume has 
  (superclasses (Decrease))
  (test-case ('((*Gas has (instance-of (Entity))) (*Consume has (instance-of (Consume)) (object (*Gas)) (property-slot (volume))) ((the played-by of (the base of *Consume)) = *Gas) (do-and-next *Consume) ((the less-than of (the volume of *Gas)) includes ((in-situation (the1 prev-situation of (curr-situation)) (the volume of *Gas)))))))
  (wn20-synset ((:set (:triple "consume" 5 "v") (:triple "eat_up" 2 "v") (:triple "use_up" 1 "v") (:triple "eat" 4 "v") (:triple "deplete" 1 "v") (:triple "exhaust" 2 "v") (:triple "run_through" 2 "v") (:triple "wipe_out" 1 "v")))))

(every Consume has 
  (base ((a Resource with (played-by ((the object of Self))))))
  (object ((a Entity with (plays ((a Resource with (base-of (Self))))))))
  (text-nominalization ("consumption")))

;;; ----------

(Container has 
  (superclasses (Barrier))
  (test-case ('((*SchroedingersCat has (instance-of (Animal))) (*SchroedingersBox has (instance-of (Artifact)) (plays ((a Container with (content (*SchroedingersCat)))))) ((the content of (the plays of *SchroedingersBox)) includes *SchroedingersCat) ((the is-inside of *SchroedingersCat) includes *SchroedingersBox))))
  (wn16-synset ((:set (:triple "container" 1 "n"))))
  (wn20-synset ((:set (:triple "container" 1 "n"))))
  (domain-of (content))
  (range-of (content-of)))

(every Container has 
  (played-by ((a Tangible-Entity with (encloses ((a Spatial-Entity with (is-inside ((the played-by of Self)))))) (does-not-enclose ((a Spatial-Entity with (is-outside ((the played-by of Self)))))) (is-between ((the encloses of (the played-by of Self)) (the does-not-enclose of (the played-by of Self)))) (shape ((a Shape-Value with (value (*hollow-volume))))))))
  (in-event ((a Be-Contained with (object ((the content of Self))) (instrument ((the played-by of Self))))))
  (content ((must-be-a Tangible-Entity with (is-inside ((the played-by of Self))))))
  (capacity ((must-be-a Capacity-Value))))

;;; ----------

(content has 
  (instance-of (Meronymic-Relation))
  (domain (Container))
  (range (Entity))
  (inverse (content-of))
  (text-slot (text-content))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("contains")))

;;; ----------

(content-of has 
  (inverse (content))
  (range (Container))
  (domain (Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is the content of")))

;;; ----------

(Contract has 
  (superclasses (Decrease))
  (test-case ('((*myballon has (instance-of (Physical-Object)) (volume (*myballonsvolume))) (*myballonsvolume has (instance-of (Volume-Value)) (value ((:pair 3 *liter)))) (a Decrease with (object (*myballon)) (property-slot (volume))) ((thelast Decrease) isa Contract) (do-and-next (thelast Contract)) ((the less-than of (the volume of *myballon)) includes *myballonsvolume))))
  (wn20-synset ((:set (:triple "shrink" 4 "v") (:triple "contract" 4 "v") (:triple "contract" 6 "v")))))

(every Contract has-definition 
  (instance-of (Decrease))
  (property-slot (volume))
  (object ((a Spatial-Entity))))

(every Contract has 
  (text-nominalization ("contraction")))

;;; ----------

(Convey has 
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 recipient))
  (test-case ('((*Commence-Attack has (instance-of (Message))) (*Headquarters has (instance-of (Tangible-Entity))) (*Camp-1 has (instance-of (Tangible-Entity))) (*Convey has (instance-of (Convey)) (agent (*Headquarters)) (recipient (*Camp-1)) (object (*Commence-Attack))) (do-and-next *Convey) (the text-gen of (thelast Convey)))))
  (wn16-synset ((:set (:triple "convey" 1 "v") (:triple "convey" 2 "v") (:triple "convey" 3 "v") (:triple "impart" 4 "v") (:triple "carry" 4 "v") (:triple "express" 3 "v") (:triple "transmit" 1 "v") (:triple "communicate" 3 "v"))))
  (wn20-synset ((:set (:triple "convey" 1 "v") (:triple "convey" 2 "v") (:triple "convey" 3 "v") (:triple "impart" 4 "v") (:triple "carry" 4 "v") (:triple "express" 4 "v") (:triple "transmit" 1 "v") (:triple "communicate" 1 "v")))))

(every Convey has 
  (recipient ((a Tangible-Entity)))
  (agent ((a Tangible-Entity)))
  (object ((a Message)))
  (base ((a Tangible-Entity)))
  (first-subevent ((the Embody subevent of Self)))
  (subevent ((a Embody with (object ((the object of Self))) (agent ((the agent of Self))) (result ((the base of Self))) (next-event ((the Transmit subevent of Self))))
             (a Transmit with (object ((the base of Self))) (destination ((the recipient of Self))) (next-event ((the Receive subevent of Self))))
             (a Sense with (object ((the base of Self))) (experiencer ((the recipient of Self))) (result ((the object of Self))) (agent ((the recipient of Self))))))
  (text-nominalization ("conveying")))

;;; ----------

(Cool has 
  (superclasses (Decrease))
  (test-case ('((*mytea has (instance-of (Substance)) (temperature (*myteatemperature))) (*myteatemperature has (instance-of (Temperature-Value)) (value ((:pair *hot Substance)))) (a Decrease with (object (*mytea)) (property-slot (temperature))) ((thelast Decrease) isa Cool) (do-and-next (thelast Cool)) ((the less-than of (the temperature of *mytea)) includes *myteatemperature))))
  (wn20-synset ((:set (:triple "cool" 1 "v") (:triple "chill" 2 "v") (:triple "cool_down" 1 "v") (:triple "cool" 2 "v") (:triple "chill" 3 "v") (:triple "cool_down" 3 "v")))))

(every Cool has-definition 
  (instance-of (Decrease))
  (property-slot (temperature)))

(every Cool has 
  (text-nominalization ("cooling")))

;;; ----------

(Copy has 
  (superclasses (Create))
  (required-slot (result
                  object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq result "the copy")
                        (:seq object "the original")
                        (:seq agent "copier")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed for the copy")))
  (wn16-synset ((:set (:triple "copy" 5 "v") (:triple "re-create" 2 "v"))))
  (wn20-synset ((:set (:triple "copy" 4 "v") (:triple "re-create" 2 "v"))))
  (subclasses (Duplicate)))

(every Copy has 
  (object ((a Tangible-Entity)))
  (add-list ((if (not (the result of Self)) then (:triple Self result (an instance of (the instance-of of (the object of Self))) [Copy-add-1]))))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (text-active-verbseq-sg ("copies"))
  (text-active-verbseq-pl ("copy"))
  (text-passive-verbseq-sg ("gets copied"))
  (text-passive-verbseq-pl ("get copied"))
  (text-nominalization ("copying")))

;;; ----------

(Corporation has 
  (superclasses (Company))
  (description ("an incorporated company"))
  (wn20-synset ((:set (:triple "corporation" 1 "n") (:triple "corp" 1 "n")))))

;;; ----------

(Count-Viewpoint has 
  (superclasses (Viewpoint)))

(every Count-Viewpoint has 
  (viewpoint-question ((make-phrase (:seq "How many" (the viewpoint-filter of Self) (the2 of (the2 of (the viewpoint-query of Self))) "does" (the text-def-head of (the1 of (the2 of (the viewpoint-query of Self)))) "have?"))))
  (viewpoint-answer (((?fr == (the1 of (the2 of (the viewpoint-query of Self)))) and (?sl == (the2 of (the2 of (the viewpoint-query of Self)))) and (?va == (the3 of (the2 of (the viewpoint-query of Self)))) and (if (oneof (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 'It)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most")))) then (make-sentence (:seq (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (the (the text-slot of ?sl) of ?fr) else (:seq "--" ?sl "--"))) (andify (forall ?c in (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most")) and (?filterclass == (#'(LAMBDA () (CDDADR (KM-UNIQUE0 '?c))))) and (if (has-value (the viewpoint-filter of Self)) then (oneof (the viewpoint-filter of Self) where (It subsumes ?filterclass)) else t)) (:seq (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c))))) (#'(LAMBDA () (CADADR (KM-UNIQUE0 '?c)))) (#'(LAMBDA () (CDDADR (KM-UNIQUE0 '?c))))))))) else (if (?va isa Number) then (make-sentence (:seq (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (the (the text-slot of ?sl) of ?fr) else (:seq "--" ?sl "--"))) ?va (if (has-value (the viewpoint-filter of Self)) then (oneof (the viewpoint-filter of Self) where t) else (oneof ?sc in (the all-superclasses of (the classes of (the ?sl of ?fr))) where ((not (oneof ?c in (the classes of (the has-part of _Heart)) where (not (?sc subsumes ?c)))) and (?sc /= Thing)))))))))))
  (viewpoint-detail (((?fr == (the1 of (the2 of (the viewpoint-query of Self)))) and (?sl == (the2 of (the2 of (the viewpoint-query of Self)))) and (make-phrase (:seq "<b>" (the instance-of of ?fr) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of ?fr)) or (the description of (the instance-of of ?fr)))) (forall ?as in (the user-assumption of (the instance-of of ?fr)) (:seq "
<li>" ?as "</li>
")) "<p>
" (get-justification (:triple ?fr instance-of *)) (get-justification (:triple ?fr ?sl *))))))))

;;; ----------

(Country has 
  (superclasses (Administrative-District))
  (wn20-synset ((:set (:triple "country" 1 "n") (:triple "state" 6 "n") (:triple "land" 5 "n")))))

;;; ----------

(County has 
  (superclasses (Administrative-District))
  (wn20-synset ((:set (:triple "county" 1 "n") (:triple "county" 2 "n")))))

;;; ----------

(Cover has 
  (superclasses (Barrier))
  (description ("a barrier that prevents movement downward to something from above"))
  (wn20-synset ((:set (:triple "cover" 6 "n"))
                (:set (:triple "top" 9 "n")))))

(every Cover has 
  (played-by ((a Tangible-Entity with (is-above ((a Spatial-Entity)))))))

;;; ----------

(Create has 
  (subclasses (Sense
               Record
               Produce
               Embody
               Copy))
  (superclasses (Action))
  (required-slot (result))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq result "the thing created")
                        (:seq agent "the creator")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed for the create")))
  (test-case ('((new-situation) (a Create with (result (*Cake))) (do-and-next (thelast Create)) (the text-gen of (thelast Create)) ((the result of (thelast Create)) = *Cake) (a Create with (result ((a Aggregate))) (object ((a Entity) (a Entity)))))))
  (wn16-synset ((:set (:triple "create" 1 "v") (:triple "create" 2 "v") (:triple "make" 3 "v"))))
  (wn20-synset ((:set (:triple "create" 1 "v") (:triple "create" 2 "v") (:triple "make" 3 "v")))))

(every Create has 
  (result ((a Entity)))
  (agent ((must-be-a Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (add-list ((:triple Self result (the result of Self) [Create-add-1])
             (if (((the result of Self) isa Aggregate) and (has-value (the object of Self))) then (:triple (the result of Self) element (the object of Self)))
             (if (((the result of Self) isa Aggregate) and (has-value (the object of Self))) then (:triple (the result of Self) element-type (the object of Self)))))
  (text-active-verbseq-sg ("creates"))
  (text-active-verbseq-pl ("create"))
  (text-passive-verbseq-sg ("gets created"))
  (text-passive-verbseq-pl ("get created"))
  (text-nominalization ("creation")))

;;; ----------

(Creator has 
  (superclasses (Participant))
  (wn20-synset ((:set (:triple "creator" 2 "n")))))

(every Creator has 
  (in-event ((a Create)))
  (played-by ((a Tangible-Entity with (agent-of ((the in-event of Self)))))))

;;; ----------

(Damage has 
  (caused-by-class-of (Be-Damaged))
  (subclasses (Break))
  (superclasses (Impair))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the entity doing damage")
                        (:seq object "the thing damaged"))))

(every Damage has 
  (object ((a Tangible-Entity)))
  (resulting-state ((a Be-Damaged)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self))))
  (text-active-verbseq-sg ("damages"))
  (text-active-verbseq-pl ("damage"))
  (text-passive-verbseq-sg ("gets damaged"))
  (text-passive-verbseq-pl ("get damaged"))
  (text-nominalization ("damage")))

;;; ----------

(Day-Constant has 
  (superclasses (Constant))
  (instances (*Sunday
              *Monday
              *Tuesday
              *Wednesday
              *Thursday
              *Friday
              *Saturday))
  (range-of (time-day-of-week))
  (domain-of (time-day-of-week-of)))

;;; ----------

(dcs-list has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (inverse (dcs-list-of))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(dcs-list-of has 
  (inverse (dcs-list))
  (range (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Deactivate has 
  (defeated-by-class-of (Be-Activated))
  (superclasses (Make-Inaccessible))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "The thing deactivated")
                        (:seq agent "The deactivator")
                        (:seq instrument "instrument")))
  (wn16-synset ((:set (:triple "deactivate" 1 "v") (:triple "disable" 1 "v") (:triple "disenable" 1 "v") (:triple "inactivate" 1 "v") (:triple "incapacitate" 1 "v"))))
  (wn20-synset ((:set (:triple "deactivate" 2 "v") (:triple "disable" 1 "v") (:triple "disenable" 1 "v") (:triple "inactivate" 2 "v") (:triple "incapacitate" 1 "v")))))

(every Deactivate has 
  (preparatory-event ((:default (a Activate with (object ((the object of Self)))))))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Activated))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Activated) [Deactivate-pcs-1]))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Deactivate-del-1]))))
  (text-active-verbseq-sg ("deactivates"))
  (text-active-verbseq-pl ("deactivate"))
  (text-passive-verbseq-sg ("gets deactivated"))
  (text-passive-verbseq-pl ("get deactivated"))
  (text-argslots ((:seq base instrument path result)))
  (text-nominalization ("deactivation")))

;;; ----------

(Deceive has 
  (superclasses (Lie))
  (required-slot (agent
                  object
                  recipient))
  (test-case ('((*big-fat-lie has (instance-of (Information)) (truth ((a Truth-Value with (value (*false)))))) (*Guy has (instance-of (Tangible-Entity))) (*Girl has (instance-of (Tangible-Entity))) (*deceives has (instance-of (Deceive)) (agent (*Guy)) (recipient (*Girl)) (object (*big-fat-lie))) (do-and-next *deceives) (the pcs-list of *deceives) (the experiencer of (the Be-Known object-of of *big-fat-lie)) (oneof (the Be-Known experiencer-of of *Guy) where ((the object of It) = *big-fat-lie)) (do-and-next (the objective of *deceives)) (oneof (the Be-Known experiencer-of of *Girl) where ((the object of It) = *big-fat-lie)) ((the value of (the truth of (the object of (thelast Be-Known)))) = *false))))
  (wn16-synset ((:set (:triple "deceive" 1 "v") (:triple "deceive" 2 "v") (:triple "lead_on" 2 "v") (:triple "delude" 1 "v") (:triple "cozen" 1 "v") (:triple "betray" 6 "v") (:triple "lead_astray" 3 "v"))))
  (wn20-synset ((:set (:triple "deceive" 1 "v") (:triple "deceive" 2 "v") (:triple "lead_on" 2 "v") (:triple "delude" 1 "v") (:triple "cozen" 1 "v") (:triple "betray" 6 "v") (:triple "lead_astray" 3 "v")))))

(every Deceive has-definition 
  (instance-of (Lie))
  (causes ((the objective of Self))))

(every Deceive has 
  (recipient ((a Tangible-Entity)))
  (objective ((a Interpret with (agent ((the recipient of Self))) (object ((the result of Self))))))
  (causes ((the objective of Self)))
  (text-nominalization ("deception")))

;;; ----------

(Decrease has 
  (subclasses (Shorten
               Narrow
               Dry
               Dim
               Cool
               Contract
               Consume))
  (superclasses (Action))
  (wn20-synset ((:set (:triple "decrease" 1 "v") (:triple "diminish" 1 "v") (:triple "lessen" 1 "v") (:triple "fall" 7 "v") (:triple "decrease" 2 "v") (:triple "lessen" 2 "v") (:triple "minify" 1 "v"))))
  (domain-of (from-value
              property-slot
              to-value))
  (range-of (from-value-of
             property-slot-of
             to-value-of)))

(every Decrease has 
  (property-slot ((a Property)))
  (from-value ((in-situation (curr-situation) (the (the property-slot of Self) of (the object of Self)))))
  (pcs-list ((:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self))))
             [Decrease-pcs-1]))
  (del-list ((:triple (the object of Self) (the property-slot of Self) * [Decrease-del-1])))
  (add-list ((:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self)) with (less-than ((in-situation (the before-situation of Self) (the (the property-slot of Self) of (the object of Self)))))))
             [Decrease-add-1]))
  (text-nominalization ("decrease")))

;;; ----------

(defeated-by has 
  (inverse (defeats))
  (range (Action))
  (domain (State))
  (instance-of (Causal-Relation))
  (text-gloss ("is defeated by")))

;;; ----------

(defeated-by-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(defeated-by-class-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(defeats has 
  (instance-of (Causal-Relation))
  (domain (Action))
  (range (State))
  (inverse (defeated-by))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t))
  (cardinality (N-to-N))
  (text-gloss ("defeats")))

;;; ----------

(Defense has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "defense" 4 "n") (:triple "protection" 1 "n")))))

(every Defense has 
  (text-nominalization ("defense")))

;;; ----------

(Deliver has 
  (superclasses (Transfer))
  (required-slot (recipient
                  object))
  (primary-slot (agent
                 donor
                 instrument))
  (cmap-correspondence ((:seq agent "the Deliverer")
                        (:seq donor "the original possessor")
                        (:seq instrument "the thing used to Deliver")
                        (:seq object "the thing Delivered")
                        (:seq recipient "the final possessor")))
  (test-case ('((*Pizza has (instance-of (Tangible-Entity))) (*Dominoes has (instance-of (Tangible-Entity)) (possesses (*Pizza))) (*Delivery-Guy has (instance-of (Tangible-Entity))) (*Albert has (instance-of (Tangible-Entity))) (*Deliver has (instance-of (Deliver)) (donor (*Dominoes)) (agent (*Delivery-Guy)) (recipient (*Albert)) (object (*Pizza))) (do-and-next *Deliver) (the text-gen of (thelast Deliver)) ((the possesses of *Dominoes) = nil) ((the possesses of *Albert) = *Pizza) ((the agent of *Deliver) = *Delivery-Guy) (((the agent of *Deliver) /= (the donor of *Deliver)) and ((the agent of *Deliver) /= (the recipient of *Deliver))))))
  (wn16-synset ((:set (:triple "deliver" 3 "v") (:triple "hand_over" 1 "v") (:triple "get_in" 3 "v") (:triple "render" 9 "v") (:triple "turn_in" 3 "v"))))
  (wn20-synset ((:set (:triple "deliver" 3 "v") (:triple "hand_over" 1 "v") (:triple "get_in" 3 "v") (:triple "render" 8 "v") (:triple "turn_in" 2 "v")))))

(every Deliver has 
  (recipient ((a Tangible-Entity)))
  (agent ((constraint ((not ((the donor of Self) includes TheValue)) and (not ((the recipient of Self) includes TheValue))))))
  (soft-pcs-list ((if (has-value (the agent of Self)) then (:triple (the agent of Self) abuts (the object of Self)))))
  (text-active-verbseq-sg ("delivers"))
  (text-active-verbseq-pl ("deliver"))
  (text-passive-verbseq-sg ("gets delivered"))
  (text-passive-verbseq-pl ("get delivered"))
  (text-nominalization ("delivery")))

;;; ----------

(density has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Density-Value))
  (scale-class (Density-Scale))
  (scalar-constant-class (Density-Constant))
  (cardinal-unit-class (UoM-Density))
  (inverse (density-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "density" 1 "n") (:triple "denseness" 3 "n")))))

;;; ----------

(Density-Constant has 
  (superclasses (Constant))
  (instances (*dense
              *rare))
  (scalar-constant-class-of (density))
  (element-type-of (*rare-dense-scale)))

;;; ----------

(density-of has 
  (inverse (density))
  (range (Tangible-Entity))
  (domain (Density-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Density-Scale has 
  (superclasses (Scale))
  (scale-class-of (density))
  (instances (*rare-dense-scale)))

;;; ----------

(Density-Value has 
  (superclasses (Property-Value))
  (test-case ('((Drink has (superclasses (Substance))) (Ice has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (density ((a Density-Value)))) (*mybeer has (instance-of (Drink)) (density ((a Density-Value with (value ((:pair 23 *gram/liter) (:pair *rare Drink) (:pair *dense Ice))) (less-than ((the density of *mycoffee))))))) (the value of (the density of *mybeer)) ((the less-than of (the density of *mybeer)) includes (the density of *mycoffee)) ((the greater-than of (the density of *mycoffee)) includes (the density of *mybeer)))))
  (range-of (density))
  (domain-of (density-of)))

;;; ----------

(Department has 
  (superclasses (Organization))
  (description ("an organization that is part of an institution"))
  (wn20-synset ((:set (:triple "department" 1 "n") (:triple "section" 11 "n")))))

(every Department has 
  (is-part-of ((must-be-a Institution))))

;;; ----------

(depth has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Depth-Scale))
  (scalar-constant-class (Depth-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (depth-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "depth" 1 "n")))))

;;; ----------

(Depth-Constant has 
  (superclasses (Constant))
  (instances (*shallow
              *deep))
  (scalar-constant-class-of (depth))
  (element-type-of (*shallow-deep-scale)))

;;; ----------

(depth-of has 
  (inverse (depth))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Depth-Scale has 
  (superclasses (Scale))
  (scale-class-of (depth))
  (instances (*shallow-deep-scale)))

;;; ----------

(description has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(description-of has 
  (range (Thing))
  (domain (String))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(destination has 
  (required-slot-of (Absorb
                     Come-Together
                     Go-To
                     Invade
                     Move-Into
                     Move-Together
                     Take-In
                     Trespass))
  (primary-slot-of (Carry
                    Emit
                    Enter
                    Exit
                    Fall
                    Go-Through
                    Leave
                    Load
                    Move-Through
                    Move
                    Send
                    Slide))
  (instance-of (Spatial-Relation))
  (domain (Event))
  (range (Spatial-Entity))
  (inverse (destination-of))
  (text-slot (text-destination))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(destination-of has 
  (inverse (destination))
  (range (Event))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is the destination of")))

;;; ----------

(Destroy has 
  (superclasses (Break))
  (wn20-synset ((:set (:triple "destroy" 1 "v") (:triple "destruct" 2 "v") (:triple "destroy" 2 "v") (:triple "ruin" 1 "v") (:triple "demolish" 3 "v") (:triple "destroy" 3 "v") (:triple "destroy" 4 "v")))))

(every Destroy has 
  (text-nominalization ("destruction")))

;;; ----------

(Destruction has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "destruction" 1 "n") (:triple "termination" 5 "n") (:triple "demolition" 1 "n")))))

(every Destruction has 
  (text-nominalization ("destruction")))

;;; ----------

(Detach has 
  (defeated-by-class-of (Be-Attached-To))
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "the object(s) being detached")
                        (:seq base "the object being detached from")))
  (test-case ('((*bumper has (instance-of (Physical-Object))) (*sticker has (instance-of (Physical-Object))) (a Attach with (object (*sticker)) (base (*bumper))) (not ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper)) (do-and-next (thelast Attach)) (the text-gen of (thelast Attach)) ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper) (a Detach with (object (*sticker)) (base (*bumper))) (do-and-next (thelast Detach)) (the text-gen of (thelast Detach)) ((the defeats of (thelast Detach)) includes ((thelast Be-Attached-To))) (not ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper)))))
  (wn16-synset ((:set (:triple "detach" 1 "v") (:triple "detach" 3 "v") (:triple "come_off" 1 "v") (:triple "come_away" 1 "v"))))
  (wn20-synset ((:set (:triple "detach" 1 "v") (:triple "detach" 3 "v") (:triple "come_off" 1 "v") (:triple "come_away" 1 "v")))))

(every Detach has 
  (object ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
  (base ((exactly 1 Tangible-Entity)
         (a Tangible-Entity)))
  (soft-pcs-list ((forall (the object of Self) where t (:triple It object-of (a Be-Attached-To)))))
  (defeats ((allof (the object-of of (the base of Self)) where (((the classes of It) = Be-Attached-To) and ((the object of It) includes (the object of Self))))))
  (del-list ((forall (the defeats of Self) (:set (forall2 (the object of It) (:triple It2 object-of It)) (:triple It object (the object of It))))))
  (text-base ((if (has-value (the base of Self)) then ("from"))))
  (text-active-verbseq-sg ("detaches"))
  (text-active-verbseq-pl ("detach"))
  (text-passive-verbseq-sg ("gets detached"))
  (text-passive-verbseq-pl ("get detached"))
  (preparatory-event ((:default (a Attach with (object ((the object of Self))) (base ((the base of Self)))))))
  (text-nominalization ("detachment")))

;;; ----------

(Detailed-Instance has 
  (description ("Instances of this class are things that do not necessarily exist but serve to represent what is within the scope of non-abnormal posssibility.  Instances of this class should be instance of another class which we refer to here as the reference class.  The name of instances of this class should be of the form `*Detailed-Instance-of-Foo' such that Foo corresponds to its reference class.  For example, to express the fact that `It is not unusual for some laptop computers to have a sound card' one could reify *Detailed-Instance-of-Laptop-Computer and assert that it has a Sound-Card as a part.  In contrast, see Typical-Instance."))
  (superclasses (KM-Class)))

;;; ----------

(Development has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "development" 1 "n") (:triple "improvement" 1 "n"))))
  (subclasses (Engineering)))

(every Development has 
  (text-nominalization ("development")))

;;; ----------

(Device has 
  (superclasses (Artifact))
  (description ("an artifact with an instrumental purpose"))
  (wn20-synset ((:set (:triple "device" 1 "n") (:triple "instrumentality" 3 "n") (:triple "instrumentation" 1 "n")))))

(every Device has 
  (purpose ((a Instrument-Role))))

;;; ----------

(diameter has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Diameter-Scale))
  (scalar-constant-class (Diameter-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (diameter-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "diameter" 1 "n") (:triple "diam" 1 "n")))))

;;; ----------

(Diameter-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (diameter)))

;;; ----------

(diameter-of has 
  (inverse (diameter))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Diameter-Scale has 
  (superclasses (Scale))
  (scale-class-of (diameter)))

;;; ----------

(Dim has 
  (superclasses (Decrease))
  (test-case ('((*mylamp has (instance-of (Physical-Object)) (brightness (*mylampsbrightness))) (*mylampsbrightness has (instance-of (Brightness-Value)) (value ((:pair *blinding Physical-Object)))) (a Decrease with (object (*mylamp)) (property-slot (brightness))) ((thelast Decrease) isa Dim) (do-and-next (thelast Dim)) ((the less-than of (the brightness of *mylamp)) includes *mylampsbrightness))))
  (wn20-synset ((:set (:triple "dim" 1 "v") (:triple "dip" 5 "v") (:triple "darken" 2 "v") (:triple "dim" 2 "v") (:triple "dim" 3 "v") (:triple "dim" 4 "v")))))

(every Dim has-definition 
  (instance-of (Decrease))
  (property-slot (brightness)))

(every Dim has 
  (text-nominalization ("dimming")))

;;; ----------

(Dinner has 
  (superclasses (Meal))
  (wn20-synset ((:set (:triple "dinner" 1 "n"))
                (:set (:triple "dinner" 2 "n"))
                (:set (:triple "dinner_party" 1 "n")))))

(every Dinner has 
  (text-nominalization ("dinner")))

;;; ----------

(direction has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Angle-Value))
  (scalar-constant-class (Direction-Constant))
  (cardinal-unit-class (UoM-Angle))
  (inverse (direction-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "direction" 1 "n") (:triple "direction" 2 "n") (:triple "way" 7 "n")))))

;;; ----------

(Direction-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (direction)))

;;; ----------

(direction-of has 
  (inverse (direction))
  (range (Event))
  (domain (Angle-Value))
  (instance-of (EventProperty)))

;;; ----------

(Direction-Scale has 
  (superclasses (Scale)))

;;; ----------

(Discourse has 
  (superclasses (Interaction))
  (description ("a communicative exchange"))
  (wn20-synset ((:set (:triple "discourse" 1 "n")))))

(every Discourse has 
  (text-nominalization ("discourse")))

;;; ----------

(Discovery has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "discovery" 1 "n") (:triple "find" 2 "n") (:triple "uncovering" 2 "n")))))

(every Discovery has 
  (text-nominalization ("discovery")))

;;; ----------

(Discussion has 
  (superclasses (Interaction))
  (description ("a discourse between two or more conversants with free-flowing dialog on a particular topic or topics"))
  (wn20-synset ((:set (:triple "discussion" 1 "n") (:triple "treatment" 4 "n") (:triple "discourse" 3 "n") (:triple "discussion" 2 "n") (:triple "give-and-take" 1 "n") (:triple "word" 7 "n")))))

(every Discussion has 
  (text-nominalization ("discussion")))

;;; ----------

(disjunctive-next-events has 
  (instance-of (Meronymic-Relation))
  (superslots (next-event))
  (domain (Event))
  (range (Event))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(disjunctive-next-events-of has 
  (range (Event))
  (domain (Event))
  (instance-of (Meronymic-Relation)))

;;; ----------

(Disperse has 
  (superclasses (Action))
  (required-slot (object
                  origin))
  (primary-slot (subevent))
  (cmap-correspondence ((:seq object "the things dispersing")
                        (:seq origin "dispersed from")
                        (:seq subevent "subevents")))
  (test-case ('((*Tim has (instance-of (Living-Entity))) (*Ken has (instance-of (Living-Entity))) (*Mall has (instance-of (Physical-Object))) (*Tim has (is-at (*Mall))) (*Ken has (is-at (*Mall))) (a Disperse with (object (*Ken *Tim)) (origin (*Mall))) (do-script (thelast Disperse)) (the text-gen of (thelast Disperse)) ((the location of *Tim) /= *Mall) (not ((the is-at of *Tim) includes *Mall)) ((the location of *Ken) /= *Mall) (not ((the is-at of *Ken) includes *Mall)) (forall (the subevent of (thelast Disperse)) ((It isa Leave) and ((:set *Tim *Ken) includes (the object of It)))) (forall (the subevent of (thelast Disperse)) (the text-gen of It)))))
  (wn16-synset ((:set (:triple "disperse" 2 "v") (:triple "disperse" 4 "v") (:triple "break_up" 1 "v") (:triple "dispel" 2 "v") (:triple "dissipate" 1 "v") (:triple "dissipate" 2 "v") (:triple "scatter" 1 "v") (:triple "scatter" 2 "v") (:triple "spread_out" 6 "v"))))
  (wn20-synset ((:set (:triple "disperse" 2 "v") (:triple "disperse" 3 "v") (:triple "break_up" 1 "v") (:triple "dispel" 2 "v") (:triple "dissipate" 1 "v") (:triple "dissipate" 2 "v") (:triple "scatter" 1 "v") (:triple "scatter" 2 "v") (:triple "spread_out" 6 "v")))))

(every Disperse has 
  (object ((at-least 2 Tangible-Entity)
           (a Tangible-Entity)
           (a Tangible-Entity)))
  (origin ((exactly 1 Spatial-Entity)
           (a Spatial-Entity)))
  (first-subevent ((the subevent of Self)))
  (subevent ((forall (the object of Self) (a Leave with (object (It)) (agent (It)) (origin ((the origin of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (destination ((if (has-value (the destination of Self)) then (the destination of Self))))))))
  (text-active-verbseq-sg ("disperses"))
  (text-active-verbseq-pl ("disperse"))
  (text-passive-verbseq-sg ("gets dispersed"))
  (text-passive-verbseq-pl ("get dispersed"))
  (text-nominalization ("dispersion")))

;;; ----------

(distance has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Length-Value))
  (scale-class (Distance-Scale))
  (scalar-constant-class (Distance-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (distance-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "distance" 1 "n") (:triple "displacement" 3 "n") (:triple "translation" 7 "n")))))

;;; ----------

(Distance-Constant has 
  (superclasses (Constant))
  (instances (*near
              *far
              *long))
  (scalar-constant-class-of (distance))
  (element-type-of (*near-far-scale)))

;;; ----------

(distance-of has 
  (inverse (distance))
  (range (Event))
  (domain (Length-Value))
  (instance-of (EventProperty)))

;;; ----------

(Distance-Scale has 
  (superclasses (Scale))
  (scale-class-of (distance))
  (instances (*near-far-scale)))

;;; ----------

(Distribution has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "distribution" 4 "n") (:triple "commerce" 1 "n") (:triple "mercantilism" 2 "n") (:triple "commercialism" 1 "n")))))

(every Distribution has 
  (text-nominalization ("distribution")))

;;; ----------

(Dive has 
  (superclasses (Let-Fall))
  (wn20-synset ((:set (:triple "dive" 2 "v")))))

(every Dive has 
  (agent ((a Animal)))
  (object ((the agent of Self)))
  (caused-by ((a Propel with (agent ((the agent of Self))) (object ((the object of Self))) (origin ((the origin of Self))))))
  (text-active-verbseq-sg ("dives"))
  (text-active-verbseq-pl ("dive"))
  (text-argslots ((:seq origin destination)))
  (text-nominalization ("diving")))

;;; ----------

(Divide has 
  (superclasses (Break))
  (required-slot (object))
  (cmap-correspondence ((:seq agent "the Divider")
                        (:seq object "the thing Divided")
                        (:seq instrument "the thing used to Divide")))
  (wn16-synset ((:set (:triple "divide" 1 "v") (:triple "carve_up" 1 "v") (:triple "dissever" 1 "v") (:triple "separate" 4 "v") (:triple "split" 1 "v") (:triple "split_up" 2 "v"))))
  (wn20-synset ((:set (:triple "divide" 1 "v") (:triple "carve_up" 1 "v") (:triple "dissever" 1 "v") (:triple "separate" 4 "v") (:triple "split" 1 "v") (:triple "split_up" 2 "v")))))

(every Divide has 
  (add-list ((:triple Self result (an instance of (the instance-of of (the object of Self)) with (uniquely-called ("result1")) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (animacy ((the animacy of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self))))) [Divide-add-1])
             (:triple Self result (an instance of (the instance-of of (the object of Self)) with (uniquely-called ("result2")) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (animacy ((the animacy of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self))))) [Divide-add-2])))
  (text-active-verbseq-sg ("divides"))
  (text-active-verbseq-pl ("divide"))
  (text-passive-verbseq-sg ("gets divided"))
  (text-passive-verbseq-pl ("get divided"))
  (text-argslots ((:seq base instrument result)))
  (text-result ("into"))
  (text-nominalization ("division")))

;;; ----------

(doc-file has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(doc-file-of has 
  (range (Thing))
  (domain (String))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Document has 
  (superclasses (Message))
  (description ("a written message"))
  (wn20-synset ((:set (:triple "document" 1 "n") (:triple "written_document" 1 "n") (:triple "papers" 1 "n") (:triple "document" 2 "n") (:triple "document" 3 "n")))))

(every Document has 
  (result-of ((a Write))))

;;; ----------

(does-not-enclose has 
  (inverse (is-outside))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("does not enclose")))

;;; ----------

(Donate has 
  (superclasses (Give))
  (required-slot (beneficiary
                  recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq beneficiary "beneficiary")
                        (:seq object "the thing donated")
                        (:seq agent "donor")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*TV has (instance-of (Tangible-Entity))) (*Mary has (instance-of (Tangible-Entity)) (possesses (*TV))) (*Salvation-Army has (instance-of (Tangible-Entity))) (*Donate has (instance-of (Donate)) (donor (*Mary)) (recipient (*Salvation-Army)) (beneficiary (*Salvation-Army)) (object (*TV))) (do-and-next *Donate) (the text-gen of (thelast Donate)) ((the possesses of *Mary) /= *TV) ((the possesses of *Salvation-Army) = *TV) ((the possesses of (the beneficiary of *Donate)) = *TV))))
  (wn16-synset ((:set (:triple "donate" 1 "v"))))
  (wn20-synset ((:set (:triple "donate" 1 "v")))))

(every Donate has 
  (beneficiary ((a Tangible-Entity)))
  (text-active-verbseq ("donates"))
  (text-passive-verbseq ((if ((the number of (the object of Self)) > 1) then ("are donated") else ("is donated"))))
  (text-nominalization ("donation")))

;;; ----------

(donor has 
  (primary-slot-of (Deliver
                    Obtain
                    Receive
                    Transfer))
  (required-slot-of (Donate
                     Feed
                     Give
                     Lose
                     Relinquish
                     Send
                     Supply
                     Take))
  (instance-of (Participant-Relation
                Agentive-Relation))
  (domain (Event))
  (range (Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (donor-of))
  (text-slot (text-donor))
  (cardinality (N-to-N))
  (text-gloss ("is from")))

;;; ----------

(donor-of has 
  (inverse (donor))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation
                Agentive-Relation))
  (text-gloss ("is the donor of")))

;;; ----------

(Donor-Role has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "donor" 1 "n") (:triple "donor" 2 "n") (:triple "giver" 2 "n") (:triple "presenter" 1 "n"))))
  (wn20-synset ((:set (:triple "donor" 1 "n") (:triple "donor" 2 "n") (:triple "giver" 2 "n") (:triple "presenter" 3 "n")))))

(every Donor-Role has 
  (in-event ((must-be-a Transfer)))
  (played-by ((a Entity with (donor-of ((the in-event of Self)))))))

;;; ----------

(Drawer has 
  (superclasses (Furniture))
  (wn20-synset ((:set (:triple "drawer" 1 "n")))))

;;; ----------

(Dry has 
  (superclasses (Decrease))
  (test-case ('((*mytowel has (instance-of (Physical-Object)) (wetness (*mytowelwetness))) (*mytowelwetness has (instance-of (Wetness-Value)) (value ((:pair *damp Physical-Object)))) (a Decrease with (object (*mytowel)) (property-slot (wetness))) ((thelast Decrease) isa Dry) (do-and-next (thelast Dry)) ((the less-than of (the wetness of *mytowel)) includes *mytowelwetness))))
  (wn20-synset ((:set (:triple "dry" 1 "v") (:triple "dry_out" 3 "v") (:triple "dry" 2 "v") (:triple "dry_out" 1 "v")))))

(every Dry has-definition 
  (instance-of (Decrease))
  (property-slot (wetness)))

(every Dry has 
  (text-nominalization ("drying")))

;;; ----------

(Duplicate has 
  (superclasses (Copy))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of
                 result))
  (cmap-correspondence ((:seq result "the Duplicate")
                        (:seq object "the original")
                        (:seq agent "copier")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed for the Duplicate")))
  (test-case ('((new-situation) (Sheep has (superclasses (Tangible-Entity))) (*Dolly has (instance-of (Sheep)) (color (*white)) (sex (*female)) (height (*4)) (length (*5)) (mass (*200)) (age (*5))) (a Duplicate with (object (*Dolly))) (do-and-next (thelast Duplicate)) (the text-gen of (thelast Duplicate)) ((the classes of (the result of (thelast Duplicate))) = Sheep) ((the color of (the result of (thelast Duplicate))) = *white) ((the sex of (the result of (thelast Duplicate))) = *female) ((the height of (the result of (thelast Duplicate))) = *4) ((the length of (the result of (thelast Duplicate))) = *5) ((the mass of (the result of (thelast Duplicate))) = *200) ((the age of (the result of (thelast Duplicate))) = *5))))
  (wn16-synset ((:set (:triple "duplicate" 1 "v") (:triple "double" 5 "v") (:triple "repeat" 2 "v") (:triple "replicate" 1 "v"))))
  (wn20-synset ((:set (:triple "duplicate" 1 "v") (:triple "double" 6 "v") (:triple "repeat" 2 "v") (:triple "replicate" 3 "v")))))

(every Duplicate has 
  (object ((a Tangible-Entity)))
  (add-list ((:triple Self result (a Tangible-Entity with (instance-of ((the instance-of of (the object of Self)))) (content ((forall (the content of (the object of Self)) ((an instance of (the instance-of of It)))))) (has-part ((forall (the has-part of (the object of Self)) ((an instance of (the instance-of of It)))))) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (age ((the age of (the object of Self)))) (animacy ((the animacy of (the object of Self)))) (area ((the area of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (capacity ((the capacity of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (depth ((the depth of (the object of Self)))) (height ((the height of (the object of Self)))) (length ((the length of (the object of Self)))) (mass ((the mass of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (shape ((the shape of (the object of Self)))) (size ((the size of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (thickness ((the thickness of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self)))) (width ((the width of (the object of Self)))) (volume ((the volume of (the object of Self))))) [Duplicate-add-1])))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (text-active-verbseq ("duplicates"))
  (text-passive-verbseq ((if ((the number of (the object of Self)) > 1) then ("get duplicated") else ("gets duplicated"))))
  (text-nominalization ("duplication")))

;;; ----------

(duration has 
  (instance-of (EventProperty))
  (domain (Event
           Time-Interval))
  (range (Duration-Value))
  (scalar-constant-class (Duration-Constant))
  (cardinal-unit-class (UoM-Duration))
  (scale-class (Duration-Scale))
  (inverse (duration-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "duration" 1 "n") (:triple "duration" 2 "n") (:triple "duration" 3 "n") (:triple "continuance" 2 "n") (:triple "continuance" 3 "n") (:triple "time" 5 "n")))))

;;; ----------

(Duration-Constant has 
  (superclasses (Constant))
  (instances (*forever
              *brief
              *long))
  (scalar-constant-class-of (duration))
  (element-type-of (*forever-brief-scale)))

;;; ----------

(duration-of has 
  (inverse (duration))
  (range (Time-Interval
          Event))
  (domain (Duration-Value))
  (instance-of (EventProperty)))

;;; ----------

(Duration-Scale has 
  (superclasses (Scale))
  (scale-class-of (duration))
  (instances (*forever-brief-scale)))

;;; ----------

(Duration-Value has 
  (superclasses (Property-Value))
  (doc-file ("duration"))
  (test-case ('((BasketballGame has (superclasses (Event))) (CakeBake has (superclasses (Event))) (*baking-my-cake has (instance-of (CakeBake)) (duration ((a Duration-Value)))) (*lakers-vs-6ers has (instance-of (BasketballGame)) (duration ((a Duration-Value with (value ((:pair 3 *hour) (:pair *brief Event))) (same-as ((the duration of *baking-my-cake))))))) (the value of (the duration of *lakers-vs-6ers)) ((the same-as of (the duration of *lakers-vs-6ers)) includes (the duration of *baking-my-cake)) (Drink has (superclasses (Substance))) (*Coca-cola has (instance-of (Drink)) (age ((a Duration-Value)))) (*LaRoche30year has (instance-of (Drink)) (age ((a Duration-Value with (value ((:pair 30 *year) (:pair *old Drink))) (greater-than ((the age of *Coca-cola))))))) (the value of (the age of *LaRoche30year)) ((the greater-than of (the age of *LaRoche30year)) includes (the age of *Coca-cola)) ((the less-than of (the age of *Coca-cola)) includes (the age of *LaRoche30year)))))
  (range-of (age
             duration))
  (domain-of (age-of
              duration-of)))

(every Duration-Value has 
  (primary-slot (duration)))

;;; ----------

(Eat has 
  (superclasses (Take-In))
  (required-slot (agent
                  object))
  (wn20-synset ((:set (:triple "eat" 1 "v") (:triple "eat" 2 "v") (:triple "feed" 6 "v") (:triple "eat" 3 "v")))))

(every Eat has 
  (agent ((a Animal)))
  (object ((a Tangible-Entity with (plays ((a Food))))))
  (text-active-verbseq-sg ("eats"))
  (text-active-verbseq-pl ("eat"))
  (text-nominalization ("eating")))

;;; ----------

(Edit has 
  (superclasses (Action))
  (required-slot (object))
  (description ("To change the content of a document"))
  (wn20-synset ((:set (:triple "edit" 1 "v") (:triple "redact" 2 "v") (:triple "revise" 1 "v") (:triple "rewrite" 1 "v")))))

(every Edit has 
  (object ((a Document)))
  (text-nominalization ("editing")))

;;; ----------

(edit-state has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(edit-state-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Educational-Institution has 
  (superclasses (Institution))
  (description ("an institution for teaching, studying, research, etc."))
  (wn20-synset ((:set (:triple "educational_institution" 1 "n") (:triple "school" 1 "n"))))
  (subclasses (University)))

;;; ----------

(element has 
  (instance-of (Meronymic-Relation))
  (domain (Aggregate))
  (range (Thing))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (text-gloss ("has as element")))

;;; ----------

(element-of has 
  (range (Aggregate))
  (domain (Thing))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is an element of")))

;;; ----------

(Elevator has 
  (superclasses (Room))
  (wn20-synset ((:set (:triple "elevator" 1 "n") (:triple "lift" 8 "n")))))

;;; ----------

(Embody has 
  (superclasses (Create))
  (required-slot (object
                  result))
  (wn16-synset ((:set (:triple "embody" 3 "v"))))
  (wn20-synset ((:set (:triple "embody" 3 "v"))))
  (subclasses (Speak
               Mark
               Gesticulate)))

(every Embody has 
  (object ((a Message)))
  (result ((a Tangible-Entity)))
  (text-nominalization ("embodiment")))

;;; ----------

(Emit has 
  (superclasses (Move))
  (required-slot (object
                  origin))
  (primary-slot (agent
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing emitted")
                        (:seq base "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq origin "original location")
                        (:seq path "the portal")))
  (test-case ('((*Sun has (instance-of (Physical-Object)) (location ((a Place)))) (*Earth has (instance-of (Physical-Object)) (location ((a Place)))) (*SunLight has (instance-of (Energy)) (location ((a Place)))) (a Emit with (object (*SunLight)) (origin (*Sun)) (destination (*Earth))) (do-and-next (thelast Emit)) (the text-gen of (thelast Emit)) ((the location of *SunLight) = (the location of *Earth)) ((the location of *SunLight) /= (the location of *Sun)) (new-situation) (*stink-bomb has (instance-of (Physical-Object)) (location ((a Place)))) (*noisome-fumes has (instance-of (Fluid-Substance)) (location ((a Place)))) (a Emit with (object (*noisome-fumes)) (instrument (*stink-bomb))) (do-and-next (thelast Emit)) ((the origin of (thelast Emit)) = *stink-bomb) (not ((the location of *noisome-fumes) = (the location of *stink-bomb))))))
  (wn16-synset ((:set (:triple "emit" 2 "v") (:triple "give_out" 1 "v") (:triple "give_off" 2 "v"))))
  (wn20-synset ((:set (:triple "emit" 2 "v") (:triple "give_out" 1 "v") (:triple "give_off" 2 "v")))))

(every Emit has 
  (text-active-verbseq-sg ("emits"))
  (text-active-verbseq-pl ("emit"))
  (text-passive-verbseq-sg ("gets emitted"))
  (text-passive-verbseq-pl ("get emitted"))
  (object ((constraint ((TheValue &? (a Fluid-Substance)) or (TheValue &? (a Energy))))))
  (origin (((a Spatial-Entity) & (if (has-value (the agent of Self)) then (the agent of Self) else (if (has-value (the instrument of Self)) then (the instrument of Self))))))
  (text-nominalization ("emission")))

;;; ----------

(enabled-by has 
  (inverse (enables))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-gloss ("is enabled by")))

;;; ----------

(enables has 
  (required-slot-of (Supply))
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (enabled-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("enables")))

;;; ----------

(encloses has 
  (inverse (is-inside))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (wn20-synset ((:set (:triple "enclose" 0 "n"))))
  (text-gloss ("encloses")))

;;; ----------

(Energy has 
  (subclasses (Sound
               Light
               Chemical-Energy))
  (superclasses (Tangible-Entity))
  (description ("The capacity to do work."))
  (wn20-synset ((:set (:triple "energy" 1 "n")))))

;;; ----------

(Engineering has 
  (superclasses (Development))
  (wn20-synset ((:set (:triple "technology" 1 "n") (:triple "application" 2 "n") (:triple "profession" 2 "n")))))

(every Engineering has 
  (text-nominalization ("engineering")))

;;; ----------

(Ensemble has 
  (superclasses (Aggregate))
  (description ("A collection of distinct structures which function 
                        together to carry out some task, as the respiratory
                        enzyme complex on mitochondrial membranes."))
  (wn16-synset ((:set (:triple "ensemble" 4 "n") (:triple "tout_ensemble" 1 "n"))))
  (wn20-synset ((:set (:triple "ensemble" 4 "n") (:triple "tout_ensemble" 1 "n")))))

;;; ----------

(Enter has 
  (superclasses (Move-Into
                 Reflexive-Cliche))
  (required-slot (agent
                  object
                  base))
  (primary-slot (destination
                 origin
                 path))
  (cmap-correspondence ((:seq agent "the enter'er")
                        (:seq object "the enter'er")
                        (:seq base "the enclosure")
                        (:seq destination "final location")
                        (:seq origin "original location")
                        (:seq path "the portal")))
  (test-case ('((*John has (instance-of (Living-Entity)) (is-outside (*House))) (*Enter-doorway has (instance-of (Spatial-Entity))) (*House-Location has (instance-of (Place))) (*House has (instance-of (Physical-Object)) (location (*House-Location))) (a Move-Into with (agent (*John)) (object (*John))) ((thelast Move-Into) isa Enter) (the text-gen of (thelast Enter)) (a Enter with (agent (*John)) (base (*House)) (path (*Enter-doorway))) (do-and-next (thelast Enter)) (the text-gen of (thelast Enter)) ((the path of (thelast Enter)) = *Enter-doorway) ((the content of (the Container plays of *House)) includes *John) ((the is-inside of *John) includes *House) ((the is-outside of (the location of *John)) /= *House-Location))))
  (wn16-synset ((:set (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v") (:triple "move_into" 1 "v"))))
  (wn20-synset ((:set (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v") (:triple "move_into" 1 "v")))))

(every Enter has-definition 
  (instance-of (Move-Into
                Reflexive-Cliche)))

(every Enter has 
  (agent ((the object of Self)))
  (text-active-verbseq-sg ("enters"))
  (text-active-verbseq-pl ("enter"))
  (text-base (()))
  (text-nominalization ("entry")))

;;; ----------

(Entity has 
  (subclasses (Spatial-Entity
               Sequence
               Intangible-Entity
               Aggregate))
  (superclasses (Thing))
  (member-of (_Partition1))
  (domain-of (age
              agent-of
              text-agent-of
              animacy
              beneficiary-of
              capability
              content-of
              donor-of
              experiencer-of
              first-element-of
              has-basic-functional-unit
              is-basic-functional-unit-of
              has-functional-part
              is-functional-part-of
              has-goal
              has-part
              is-part-of
              text-has-part
              text-is-part-of
              instrument-of
              next-element
              previous-element
              object-of
              orientation
              plays
              possesses
              is-possessed-by
              text-possesses
              purpose
              recipient-of
              result-of
              text-result-of
              text-dobj-of
              text-subj-of
              time-of-existence
              trait
              worth))
  (range-of (age-of
             agent
             text-agent
             animacy-of
             beneficiary
             capability-of
             content
             donor
             experiencer
             first-element
             has-basic-functional-unit
             is-basic-functional-unit-of
             has-functional-part
             is-functional-part-of
             is-goal-of
             has-part
             is-part-of
             text-is-part-of
             text-has-part
             instrument
             next-element
             previous-element
             object
             orientation-of
             played-by
             possesses
             is-possessed-by
             text-is-possessed-by
             purpose-of
             recipient
             result
             text-result
             text-dobj
             text-subj
             time-of-existence-of
             trait-of
             worth-of)))

(every Entity has 
  (identifier ((((forall (the called of Self) (a Text-Field with (information-content (It))))) && ((forall (the uniquely-called of Self) (a Text-Field with (information-content (It))))))))
  (name ((if (anonymous-instancep Self) then (oneof ?c1 in (the classes of Self) where (not (oneof ?c2 in (the classes of Self) where ((?c1 /= ?c2) and (?c1 subsumes ?c2))))))))
  (text-gen ((make-phrase (the text-phrase of Self))))
  (text-description ((the text-sentence of Self)))
  (text-head ((if (anonymous-instancep Self) then (:seq (if ((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of Self)) then (if (has-value (the plays of Self)) then (oneof (the plays of Self) where t) else (if (has-value (the location-of of Self)) then (:seq "location of" (the text-gen of (oneof (the location-of of Self) where t))) else Self)) else Self) (if (has-value (the uniquely-called of Self)) then (:seq "(called" (the uniquely-called of Self) ")") else (if (has-value (the called of Self)) then (:seq "(called" (the called of Self) ")")))) else (the name of Self))))
  (text-def-determiner ((if (anonymous-instancep Self) then (if (has-value (the is-possessed-by of Self)) then (:seq (the text-def-head of (the is-possessed-by of Self)) "'s") else (:seq "the")))))
  (text-indef-determiner ((if (anonymous-instancep Self) then (if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (:seq (the text-premods of Self) (the text-head of Self)))) 0))))) then (:seq "an") else (:seq "a")))))
  (text-def-head ((:seq (the text-def-determiner of Self) (the text-head of Self))))
  (text-indef-head ((:seq (the text-indef-determiner of Self) (the text-head of Self))))
  (text-is-above ("above"))
  (text-is-along ("along"))
  (text-is-between ("between"))
  (text-is-behind ("behind"))
  (text-is-opposite ("opposite"))
  (text-is-outside ("outside"))
  (text-is-over ("over"))
  (text-is-beside ("beside"))
  (text-is-near ("near"))
  (text-is-at ("at"))
  (text-is-on ("on"))
  (text-site-of ("site of"))
  (text-abuts ("abutting"))
  (text-is-inside ("inside"))
  (text-is-part-of ("part of"))
  (text-has-part ("made up of"))
  (text-material ("made of"))
  (text-content ("containing"))
  (text-result-of ("result of"))
  (text-raw-material-of ("raw material of"))
  (text-agent-of ("agent of"))
  (text-is-north-of ("north of"))
  (text-is-northeast-of ("northeast of"))
  (text-is-east-of ("east of"))
  (text-is-southeast-of ("southeast of"))
  (text-is-south-of ("south of"))
  (text-is-southwest-of ("southwest of"))
  (text-is-west-of ("west of"))
  (text-is-northwest-of ("northwest of"))
  (text-premodslots ((:seq area length height thickness volume size capacity depth mass density temperature wetness brightness breakability consistency shape smell taste texture trait age color physical-state sex)))
  (text-premods ((if (has-value (the text-premodslots of Self)) then (forall-seq (the text-premodslots of Self) where (has-value (the It of Self)) (if (It isa Property) then (if (has-value (the value of (the It of Self))) then (the text-phrase of (the It of Self))) else (the text-head of (the It of Self)))))))
  (text-postmodslots ((:seq material content is-above is-along is-between is-behind is-opposite is-outside is-over is-beside is-at is-on site-of abuts is-inside is-north-of is-northeast-of is-east-of is-southeast-of is-south-of is-southwest-of is-west-of is-northwest-of)))
  (text-postmods ((if (has-value (the text-postmodslots of Self)) then (forall-seq (the text-postmodslots of Self) where (has-value (the It of Self)) (:seq (the (the text-slot of It) of Self) (if (Event subsumes (the range of It)) then (andify (the text-indef-phrase of (the It of Self))) else (andify (the text-def-head of (the It of Self)))))))))
  (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
  (text-indef-phrase ((:seq (the text-indef-determiner of Self) (the text-premods of Self) (the text-head of Self))))
  (text-sentence ((make-sentence ((if (has-value (the elements of (the text-postmods of Self))) then (:seq (the text-base-phrase of Self) "is" (andify (the elements of (the text-postmods of Self)))) else (if (has-value (the elements of (the text-premods of Self))) then (:seq (the text-def-head of Self) "is" (andify (the elements of (the text-premods of Self)))) else (if (has-value (the is-possessed-by of Self)) then (:seq (the text-gen of (the is-possessed-by of Self)) "has" (the text-indef-head of Self)) else (the text-existential-there of Self))))))))
  (text-existential-there ((make-sentence (:seq "there is" (if (anonymous-instancep Self) then (the text-indef-head of Self) else (:seq (the text-indef-head of (an instance of (oneof (the classes of Self) where t))) "called" (the text-head of Self)))))))
  (text-definition-sentence ((make-sentence (:seq (the text-indef-head of Self) "is" ((the elements of (andify (forall (the superclasses of (the classes of Self)) (the text-indef-head of (an instance of It))))) or "something") (if ((has-value (the elements of (the text-postmods of Self))) and (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) then ((?sup == (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) and (:seq "that is" (andify (allof (the elements of (the text-postmods of Self)) where (not ((the elements of (the text-postmods of (an instance of ?sup))) includes It)))))))))))
  (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))

;;; ----------

(Entrance has 
  (superclasses (Portal))
  (wn20-synset ((:set (:triple "entrance" 1 "n"))
                (:set (:triple "entranceway" 1 "n"))
                (:set (:triple "entryway" 1 "n"))
                (:set (:triple "entry" 5 "n"))
                (:set (:triple "entree" 3 "n")))))

(every Entrance has 
  (in-event ((must-be-a Move-Into)))
  (played-by ((a Spatial-Entity with (path-of ((the in-event of Self))))))
  (is-between ((the is-inside of Self)
               (the is-outside of Self))))

;;; ----------

(equation has 
  (instance-of (KM-Slot-Group))
  (domain (System))
  (range (Equation-Set))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (shaken-ui-hidden-slot (f)))

;;; ----------

(equation-expression has 
  (instance-of (KM-Slot-Group))
  (domain (Equation-Set))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (shaken-ui-hidden-slot (f)))

;;; ----------

(equation-expression-of has 
  (range (Equation-Set))
  (instance-of (KM-Slot-Group)))

;;; ----------

(equation-of has 
  (range (System))
  (domain (Equation-Set))
  (instance-of (KM-Slot-Group)))

;;; ----------

(Equation-Set has 
  (superclasses (KM-Class))
  (domain-of (equation-expression
              equation-symbol
              equation-uses
              equation-of))
  (range-of (equation-expression-of
             equation-symbol-of
             used-in-equation
             equation)))

;;; ----------

(equation-symbol has 
  (instance-of (KM-Slot-Group))
  (domain (Equation-Set))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (shaken-ui-hidden-slot (f)))

;;; ----------

(equation-symbol-of has 
  (range (Equation-Set))
  (instance-of (KM-Slot-Group)))

;;; ----------

(equation-uses has 
  (instance-of (KM-Slot-Group))
  (domain (Equation-Set))
  (inverse (used-in-equation))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (shaken-ui-hidden-slot (f)))

;;; ----------

(Event has 
  (subclasses (State
               Goal
               Activity
               Action))
  (superclasses (Thing))
  (primary-slot (time-during))
  (cmap-correspondence ((:seq time-during "when")))
  (member-of (_Partition1))
  (test-case ('((Knife has (superclasses (Physical-Object))) (every Knife has (purpose ((a Instrument-Role with (in-event ((a Cut))))))) (*K has (instance-of (Knife)) (object-of ((a Be-Ruined)))) (Cut has (superclasses (Event))) (every Cut has (instrument ((a Knife)))) (a Cut with (instrument (*K))) (not (try-do (thelast Cut))))))
  (wn20-synset ((:set (:triple "event" 1 "n") (:triple "event" 3 "n"))))
  (domain-of (acceleration
              actions
              actions-of
              agent
              text-agent
              all-subevents
              all-subevents-of
              away-from
              text-away-from
              base
              text-base
              beneficiary
              text-beneficiary
              by-means-of
              means-by-which
              causes
              caused-by
              text-causes
              text-caused-by
              dcs-list
              destination
              text-destination
              direction
              disjunctive-next-events
              disjunctive-next-events-of
              distance
              donor
              text-donor
              duration
              enables
              enabled-by
              experiencer
              first-subevent
              first-subevent-of
              frequency
              is-goal-of
              in-event-of
              inhibits
              inhibited-by
              instrument
              text-instrument
              interrupted-by
              interrupts
              manner
              mcs-list
              momentum
              next-event
              prev-event
              object
              text-object
              objective
              objective-of
              origin
              text-origin
              path
              text-path
              preparatory-event
              preparatory-event-of
              prevents
              prevented-by
              primitive-actions
              primitive-actions-of
              rate
              raw-material
              text-raw-material
              recipient
              text-recipient
              result
              text-result
              resulting-state
              text-resulting-state
              rotational-rate
              site
              text-site
              soft-pcs-list
              subevent
              subevent-of
              text-subevent
              substrate
              supports
              supported-by
              text-active-phrase
              text-active-sentence
              text-active-verbseq-pl
              text-active-verbseq-sg
              text-active-verbseq
              text-arguments
              text-dobj
              text-nom-sentence
              text-nominalization
              text-number
              text-particle
              text-passive-phrase
              text-passive-sentence
              text-passive-verbseq-pl
              text-passive-verbseq-sg
              text-passive-verbseq
              text-subj
              time-at
              time-during
              toward
              text-toward
              velocity))
  (range-of (acceleration-of
             actions
             actions-of
             agent-of
             text-agent-of
             all-subevents
             all-subevents-of
             away-from-of
             text-away-from-of
             base-of
             text-base-of
             beneficiary-of
             text-beneficiary-of
             by-means-of
             means-by-which
             causes
             caused-by
             text-caused-by
             text-causes
             dcs-list-of
             destination-of
             text-destination-of
             direction-of
             disjunctive-next-events
             disjunctive-next-events-of
             distance-of
             donor-of
             text-donor-of
             duration-of
             enables
             enabled-by
             experiencer-of
             first-subevent
             first-subevent-of
             frequency-of
             has-goal
             in-event
             inhibits
             inhibited-by
             instrument-of
             text-instrument-of
             interrupted-by
             interrupts
             manner-of
             mcs-list-of
             momentum-of
             next-event
             prev-event
             object-of
             text-object-of
             objective
             objective-of
             origin-of
             text-origin-of
             path-of
             text-path-of
             preparatory-event
             preparatory-event-of
             prevents
             prevented-by
             primitive-actions
             primitive-actions-of
             rate-of
             raw-material-of
             text-raw-material-of
             recipient-of
             text-recipient-of
             result-of
             text-result-of
             resulting-state-of
             text-resulting-state-of
             rotational-rate-of
             site-of
             text-site-of
             soft-pcs-list-of
             subevent
             subevent-of
             text-subevent-of
             substrate-of
             supports
             supported-by
             text-active-phrase-of
             text-active-sentence-of
             text-active-verbseq-pl-of
             text-active-verbseq-sg-of
             text-active-verbseq-of
             text-arguments-of
             text-dobj-of
             text-nom-sentence-of
             text-nominalization-of
             text-number-of
             text-particle-of
             text-passive-phrase-of
             text-passive-sentence-of
             text-passive-verbseq-pl-of
             text-passive-verbseq-sg-of
             text-passive-verbseq-of
             text-subj-of
             time-of
             time-contains
             toward-of
             text-toward-of
             velocity-of)))

(every Event has 
  (identifier ((((forall (the called of Self) (a Text-Field with (information-content (It))))) && ((forall (the uniquely-called of Self) (a Text-Field with (information-content (It))))))))
  (subevent ((<> Self)
             (must-be-a Event)
             (the first-subevent of Self)))
  (next-event ((must-be-a Event with (time-during ((a Time-Interval with (time-after ((the time-during of Self)))))))))
  (all-subevents ((the subevent of Self)
                  (the all-subevents of (the subevent of Self))))
  (actions ((:set (forall (the subevent of Self) (the actions of It)) Self)))
  (primitive-actions ((the primitive-actions of (the subevent of Self))
                      (if (not (the subevent of Self)) then Self)))
  (time-during ((a Time-Interval with (time-after ((forall (the subevent of (the subevent-of of Self)) where ((the next-event of It) = Self) (the time-during of It)))) (time-before ((the time-during of (the next-event of Self)))))))
  (site ((must-be-a Spatial-Entity with (is-near ((if (has-value (the object of Self)) then (the location of (the object of Self))))))))
  (agent ((must-be-a Entity with (abuts ((if (has-value (the instrument of Self)) then (the instrument of Self)))))))
  (beneficiary ((must-be-a Living-Entity)))
  (donor ((must-be-a Entity)))
  (instrument ((must-be-a Entity with (abuts ((if (has-value (the agent of Self)) then (the agent of Self)))))))
  (recipient ((must-be-a Entity)))
  (result ((must-be-a Entity)))
  (pcs-list ((if (has-value (the instrument of Self)) then (forall (the instrument of Self) ((:triple (It) instance-of (mustnt-be-a Entity with (plays ((a Instrument-Role))) (object-of ((a Be-Broken with (object (It))))))))))))
  (text-gen ((make-sentence (the text-sentence of Self))))
  (text-description ((the text-nom-sentence of Self)))
  (text-dobj ((if (has-value (the object of Self)) then (the object of Self) else (the result of Self))))
  (text-subj ((if (has-value (the agent of Self)) then (the agent of Self) else (the instrument of Self))))
  (text-subj-phrase ((if (((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the text-subj of Self))) and ((the text-def-head of (the text-subj of Self)) = (:seq (:seq "the") (:seq (the text-subj of Self) ())))) then (:seq "the" (oneof (the all-instances of Relation) where ((the It of Self) = (the text-subj of Self)))) else (andify (the text-def-head of (the text-subj of Self))))))
  (text-dobj-phrase ((if (((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the text-dobj of Self))) and ((the text-def-head of (the text-dobj of Self)) = (:seq (:seq "the") (:seq (the text-dobj of Self) ())))) then (:seq "the" (oneof (the all-instances of Relation) where ((the It of Self) = (the text-dobj of Self)))) else (andify (the text-def-head of (the text-dobj of Self))))))
  (text-number ((if (has-value (the text-subj of Self)) then (the number of (the text-subj of Self)) else (the number of (the text-dobj of Self)))))
  (text-active-verbseq ((if ((the text-number of Self) > 1) then (the text-active-verbseq-pl of Self) else (the text-active-verbseq-sg of Self))))
  (text-passive-verbseq ((if ((the text-number of Self) > 1) then (the text-passive-verbseq-pl of Self) else (the text-passive-verbseq-sg of Self))))
  (text-active-phrase ((if ((the number of (the text-active-verbseq of Self)) = 1) then (the text-active-verbseq of Self) else ((if ((the text-number of Self) = 1) then ((:seq "does" (andify (the instance-of of Self)))) else ((:seq "do" (andify (the instance-of of Self)))))))))
  (text-passive-phrase ((if ((the number of (the text-passive-verbseq of Self)) = 1) then (the text-passive-verbseq of Self) else ((if ((the number of (the text-dobj of Self)) > 1) then ((:seq "have" (andify (the instance-of of Self)) "done to them")) else ((:seq "has" (andify (the instance-of of Self)) "done to it")))))))
  (text-sentence ((:seq (if (oneof (the superclasses of (the classes of Self)) where ((the text-active-verbseq-sg of (an instance of It)) = (the text-active-verbseq-sg of Self))) then (:seq (the name of Self) "nospace" ":")) (if (has-value (the text-subj of Self)) then (the text-active-sentence of Self) else (the text-passive-sentence of Self)))))
  (text-active-sentence ((:seq (the text-subj-phrase of Self) (the text-active-phrase of Self) (if ((the agent of Self) /= (the text-dobj of Self)) then (if (the text-dobj of Self) then (the text-dobj-phrase of Self))) (the text-arguments of Self))))
  (text-passive-sentence ((if (has-value (the text-dobj of Self)) then (:seq (the text-dobj-phrase of Self) (the text-passive-phrase of Self) (the text-arguments of Self)) else (if ((not (has-value (the elements of (the text-arguments of Self)))) and (not (has-value (the text-passive-verbseq of Self)))) then (the text-nom-sentence of Self) else (:seq "something" (the text-passive-phrase of Self) (the text-arguments of Self))))))
  (name ((if (anonymous-instancep Self) then (oneof ?c1 in (the classes of Self) where (not (oneof ?c2 in (the classes of Self) where ((?c1 /= ?c2) and (?c1 subsumes ?c2))))))))
  (text-head ((if (anonymous-instancep Self) then (if (has-value (the text-nominalization of Self)) then (if ((:set "activity" "action") includes (the text-nominalization of Self)) then Self else (the text-nominalization of Self)) else Self) else (the name of Self))))
  (text-def-determiner ((:seq "the")))
  (text-indef-determiner ((if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (the text-head of Self))) 0))))) then (:seq "an") else (:seq "a"))))
  (text-def-head ((:seq (the text-def-determiner of Self) (the text-head of Self))))
  (text-indef-head ((:seq (the text-indef-determiner of Self) (the text-head of Self))))
  (text-indef-phrase ((if (has-value (the text-dobj of Self)) then (:seq (the text-def-head of Self) (if ((the text-dobj of Self) = (the result of Self)) then (the text-result of Self) else (the text-object of Self)) (andify (the text-indef-head of (the text-dobj of Self)))) else (the text-indef-head of Self))))
  (text-premodslots ((:seq manner duration acceleration velocity rotational-rate frequency distance direction rate)))
  (text-premods ((if (has-value (the text-premodslots of Self)) then (forall-seq (the text-premodslots of Self) where ((has-value (the It of Self)) and (not ((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the It of Self))))) (if (It isa Property) then (the text-phrase of (the It of Self)) else (:seq (the text-premods of (the It of Self)) (the text-head of (the It of Self))))))))
  (text-postmodslots ((:seq subevent-of raw-material agent donor recipient beneficiary instrument resulting-state-of caused-by origin destination toward away-from path)))
  (text-postmods ((if (has-value (the text-postmodslots of Self)) then (forall-seq (the text-postmodslots of Self) where (has-value (the It of Self)) (:seq (if (has-value (the text-slot of It)) then (the (the text-slot of It) of Self)) (if (It isa Property) then (the text-phrase of (the It of Self)) else (andify (the text-def-head of (the It of Self)))))))))
  (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self) (if ((the text-dobj of Self) = (the result of Self)) then (the (the text-slot of result) of Self) else (the (the text-slot of object) of Self)) (the text-dobj-phrase of Self)) else (:seq (the text-head of Self)))))
  (text-nom-sentence ((make-sentence ((if (has-value (the elements of (the text-postmods of Self))) then (:seq (the text-base-phrase of Self) "is" (the text-postmods of Self)) else (if (has-value (the elements of (the text-premods of Self))) then (:seq (the text-def-head of Self) "is" (the text-premods of Self)) else (the text-existential-there of Self)))))))
  (text-existential-there ((make-sentence (:seq "there is" (the text-indef-phrase of Self)))))
  (text-definition-sentence ((make-sentence (:seq (the text-indef-phrase of Self) "is" (andify (forall (the superclasses of (the classes of Self)) (the text-indef-head of (an instance of It))))))))
  (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self))))
  (text-argslots ((:seq base instrument)))
  (text-arguments ((forall-seq (the text-argslots of Self) where ((has-value (the It of Self)) and ((the It of Self) /= (the text-subj of Self)) and ((the It of Self) /= (the text-dobj of Self))) (:seq ((if (has-value (the text-slot of It)) then (the1 of (the (the text-slot of It) of Self)))) ((if (((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the It of Self))) and ((the text-def-head of (the It of Self)) = (:seq (:seq "the") (:seq (the It of Self) ())))) then (:seq "the" It) else ((if ((the number of (the It of Self)) = 1) then ((if ((the It of Self) isa String) then (the It of Self) else (the text-def-head of (the It of Self)))) else (the text-def-head of (the It of Self))))))))))
  (text-subevent-of ((if (has-value (the subevent-of of Self)) then ("part of"))))
  (text-object ((if (has-value (the object of Self)) then ("of"))))
  (text-result ((if (has-value (the result of Self)) then ("of"))))
  (text-raw-material ((if (has-value (the raw-material of Self)) then ("out of"))))
  (text-agent ((if (has-value (the agent of Self)) then ("by"))))
  (text-donor ((if (has-value (the donor of Self)) then ("from"))))
  (text-recipient ((if (has-value (the recipient of Self)) then ("to"))))
  (text-beneficiary ((if (has-value (the beneficiary of Self)) then ("for"))))
  (text-instrument ((if (has-value (the instrument of Self)) then ("using"))))
  (text-base ((if (has-value (the base of Self)) then ("to"))))
  (text-resulting-state ((if (has-value (the resulting-state of Self)) then ("resulting in"))))
  (text-resulting-state-of ((if (has-value (the resulting-state-of of Self)) then ("resulting from"))))
  (text-causes ((if (has-value (the causes of Self)) then ("causing"))))
  (text-caused-by ((if (has-value (the caused-by of Self)) then ("caused by"))))
  (text-origin ((if (has-value (the origin of Self)) then ("from"))))
  (text-destination ((if (has-value (the destination of Self)) then ("to"))))
  (text-toward ((if (has-value (the toward of Self)) then ("toward"))))
  (text-away-from ((if (has-value (the away-from of Self)) then ("away from"))))
  (text-path ((if (has-value (the path of Self)) then ("along"))))
  (text-site ((if (has-value (the site of Self)) then ("at")))))

;;; ----------

(Exit has 
  (superclasses (Move-Out-Of
                 Reflexive-Cliche))
  (required-slot (object
                  agent
                  origin))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq agent "the exit'er")
                        (:seq object "the exit'er")
                        (:seq destination "final location")
                        (:seq origin "original location")
                        (:seq path "the portal")))
  (test-case ('((*Johnny-doorway has (instance-of (Spatial-Entity)) (plays ((a Portal)))) (*Johnny-House-Location has (instance-of (Place))) (*Johnny-House has (instance-of (Physical-Object)) (has-part (*Johnny-Door)) (location (*Johnny-House-Location))) (*Inside-The-House has (instance-of (Place)) (is-inside (*Johnny-House))) (*Johnny-boy has (instance-of (Living-Entity)) (location (*Inside-The-House))) (a Exit with (agent (*Johnny-boy)) (base (*Johnny-House))) (the object of (thelast Exit)) ((the content of (the Container plays of (the base of (thelast Exit)))) includes *Johnny-boy) ((the is-inside of (the location of *Johnny-boy)) includes *Johnny-House) (do-and-next (thelast Exit)) (the text-gen of (thelast Exit)) ((the is-outside of *Johnny-boy) includes *Johnny-House) ((the does-not-enclose of *Johnny-House-Location) includes *Johnny-boy) (not ((the content of (the Container plays of *Johnny-House)) includes *Johnny-boy)) ((the is-outside of (the location of *Johnny-boy)) includes *Johnny-House-Location) ((the does-not-enclose of *Johnny-House-Location) includes (the location of *Johnny-boy)))))
  (wn16-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v"))))
  (wn20-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v")))))

(every Exit has-definition 
  (instance-of (Move-Out-Of
                Reflexive-Cliche)))

(every Exit has 
  (text-active-verbseq-sg ("exits"))
  (text-active-verbseq-pl ("exit"))
  (text-base (()))
  (text-nominalization ("exit")))

;;; ----------

(Expand has 
  (superclasses (Increase))
  (test-case ('((*myballon has (instance-of (Physical-Object)) (volume (*myballonsvolume))) (*myballonsvolume has (instance-of (Volume-Value)) (value ((:pair 3 *liter)))) (a Increase with (object (*myballon)) (property-slot (volume))) ((thelast Increase) isa Expand) (do-and-next (thelast Expand)) ((the greater-than of (the volume of *myballon)) includes *myballonsvolume))))
  (wn20-synset ((:set (:triple "expand" 1 "v") (:triple "expand" 2 "v") (:triple "expand" 3 "v") (:triple "spread_out" 4 "v") (:triple "enlarge" 1 "v") (:triple "enlarge" 3 "v")))))

(every Expand has-definition 
  (instance-of (Increase))
  (property-slot (volume)))

(every Expand has 
  (text-nominalization ("expansion")))

;;; ----------

(experiencer has 
  (required-slot-of (Be-Known
                     Sense))
  (primary-slot-of (State))
  (instance-of (Participant-Relation))
  (domain (Event))
  (range (Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (experiencer-of))
  (cardinality (N-to-N))
  (text-gloss ("is experienced by")))

;;; ----------

(experiencer-of has 
  (inverse (experiencer))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation))
  (text-gloss ("experiences")))

;;; ----------

(Expose has 
  (defeated-by-class-of (Be-Concealed))
  (superclasses (Make-Accessible))
  (required-slot (object))
  (primary-slot (agent
                 base))
  (cmap-correspondence ((:seq object "the object Exposed")
                        (:seq agent "the Exposer")
                        (:seq base "the thing to which the object is Exposed")))
  (test-case ('((*Weapon has (instance-of (Physical-Object))) (a Conceal with (object (*Weapon))) (try-do-and-next (thelast Conceal)) (has-value (the Be-Concealed object-of of *Weapon)) (a See with (object (*Weapon))) (a Expose with (object (*Weapon))) (try-do-and-next (thelast Expose)) (not (has-value (the Be-Concealed object-of of *Weapon))) (try-do (thelast See)))))
  (wn16-synset ((:set (:triple "expose" 3 "v") (:triple "expose" 4 "v") (:triple "expose" 5 "v") (:triple "expose" 7 "v") (:triple "disclose" 2 "v") (:triple "display" 1 "v") (:triple "exhibit" 2 "v"))))
  (wn20-synset ((:set (:triple "expose" 3 "v") (:triple "expose" 4 "v") (:triple "expose" 5 "v") (:triple "expose" 7 "v") (:triple "disclose" 2 "v") (:triple "display" 1 "v") (:triple "exhibit" 2 "v")))))

(every Expose has 
  (object ((a Tangible-Entity)))
  (agent ((must-be-a Entity)))
  (base ((must-be-a Thing)))
  (soft-pcs-list ((if (has-value (the agent of Self)) then (forall (the object of Self) (:triple (the location of It) object-of (a Be-Known with (experiencer ((the agent of Self)))))))))
  (defeats ((if (has-value (the base of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Concealed) and ((the base of It) = (the base of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Concealed)))))
  (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Expose-del-1]))))
  (text-active-verbseq-sg ("exposes"))
  (text-active-verbseq-pl ("expose"))
  (text-passive-verbseq-sg ("gets exposed"))
  (text-passive-verbseq-pl ("get exposed"))
  (text-argslots ((:seq base instrument path result)))
  (preparatory-event ((:default (a Conceal with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("exposing")))

;;; ----------

(Express has 
  (subclasses (Write
               Lie
               Inquire
               Command))
  (superclasses (Action))
  (required-slot (agent
                  object))
  (test-case ('((*Fact has (instance-of (Information))) (*Bob has (instance-of (Tangible-Entity))) (*Alice has (instance-of (Tangible-Entity))) (*AnExpress has (instance-of (Express)) (agent (*Bob)) (recipient (*Alice)) (object (*Fact))) (do-and-next *AnExpress))))
  (wn16-synset ((:set (:triple "express" 1 "v") (:triple "express" 2 "v") (:triple "express" 3 "v") (:triple "express" 4 "v") (:triple "show" 7 "v") (:triple "evince" 1 "v") (:triple "utter" 1 "v") (:triple "carry" 4 "v") (:triple "convey" 2 "v") (:triple "state" 3 "v"))))
  (wn20-synset ((:set (:triple "express" 1 "v") (:triple "express" 2 "v") (:triple "express" 3 "v") (:triple "express" 4 "v") (:triple "show" 6 "v") (:triple "evince" 1 "v") (:triple "utter" 1 "v") (:triple "carry" 4 "v") (:triple "convey" 2 "v") (:triple "state" 3 "v")))))

(every Express has 
  (recipient ((must-be-a Tangible-Entity)))
  (agent ((a Tangible-Entity)))
  (object ((a Information)))
  (result ((a Message with (result-of (Self)))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Known with (experiencer ((the agent of Self)))) [Express-pcs-1])
             (:triple (the agent of Self) experiencer-of (a Be-Known with (object ((the Language information-language of (the result of Self)))) (experiencer ((the agent of Self)))))))
  (text-nominalization ("expression")))

;;; ----------

(Fall has 
  (superclasses (Move))
  (required-slot (object))
  (primary-slot (origin
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing falling")
                        (:seq origin "starting point")
                        (:seq destination "terminal point")
                        (:seq path "moved through")))
  (test-case ('((*meteor has (instance-of (Tangible-Entity)) (location ((a Place)))) (*trailer has (instance-of (Tangible-Entity)) (location ((a Place)))) (a Fall with (object (*meteor)) (destination ((the location of *trailer)))) (do-and-next (thelast Fall)) ((the location of *meteor) = (the location of *trailer)) (new-situation) (*computer has (instance-of (Tangible-Entity)) (location ((a Place)))) (*window has (instance-of (Tangible-Entity))) (*patio has (instance-of (Tangible-Entity)) (location ((a Place))) (is-under (*window))) (a Fall with (object (*computer)) (path (*window)) (destination (*patio))) (do-and-next (thelast Fall)) ((the location of *computer) = (the location of *patio)) ((the is-under of *computer) includes *window))))
  (wn16-synset ((:set (:triple "fall" 1 "v"))))
  (wn20-synset ((:set (:triple "fall" 1 "v")))))

(every Fall has 
  (agent ((exactly 0 Entity)))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Supported)))))
  (duration ((a Duration-Value)))
  (distance ((a Length-Value)))
  (origin ((a Spatial-Entity)))
  (destination ((a Spatial-Entity)))
  (text-passive-verbseq-sg ("falls"))
  (text-passive-verbseq-pl ("fall"))
  (preparatory-event ((:default (a Support with (object ((the object of Self))) (agent ((the agent of Self)))))))
  (text-nominalization ("fall")))

;;; ----------

(Family has 
  (superclasses (Group))
  (wn20-synset ((:set (:triple "family" 1 "n") (:triple "household" 1 "n") (:triple "house" 4 "n") (:triple "home" 7 "n") (:triple "menage" 1 "n") (:triple "family" 2 "n") (:triple "family_unit" 1 "n")))))

;;; ----------

(feature-slot has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(feature-slot-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Feed has 
  (superclasses (Supply))
  (required-slot (recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "food")
                        (:seq agent "feeder")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Food has (instance-of (Food))) (*cookies has (instance-of (Tangible-Entity)) (plays ((*Food)))) (*Mother-Teresa has (instance-of (Living-Entity)) (possesses (*cookies))) (*Children has (instance-of (Tangible-Entity))) (*Feed has (instance-of (Feed)) (donor (*Mother-Teresa)) (recipient (*Children)) (object (*cookies))) (do-and-next *Feed) ((the possesses of *Mother-Teresa) /= *cookies) ((the possesses of *Children) = *cookies) ((the enables of *Feed) isa Replenish))))
  (wn16-synset ((:set (:triple "feed" 1 "v") (:triple "feed" 2 "v") (:triple "grub" 3 "v") (:triple "give" 24 "v"))))
  (wn20-synset ((:set (:triple "feed" 1 "v") (:triple "feed" 2 "v") (:triple "give" 24 "v")))))

(every Feed has 
  (donor ((a Living-Entity)))
  (recipient ((a Living-Entity)))
  (object ((a Tangible-Entity with (plays ((a Food))))))
  (text-active-verbseq-sg ("feeds"))
  (text-active-verbseq-pl ("feed"))
  (text-passive-verbseq-sg ("is fed"))
  (text-passive-verbseq-pl ("are fed"))
  (text-nominalization ("feeding")))

;;; ----------

(Fidget has 
  (superclasses (Orient))
  (description ("The act of fidgeting."))
  (wn20-synset ((:set (:triple "fidget" 1 "v")))))

(every Fidget has 
  (agent ((a Entity)))
  (object ((the agent of Self)))
  (text-active-verbseq-sg ("fidgets"))
  (text-active-verbseq-pl ("fidget"))
  (text-nominalization ("fidgeting")))

;;; ----------

(Filter has 
  (superclasses (Role))
  (wn20-synset ((:set (:triple "filter" 1 "n")))))

(every Filter has 
  (in-event ((must-be-a Event)))
  (played-by ((a Entity with (instrument-of ((the in-event of Self)))))))

;;; ----------

(Financing has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "funding" 2 "n") (:triple "financing" 1 "n")))))

(every Financing has 
  (text-nominalization ("financing")))

;;; ----------

(first-element has 
  (instance-of (Meronymic-Relation))
  (domain (Aggregate))
  (range (Entity))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (text-gloss ("has as first element")))

;;; ----------

(first-element-of has 
  (range (Aggregate))
  (domain (Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is the first element of")))

;;; ----------

(first-subevent has 
  (instance-of (Meronymic-Relation))
  (superslots (subevent))
  (domain (Event))
  (range (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("has as first subevent")))

;;; ----------

(first-subevent-of has 
  (range (Event))
  (domain (Event))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is the first subevent of")))

;;; ----------

(Floor has 
  (superclasses (Platform))
  (description ("a platform supporting the contents of a container"))
  (test-case ('((*TheGymFloor has (instance-of (Floor))) (*TheGym has (instance-of (Architectural-Structure)) (has-part (*TheGymFloor)) (plays ((a Container)))) (*TheUtilityBall has (instance-of (Artifact)) (is-on (*TheGymFloor))) (*TheBalanceBeam has (instance-of (Artifact)) (is-on (*TheGymFloor))) (the content-of of (the has-on-it of *TheGymFloor)) ((the content of (the Container plays of *TheGym)) is-superset-of (:set *TheUtilityBall *TheBalanceBeam)))))
  (wn20-synset ((:set (:triple "floor" 1 "n")))))

(every Floor has 
  (is-part-of ((a Tangible-Entity with (plays ((a Container))))))
  (has-on-it ((must-be-a Tangible-Entity with (content-of ((the Container plays of (the is-part-of of Self))))))))

;;; ----------

(Fluid-Substance has 
  (superclasses (Substance))
  (description ("A substance, as a liquid or a gas, that is capable of
                       flowing and which changes its shape at a steady rate
                       when acted upon by a force. RHCD:508."))
  (wn20-synset ((:set (:triple "fluid" 1 "n") (:triple "fluid" 2 "n"))))
  (subclasses (Liquid-Substance
               Gas-Substance)))

;;; ----------

(Follow has 
  (superclasses (Locomotion))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq agent "the mover")
                        (:seq object "the mover")))
  (wn20-synset ((:set (:triple "follow" 1 "v")))))

(every Follow has 
  (agent ((a Entity with (is-behind ((the base of Self))))))
  (base ((a Entity with (agent-of ((a Locomotion with (path ((the path of Self))) (destination ((the destination of Self)))))))))
  (path ((a Spatial-Entity)))
  (destination ((a Spatial-Entity)))
  (text-active-verbseq-sg ("follows"))
  (text-active-verbseq-pl ("follow"))
  (text-nominalization ("following")))

;;; ----------

(Food has 
  (superclasses (Role))
  (description ("Substance which provides nourishment to an organism."))
  (wn16-synset ((:set (:triple "food" 1 "n") (:triple "nutrient" 1 "n"))))
  (wn20-synset ((:set (:triple "food" 1 "n") (:triple "food" 2 "n") (:triple "nutrient" 1 "n")))))

(every Food has 
  (in-event ((a Feed)))
  (played-by ((a Tangible-Entity with (object-of ((the in-event of Self)))))))

;;; ----------

(Forget has 
  (superclasses (Action))
  (required-slot (agent
                  object))
  (test-case ('((*Tim has (instance-of (Living-Entity))) (*loc-of-keys has (instance-of (Information)) (information-content ((*key has (instance-of (Physical-Object)) (possessed-by (*Tim)) (location (*under-sofa)))))) (*forgets has (instance-of (Forget)) (agent (*Tim)) (object (*loc-of-keys))) (do-and-next *forgets) (not (the Be-Known object-of of (the object of (thelast Forget)))) (not ((the experiencer of (thelast Be-Known)) = *Tim)))))
  (wn16-synset ((:set (:triple "forget" 1 "v") (:triple "forget" 2 "v") (:triple "bury" 1 "v") (:triple "block" 13 "v") (:triple "draw_a_blank" 1 "v") (:triple "blank_out" 1 "v"))))
  (wn20-synset ((:set (:triple "forget" 1 "v") (:triple "forget" 2 "v") (:triple "bury" 1 "v") (:triple "block" 13 "v") (:triple "draw_a_blank" 1 "v") (:triple "blank_out" 1 "v")))))

(every Forget has 
  (object ((a Information)))
  (agent ((a Tangible-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Known) and ((the experiencer of It) = (the agent of Self))))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Known with (experiencer ((the agent of Self)))) [Forget-pcs-1])))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Forget-del-1]))
             (forall (the defeats of Self) (:triple It experiencer (the agent of Self) [Forget-del-2]))))
  (text-nominalization ("forgetting")))

;;; ----------

(frequency has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Frequency-Value))
  (scale-class (Frequency-Scale))
  (scalar-constant-class (Frequency-Constant))
  (cardinal-unit-class (UoM-Frequency))
  (inverse (frequency-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "frequency" 1 "n") (:triple "frequence" 1 "n") (:triple "oftenness" 1 "n")))))

;;; ----------

(Frequency-Constant has 
  (superclasses (Constant))
  (instances (*often
              *rarely
              *never))
  (scalar-constant-class-of (frequency))
  (element-type-of (*often-never-scale)))

;;; ----------

(frequency-of has 
  (inverse (frequency))
  (range (Event))
  (domain (Frequency-Value))
  (instance-of (EventProperty)))

;;; ----------

(Frequency-Scale has 
  (superclasses (Scale))
  (scale-class-of (frequency))
  (instances (*often-never-scale)))

;;; ----------

(Frequency-Value has 
  (superclasses (Property-Value))
  (test-case ('((BasketballGame has (superclasses (Event))) (CakeBake has (superclasses (Event))) (*baking-my-cake has (instance-of (CakeBake)) (frequency ((a Frequency-Value)))) (*lakers-vs-6ers has (instance-of (BasketballGame)) (frequency ((a Frequency-Value with (value ((:pair *rarely BasketballGame))) (same-as ((the frequency of *baking-my-cake))))))) (the value of (the frequency of *lakers-vs-6ers)) ((the same-as of (the frequency of *lakers-vs-6ers)) includes (the frequency of *baking-my-cake)))))
  (range-of (frequency))
  (domain-of (frequency-of)))

;;; ----------

(from-value has 
  (instance-of (PropertyProperty))
  (domain (Increase
           Decrease))
  (range (Property-Value))
  (inverse (from-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t)))

;;; ----------

(from-value-of has 
  (inverse (from-value))
  (range (Decrease
          Increase))
  (domain (Property-Value))
  (instance-of (PropertyProperty)))

;;; ----------

(Furnishing has 
  (superclasses (Artifact))
  (description ("furniture, fixtures, room accessories, etc."))
  (wn20-synset ((:set (:triple "furnishings" 1 "n"))))
  (subclasses (Furniture)))

;;; ----------

(Furniture has 
  (subclasses (Shelf
               Drawer
               Cabinet))
  (superclasses (Furnishing))
  (description ("any artifact that helps make a room usable, though maybe not directly instrumental"))
  (wn20-synset ((:set (:triple "furniture" 1 "n")))))

;;; ----------

(Gas-Substance has 
  (subclasses (Air))
  (superclasses (Fluid-Substance))
  (description ("A substance in the gaseous state at room temperature"))
  (wn20-synset ((:set (:triple "gas" 2 "n")))))

(every Gas-Substance has 
  (physical-state ((if (not (has-value (the temperature of Self))) then ((a State-Value with (value (*gas))))))))

;;; ----------

(Gesticulate has 
  (superclasses (Embody
                 Orient))
  (description ("The physical act of making a gesture using a body part (e.g. pointing, looking) or using an object (e.g. a pointer)."))
  (wn20-synset ((:set (:triple "gesticulate" 1 "v") (:triple "gesture" 1 "v") (:triple "motion" 1 "v"))))
  (subclasses (Head-Shake
               Head-Nod)))

(every Gesticulate has 
  (agent ((a Tangible-Entity)))
  (instrument ((a Tangible-Entity)))
  (result ((a Light)))
  (text-nominalization ("gesticulation")))

;;; ----------

(Give has 
  (subclasses (Donate))
  (superclasses (Relinquish))
  (required-slot (recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing Given")
                        (:seq agent "the Giver")
                        (:seq donor "the original possessor")
                        (:seq recipient "the final possessor")
                        (:seq instrument "the thing used to Give")))
  (test-case ('((*Purple-Shirt has (instance-of (Tangible-Entity))) (*Randy has (instance-of (Tangible-Entity)) (possesses (*Purple-Shirt))) (*Samuel has (instance-of (Tangible-Entity))) (a Give with (donor (*Randy)) (recipient (*Samuel)) (object (*Purple-Shirt))) (do-and-next (thelast Give)) (the text-gen of (thelast Give)) ((the possesses of *Samuel) = *Purple-Shirt) ((the possesses of *Randy) = nil) ((the is-possessed-by of *Purple-Shirt) = *Samuel) (((the agent of (thelast Give)) = *Randy) and ((the donor of (thelast Give)) = *Randy)))))
  (wn16-synset ((:set (:triple "give" 3 "v"))))
  (wn20-synset ((:set (:triple "give" 3 "v")))))

(every Give has 
  (recipient ((a Tangible-Entity)))
  (text-active-verbseq-sg ("gives"))
  (text-active-verbseq-pl ("give"))
  (text-passive-verbseq-sg ("is given"))
  (text-passive-verbseq-pl ("are given"))
  (text-nominalization ("giving")))

;;; ----------

(Glass has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "glass" 1 "n")))))

;;; ----------

(Go-Through has 
  (superclasses (Move-Through
                 Reflexive-Cliche))
  (required-slot (agent
                  object
                  path))
  (primary-slot (origin
                 destination))
  (cmap-correspondence ((:seq object "the thing going through")
                        (:seq agent "the thing going through")
                        (:seq path "the barrier gone through")
                        (:seq origin "the place left")
                        (:seq destination "the place gone to")))
  (wn16-synset ((:set (:triple "go_through" 4 "v"))))
  (wn20-synset ((:set (:triple "go_through" 3 "v")))))

(every Go-Through has 
  (text-active-verbseq-sg ("goes"))
  (text-active-verbseq-pl ("go"))
  (text-nominalization ("going")))

;;; ----------

(Go-To has 
  (superclasses (Locomotion))
  (required-slot (agent
                  object
                  destination))
  (primary-slot (origin
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq origin "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((new-situation) (*Gracie-Lou has (instance-of (Physical-Object))) (*Bass-Hall has (instance-of (Physical-Object))) (a Go-To with (agent (*Gracie-Lou)) (destination (*Bass-Hall))) (do-and-next (thelast Go-To)) (the text-gen of (thelast Go-To)) ((the location of *Gracie-Lou) = (the location of *Bass-Hall)))))
  (wn16-synset ((:set (:triple "go" 1 "v") (:triple "locomote" 1 "v") (:triple "move" 1 "v") (:triple "travel" 1 "v") (:triple "reach" 1 "v"))))
  (wn20-synset ((:set (:triple "go" 1 "v") (:triple "locomote" 1 "v") (:triple "move" 1 "v") (:triple "travel" 1 "v") (:triple "reach" 1 "v"))))
  (subclasses (Trespass)))

(every Go-To has 
  (destination ((a Spatial-Entity)))
  (text-active-verbseq-sg ("goes"))
  (text-active-verbseq-pl ("go"))
  (text-argslots ((:seq destination)))
  (preparatory-event ((:default (a Leave with (destination ((the origin of Self))) (object ((the object of Self)))))))
  (text-nominalization ("going")))

;;; ----------

(Goal has 
  (superclasses (Event))
  (test-case ('((new-situation) (*yourMoney has (instance-of (Physical-Object)) (is-possessed-by (*you))) (*myThievery has (instance-of (Event)) (objective ((a Obtain with (object (*yourMoney)))))) (*you has (instance-of (Physical-Object)) (has-goal ((a Goal with (prevents (*myThievery)))))))))
  (wn20-synset ((:set (:triple "goal" 1 "n") (:triple "end" 4 "n") (:triple "finish" 4 "n") (:triple "destination" 1 "n") (:triple "goal" 4 "n")))))

(every Goal has 
  (text-gen ((make-sentence (:seq "The goal" (if (has-value (the objective-of of Self)) then (:seq "of" (the name of (the objective-of of Self))) else (if (has-value (the is-goal-of of Self)) then (:seq "of" (the text-def-head of (the is-goal-of of Self))))) "is" (if (has-value (the causes of Self)) then (:seq "to cause:" (the text-sentence of (the causes of Self))) else (if (has-value (the prevents of Self)) then (:seq "to prevent:" (the text-sentence of (the prevents of Self))) else (if (has-value (the enables of Self)) then (:seq "to enable:" (the text-sentence of (the enables of Self))) else (if (has-value (the inhibits of Self)) then (:seq "to inhibit:" (the text-sentence of (the inhibits of Self))) else (if (has-value (the supports of Self)) then (:seq "to support:" (the text-sentence of (the supports of Self))) else ("unknown"))))))))))
  (text-description ((the text-gen of Self))))

;;; ----------

(greater-than has 
  (instance-of (PropertyProperty))
  (domain (Property-Value))
  (range (Property-Value))
  (inverse (less-than))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(greater-than-or-equal-to has 
  (instance-of (PropertyProperty))
  (domain (Property-Value))
  (range (Property-Value))
  (inverse (less-than-or-equal-to))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(Group has 
  (subclasses (Team
               Family))
  (superclasses (Organization))
  (description ("a relatively small organization of Roles"))
  (wn20-synset ((:set (:triple "working_group" 1 "n") (:triple "working_party" 1 "n") (:triple "unit" 3 "n")))))

;;; ----------

(Hallway has 
  (superclasses (Room))
  (wn20-synset ((:set (:triple "hallway" 1 "n")))))

;;; ----------

(Harm has 
  (superclasses (Impair))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the entity doing harm")
                        (:seq object "the thing harmed"))))

(every Harm has 
  (object ((a Living-Entity)))
  (text-active-verbseq-sg ("harms"))
  (text-active-verbseq-pl ("harm"))
  (text-passive-verbseq-sg ("gets harmed"))
  (text-passive-verbseq-pl ("get harmed"))
  (text-nominalization ("harm")))

;;; ----------

(has-basic-functional-unit has 
  (instance-of (Meronymic-Relation))
  (domain (Entity))
  (range (Entity))
  (inverse (is-basic-functional-unit-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "basic functional unit" 0 "n"))))
  (text-gloss ("has as basic functional unit")))

;;; ----------

(has-basic-structural-unit has 
  (instance-of (Meronymic-Relation))
  (domain (Tangible-Entity))
  (range (Tangible-Entity))
  (inverse (is-basic-structural-unit-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "basic structural unit" 0 "n"))))
  (text-gloss ("has as basic structural unit")))

;;; ----------

(has-example has 
  (instance-of (KM-Slot-Group))
  (inverse (is-example-of))
  (domain (Thing))
  (range (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N))
  (name ("example"))
  (wn20-synset ((:set (:triple "example" 0 "n")))))

;;; ----------

(has-functional-part has 
  (instance-of (Meronymic-Relation))
  (superslots (has-part))
  (domain (Entity))
  (range (Entity))
  (inverse (is-functional-part-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "functional part" 0 "n"))))
  (text-gloss ("has as functional part")))

;;; ----------

(has-goal has 
  (instance-of (Causal-Relation))
  (domain (Entity))
  (range (Event))
  (inverse (is-goal-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "goal" 0 "n"))))
  (text-gloss ("has the goal")))

;;; ----------

(has-on-it has 
  (inverse (is-on))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("has on it")))

;;; ----------

(has-part has 
  (subslots (has-functional-part
             has-structural-part))
  (instance-of (Meronymic-Relation
                Spatial-Relation))
  (domain (Entity))
  (range (Entity))
  (inverse (is-part-of))
  (text-slot (text-has-part))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("has"))
  (wn20-synset ((:set (:triple "part" 0 "n")))))

;;; ----------

(has-region has 
  (instance-of (Meronymic-Relation))
  (domain (Tangible-Entity))
  (range (Spatial-Entity))
  (inverse (is-region-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "region" 0 "n"))))
  (text-gloss ("has subregion")))

;;; ----------

(has-structural-part has 
  (superslots (has-part))
  (instance-of (Meronymic-Relation))
  (domain (Tangible-Entity))
  (range (Tangible-Entity))
  (inverse (is-structural-part-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "structural part" 0 "n"))))
  (text-gloss ("has as structural part")))

;;; ----------

(Head-Nod has 
  (superclasses (Gesticulate))
  (description ("The physical act of moving the head up and down, possibly repeatedly, so as to Embody a Gesture indicating assent."))
  (wn20-synset ((:set (:triple "nod" 1 "v") (:triple "nod" 2 "v")))))

(every Head-Nod has 
  (agent ((:default (a Animal))))
  (text-nominalization ("nodding")))

;;; ----------

(Head-Shake has 
  (superclasses (Gesticulate))
  (description ("The physical act of turning the head side to side, possibly repeatedly, so as to Embody a Gesture indicating dissent."))
  (wn20-synset ((:set (:triple "headshake" 1 "n") (:triple "headshaking" 1 "n")))))

(every Head-Shake has 
  (agent ((:default (a Animal))))
  (text-nominalization ("shaking")))

;;; ----------

(Healing has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "healing" 1 "n")))))

(every Healing has 
  (text-nominalization ("healing")))

;;; ----------

(Hear has 
  (description ("Sensing a sound auditorily."))
  (superclasses (Sense))
  (wn20-synset ((:set (:triple "hear" 1 "v")))))

(every Hear has 
  (object ((a Sound)
           (must-be-a Sound)))
  (text-nominalization ("hearing")))

;;; ----------

(Heat has 
  (superclasses (Increase))
  (test-case ('((*mytea has (instance-of (Substance)) (temperature (*myteatemperature))) (*myteatemperature has (instance-of (Temperature-Value)) (value ((:pair *cool Substance)))) (a Increase with (object (*mytea)) (property-slot (temperature))) ((thelast Increase) isa Heat) (do-and-next (thelast Heat)) ((the greater-than of (the temperature of *mytea)) includes *myteatemperature))))
  (wn20-synset ((:set (:triple "heat" 1 "v") (:triple "heat_up" 2 "v") (:triple "heat" 4 "v") (:triple "hot_up" 1 "v") (:triple "heat_up" 1 "v")))))

(every Heat has-definition 
  (instance-of (Increase))
  (property-slot (temperature)))

(every Heat has 
  (text-nominalization ("heating")))

;;; ----------

(height has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Height-Scale))
  (scalar-constant-class (Height-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (height-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "height" 1 "n") (:triple "height" 4 "n") (:triple "tallness" 1 "n") (:triple "altitude" 1 "n")))))

;;; ----------

(Height-Constant has 
  (superclasses (Constant))
  (instances (*average
              *short
              *tall))
  (scalar-constant-class-of (height))
  (element-type-of (*short-tall-scale)))

;;; ----------

(height-of has 
  (inverse (height))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Height-Scale has 
  (superclasses (Scale))
  (scale-class-of (height))
  (instances (*short-tall-scale)))

;;; ----------

(Hold has 
  (caused-by-class-of (Be-Held))
  (superclasses (Obstruct))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq object "the thing Held")
                        (:seq agent "the Holder")))
  (test-case ('((*toy-train has (instance-of (Tangible-Entity))) (*little-johny has (instance-of (Living-Entity))) (a Hold with (object (*toy-train)) (agent (*little-johny))) (not (the Be-Held object-of of *toy-train)) (do-and-next (thelast Hold)) (the text-gen of (thelast Hold)) (has-value (the Be-Held object-of of *toy-train)) (*Move1 has (instance-of (Move)) (object (*toy-train))) (*Move2 has (instance-of (Move)) (object (*toy-train)) (agent (*little-johny))) (try-do *Move2) (the text-gen of (thelast Move)) (a Let-Go-Of with (object (*toy-train)) (agent (*little-johny))) (do-and-next (thelast Let-Go-Of)) (the text-gen of (thelast Let-Go-Of)) (not (has-value (the Be-Held object-of of *toy-train))) (*Move3 has (instance-of (Move)) (object (*toy-train))) (try-do *Move3) (the text-gen of (thelast Move)))))
  (wn16-synset ((:set (:triple "hold" 3 "v") (:triple "hold" 16 "v") (:triple "hold_up" 1 "v") (:triple "support" 4 "v") (:triple "sustain" 5 "v") (:triple "take_hold" 2 "v"))))
  (wn20-synset ((:set (:triple "hold" 3 "v") (:triple "hold" 15 "v") (:triple "hold_up" 1 "v") (:triple "support" 4 "v") (:triple "sustain" 5 "v") (:triple "take_hold" 2 "v")))))

(every Hold has 
  (object ((a Tangible-Entity)))
  (agent ((a Tangible-Entity)))
  (resulting-state ((a Be-Held)))
  (soft-pcs-list ((forall (the object of Self) (forall2 (the agent of Self) (:triple It is-at It2)))))
  (add-list ((:triple (the resulting-state of Self) agent (the agent of Self) [Hold-add-1])))
  (dcs-list ((forall (the agent of Self) (:triple It abuts (the object of Self) [Hold-dcs-1]))))
  (interrupted-by ((must-be-a Let-Go-Of with (object ((the object of Self))) (agent ((the agent of Self))) [Hold-interrupted-1])))
  (text-active-verbseq-sg ("holds"))
  (text-active-verbseq-pl ("hold"))
  (text-passive-verbseq-sg ("gets held"))
  (text-passive-verbseq-pl ("get held"))
  (text-nominalization ("holding")))

;;; ----------

(identifier has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Message-Field))
  (inverse (identifier-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(identifier-of has 
  (inverse (identifier))
  (range (Thing))
  (domain (Message-Field))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Impair has 
  (subclasses (Harm
               Damage))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the impairer")
                        (:seq object "the thing impaired"))))

(every Impair has 
  (object ((a Tangible-Entity)))
  (text-active-verbseq-sg ("impairs"))
  (text-active-verbseq-pl ("impair"))
  (text-passive-verbseq-sg ("gets impaired"))
  (text-passive-verbseq-pl ("get impaired"))
  (text-nominalization ("impairment")))

;;; ----------

(importance has 
  (instance-of (EntityProperty
                EventProperty))
  (description ("The degree of prominence or noteworthiness possessed by a thing.  See also priority."))
  (domain (Thing))
  (range (Unitless-Value))
  (scale-class (Importance-Scale))
  (scalar-constant-class (Importance-Constant))
  (cardinal-unit-class (UoM-Unitless))
  (inverse (importance-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "importance" 1 "n")))))

;;; ----------

(Importance-Constant has 
  (superclasses (Constant))
  (instances (*unimportant
              *moderately-important
              *important))
  (scalar-constant-class-of (importance))
  (element-type-of (*unimportant-important-scale)))

;;; ----------

(importance-of has 
  (inverse (importance))
  (range (Thing))
  (domain (Unitless-Value))
  (instance-of (EntityProperty
                EventProperty)))

;;; ----------

(Importance-Scale has 
  (superclasses (Scale))
  (scale-class-of (importance))
  (instances (*unimportant-important-scale)))

;;; ----------

(in-event has 
  (instance-of (Participant-Relation))
  (domain (Role))
  (range (Event))
  (inverse (in-event-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(in-event-of has 
  (inverse (in-event))
  (range (Role))
  (domain (Event))
  (instance-of (Participant-Relation)))

;;; ----------

(in-organization has 
  (instance-of (Meronymic-Relation))
  (domain (Role))
  (range (Organization))
  (inverse (in-organization-of))
  (cardinality (N-to-1))
  (fluent-status (*Non-Fluent)))

;;; ----------

(in-organization-of has 
  (inverse (in-organization))
  (range (Role))
  (domain (Organization))
  (instance-of (Meronymic-Relation)))

;;; ----------

(Inanimate-Object has 
  (subclasses (Piece-of-Substance
               Artifact))
  (superclasses (Physical-Object))
  (description ("A non-living thing")))

;;; ----------

(Increase has 
  (subclasses (Widen
               Wet
               Replenish
               Lengthen
               Heat
               Expand
               Brighten))
  (superclasses (Action))
  (test-case ('((*Beer has (instance-of (Entity))) (*Increase has (instance-of (Increase)) (object (*Beer)) (property-slot (temperature))) (do-and-next *Increase) ((the greater-than of (the temperature of *Beer)) includes ((in-situation (the1 prev-situation of (curr-situation)) (the temperature of *Beer)))))))
  (wn20-synset ((:set (:triple "increase" 1 "v") (:triple "increase" 2 "v"))))
  (domain-of (from-value
              property-slot
              to-value))
  (range-of (from-value-of
             property-slot-of
             to-value-of)))

(every Increase has 
  (property-slot ((a Property)))
  (from-value ((in-situation (curr-situation) (the (the property-slot of Self) of (the object of Self)))))
  (pcs-list ((:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self))) [Increase-pcs-1])))
  (del-list ((:triple (the object of Self) (the property-slot of Self) * [Increase-del-1])))
  (add-list ((if (has-value (the to-value of Self)) then (:triple (the object of Self) (the property-slot of Self) ((the to-value of Self) has (greater-than ((the from-value of Self))))) else (:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self)) with (greater-than ((the from-value of Self)))) [Increase-add-1]))))
  (text-nominalization ("increase")))

;;; ----------

(Information has 
  (subclasses (Suggestion
               Request
               Information-Sequence))
  (superclasses (Conceptual-Entity))
  (required-slot (information-content))
  (description ("Knowledge communicated or received concerning a 
                         particular fact or circumstance. RHCD:1st Revised:
                         684."))
  (wn16-synset ((:set (:triple "information" 1 "n") (:triple "info" 1 "n"))))
  (wn20-synset ((:set (:triple "information" 1 "n") (:triple "info" 1 "n"))))
  (domain-of (truth))
  (range-of (truth-of)))

(every Information has 
  (information-content ((a Thing)))
  (truth ((must-be-a Truth-Value))))

;;; ----------

(information-content has 
  (required-slot-of (Information))
  (instance-of (Meronymic-Relation))
  (domain (Conceptual-Entity))
  (range (Thing))
  (inverse (information-content-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(information-content-of has 
  (inverse (information-content))
  (range (Conceptual-Entity))
  (domain (Thing))
  (instance-of (Meronymic-Relation)))

;;; ----------

(information-language has 
  (instance-of (CLIB-Slot-Group))
  (domain (Message))
  (range (Language))
  (inverse (information-language-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(information-language-of has 
  (inverse (information-language))
  (range (Message))
  (domain (Language))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Information-Sequence has 
  (superclasses (Sequence
                 Information))
  (description ("A sequence which encodes information.  Biological
                         examples are DNA, RNA, and the amino acid sequence of
                         proteins (which determines folding)."))
  (wn20-synset ((:set (:triple "string" 5 "n")))))

;;; ----------

(inhibited-by has 
  (inverse (inhibits))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-gloss ("is inhibited by")))

;;; ----------

(inhibits has 
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (inhibited-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("inhibits")))

;;; ----------

(Innovation has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "invention" 2 "n") (:triple "creation" 2 "n") (:triple "innovation" 1 "n")))))

(every Innovation has 
  (text-nominalization ("innovation")))

;;; ----------

(input has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (inverse (input-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(input-of has 
  (inverse (input))
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Inquire has 
  (superclasses (Express))
  (required-slot (agent
                  object
                  recipient))
  (test-case ('((*santa has (instance-of (Tangible-Entity))) (*little-timmy has (instance-of (Tangible-Entity))) (*question has (instance-of (Information)) (information-content ("Why does god kill puppies and grandmas?"))) (*inquires has (instance-of (Inquire)) (agent (*little-timmy)) (recipient (*santa)) (object (*question))) (do-and-next *inquires) (the text-gen of (thelast Inquire)) ((the plays of (the object of (thelast Inquire))) isa Question) ((the experiencer of (thelast Be-Known)) = *little-timmy))))
  (wn16-synset ((:set (:triple "inquire" 1 "v") (:triple "ask" 1 "v") (:triple "ask" 3 "v") (:triple "ask" 7 "v") (:triple "enquire" 1 "v"))))
  (wn20-synset ((:set (:triple "inquire" 1 "v") (:triple "ask" 1 "v") (:triple "ask" 3 "v") (:triple "ask" 6 "v") (:triple "enquire" 1 "v")))))

(every Inquire has-definition 
  (instance-of (Express))
  (object ((a Information with (plays ((a Question)))))))

(every Inquire has 
  (object ((must-be-a Information with (plays ((a Question))))))
  (recipient ((a Tangible-Entity)))
  (text-nominalization ("inquiry")))

;;; ----------

(Institution has 
  (subclasses (Educational-Institution
               Company))
  (superclasses (Organization))
  (description ("a work organization"))
  (wn20-synset ((:set (:triple "institution" 1 "n") (:triple "establishment" 2 "n")))))

;;; ----------

(Instruction has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "direction" 6 "n") (:triple "command" 7 "n") (:triple "statement" 6 "n") (:triple "program_line" 1 "n"))))
  (wn20-synset ((:set (:triple "direction" 6 "n") (:triple "command" 7 "n") (:triple "statement" 6 "n") (:triple "program_line" 1 "n")))))

(every Instruction has 
  (in-event ((a Action)))
  (played-by ((a Information with (information-content ((must-be-a Action))) (object-of ((the in-event of Self)))))))

;;; ----------

(instrument has 
  (primary-slot-of (Action
                    Activate
                    Add
                    Be-Attached-To
                    Be-Blocked
                    Be-Supported
                    Be-Unblocked
                    Block
                    Break
                    Close
                    Copy
                    Create
                    Damage
                    Deactivate
                    Deliver
                    Detach
                    Donate
                    Duplicate
                    Feed
                    Give
                    Harm
                    Impair
                    Lose
                    Obtain
                    Open
                    Produce
                    Receive
                    Release
                    Relinquish
                    Remove
                    Ruin
                    Send
                    Store
                    Supply
                    Support
                    Take-Apart
                    Take
                    Transfer
                    Unobstruct
                    Withdraw))
  (instance-of (Participant-Relation
                Agentive-Relation))
  (domain (Event))
  (range (Entity))
  (inverse (instrument-of))
  (text-slot (text-instrument))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "instrumental_role" 1 "n") (:triple "instrument" 5 "n") (:triple "use" 1 "v"))))
  (text-gloss ("uses")))

;;; ----------

(instrument-of has 
  (inverse (instrument))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation
                Agentive-Relation))
  (text-gloss ("is used in")))

;;; ----------

(Instrument-Role has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "instrument" 2 "n") (:triple "instrument" 3 "n") (:triple "tool" 2 "n") (:triple "pawn" 2 "n"))))
  (wn20-synset ((:set (:triple "instrument" 2 "n") (:triple "instrument" 3 "n") (:triple "tool" 2 "n") (:triple "pawn" 2 "n")))))

(every Instrument-Role has 
  (in-event ((must-be-a Event)))
  (played-by ((a Entity with (instrument-of ((the in-event of Self)))))))

;;; ----------

(Intangible-Entity has 
  (subclasses (Money
               Language
               Conceptual-Entity))
  (superclasses (Entity)))

;;; ----------

(integrity has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Integrity-Value))
  (scale-class (Integrity-Scale))
  (scalar-constant-class (Integrity-Constant))
  (inverse (integrity-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "integrity" 1 "n") (:triple "unity" 1 "n") (:triple "wholeness" 1 "n")))))

;;; ----------

(Integrity-Constant has 
  (superclasses (Constant))
  (instances (*impermeable
              *semi-permeable
              *permeable))
  (element-type-of (*impermeable-permeable-scale))
  (scalar-constant-class-of (integrity)))

;;; ----------

(integrity-of has 
  (inverse (integrity))
  (range (Tangible-Entity))
  (domain (Integrity-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Integrity-Scale has 
  (superclasses (Scale))
  (instances (*impermeable-permeable-scale))
  (scale-class-of (integrity)))

;;; ----------

(Integrity-Value has 
  (superclasses (Property-Value))
  (test-case ('((Cheese has (superclasses (Substance))) (*Romano has (instance-of (Cheese)) (integrity ((a Integrity-Value)))) (*Swiss has (instance-of (Cheese)) (integrity ((a Integrity-Value with (value ((:pair *permeable Cheese))) (less-than ((the integrity of *Romano))))))) (the value of (the integrity of *Swiss)) ((the less-than of (the integrity of *Swiss)) includes (the integrity of *Romano)) ((the greater-than of (the integrity of *Romano)) includes (the integrity of *Swiss)))))
  (range-of (integrity))
  (domain-of (integrity-of)))

;;; ----------

(intensity has 
  (instance-of (EntityProperty
                EventProperty))
  (domain (Thing))
  (range (Intensity-Value))
  (scale-class (Intensity-Scale))
  (scalar-constant-class (Intensity-Constant))
  (cardinal-unit-class (UoM-Intensity))
  (inverse (intensity-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "intensity" 1 "n") (:triple "intensity" 3 "n") (:triple "intensity" 4 "n") (:triple "strength" 6 "n") (:triple "intensity level" 1 "n") (:triple "volume" 6 "n") (:triple "loudness" 1 "n") (:triple "saturation" 4 "n") (:triple "chroma" 1 "n") (:triple "vividness" 2 "n")))))

;;; ----------

(Intensity-Constant has 
  (superclasses (Constant))
  (instances (*negligible
              *weak
              *strong
              *low
              *medium
              *high))
  (scalar-constant-class-of (intensity))
  (element-type-of (*weak-strong-scale)))

;;; ----------

(intensity-of has 
  (inverse (intensity))
  (range (Thing))
  (domain (Intensity-Value))
  (instance-of (EntityProperty
                EventProperty)))

;;; ----------

(Intensity-Scale has 
  (superclasses (Scale))
  (scale-class-of (intensity))
  (instances (*weak-strong-scale)))

;;; ----------

(Intensity-Value has 
  (superclasses (Property-Value))
  (test-case ('((Star has (superclasses (Thing))) (Lightbulb has (superclasses (Thing))) (*whitegiant has (instance-of (Drink)) (intensity ((a Intensity-Value)))) (*browndwarf has (instance-of (Drink)) (intensity ((a Intensity-Value with (value ((:pair *strong Lightbulb) (:pair *weak Star))) (less-than ((the intensity of *whitegiant))))))) (the value of (the intensity of *browndwarf)) ((the less-than of (the intensity of *browndwarf)) includes (the intensity of *whitegiant)) ((the greater-than of (the intensity of *whitegiant)) includes (the intensity of *browndwarf)))))
  (range-of (intensity))
  (domain-of (intensity-of)))

;;; ----------

(Intentional has 
  (superclasses (Cliche))
  (test-case ('((*chicks has (instance-of (Physical-Object))) (Impress has (superclasses (Action))) (Work-Out has (superclasses (Action))) (a Impress with (object (*chicks))) (*Sal has (instance-of (Entity)) (has-goal ((thelast Impress)))) (the has-goal of *Sal) (a Work-Out with (agent (*Sal)) (objective ((thelast Impress)))) ((thelast Work-Out) isa Intentional) ((the has-goal of *Sal) includes (the objective of (thelast Work-Out))))))
  (subclasses (Invade)))

(every Intentional has-definition 
  (instance-of (Event))
  (agent ((a Entity)))
  (objective ((a Event with (is-goal-of ((the agent of Self)))))))

(every Intentional has 
  (agent ((a Entity)))
  (objective ((a Event with (is-goal-of ((the agent of Self))))))
  (text-definition-sentence (()))
  (text-definition-sentence-of (()))
  (text-nominalization (()))
  (text-nominalization-of (()))
  (text-content (()))
  (text-content-of (()))
  (text-existential-there (()))
  (text-existential-there-of (()))
  (text-toward (()))
  (text-toward-of (()))
  (text-subj (()))
  (text-subj-of (()))
  (text-subj-phrase (()))
  (text-subj-phrase-of (()))
  (text-slot (()))
  (text-slot-of (()))
  (text-sentence (()))
  (text-sentence-of (()))
  (text-premodslots (()))
  (text-premodslots-of (()))
  (text-premods (()))
  (text-premods-of (()))
  (text-postmodslots (()))
  (text-postmodslots-of (()))
  (text-postmods (()))
  (text-postmods-of (()))
  (text-phrase (()))
  (text-phrase-of (()))
  (text-passive-verbseq (()))
  (text-passive-verbseq-of (()))
  (text-passive-verbseq-sg (()))
  (text-passive-verbseq-sg-of (()))
  (text-passive-verbseq-pl (()))
  (text-passive-verbseq-pl-of (()))
  (text-passive-sentence (()))
  (text-passive-sentence-of (()))
  (text-passive-phrase (()))
  (text-passive-phrase-of (()))
  (text-particle (()))
  (text-particle-of (()))
  (text-number (()))
  (text-number-of (()))
  (text-nom-sentence (()))
  (text-nom-sentence-of (()))
  (text-indef-head (()))
  (text-indef-head-of (()))
  (text-indef-determiner (()))
  (text-indef-determiner-of (()))
  (text-head (()))
  (text-head-of (()))
  (text-gen (()))
  (text-gen-of (()))
  (text-dobj (()))
  (text-dobj-of (()))
  (text-dobj-phrase (()))
  (text-dobj-phrase-of (()))
  (text-description (()))
  (text-description-of (()))
  (text-def-head (()))
  (text-def-head-of (()))
  (text-def-determiner (()))
  (text-def-determiner-of (()))
  (text-base-phrase (()))
  (text-base-phrase-of (()))
  (text-arguments (()))
  (text-arguments-of (()))
  (text-argslots (()))
  (text-argslots-of (()))
  (text-active-verbseq (()))
  (text-active-verbseq-of (()))
  (text-active-verbseq-sg (()))
  (text-active-verbseq-sg-of (()))
  (text-active-verbseq-pl (()))
  (text-active-verbseq-pl-of (()))
  (text-active-sentence (()))
  (text-active-sentence-of (()))
  (text-active-phrase (()))
  (text-active-phrase-of (()))
  (text-subevent-of (()))
  (text-subevent (()))
  (slot-gloss (()))
  (slot-gloss-of (()))
  (text-site (()))
  (text-site-of (()))
  (text-resulting-state (()))
  (text-resulting-state-of (()))
  (text-result (()))
  (text-result-of (()))
  (text-recipient (()))
  (text-recipient-of (()))
  (text-raw-material (()))
  (text-raw-material-of (()))
  (text-is-possessed-by (()))
  (text-possesses (()))
  (text-path (()))
  (text-path-of (()))
  (text-origin (()))
  (text-origin-of (()))
  (text-object (()))
  (text-object-of (()))
  (text-material (()))
  (text-material-of (()))
  (text-is-west-of (()))
  (text-is-east-of (()))
  (text-is-southwest-of (()))
  (text-is-northeast-of (()))
  (text-is-over (()))
  (text-is-under (()))
  (text-is-outside (()))
  (text-is-outside-of (()))
  (text-is-oriented-toward (()))
  (text-is-oriented-toward-of (()))
  (text-is-opposite (()))
  (text-is-on (()))
  (text-has-on-it (()))
  (text-is-northwest-of (()))
  (text-is-southeast-of (()))
  (text-is-north-of (()))
  (text-is-south-of (()))
  (text-is-near (()))
  (text-is-near-of (()))
  (text-is-inside (()))
  (text-encloses (()))
  (text-is-facing (()))
  (text-is-faced-by (()))
  (text-is-between (()))
  (text-is-between-of (()))
  (text-is-beside (()))
  (text-is-behind (()))
  (text-is-in-front-of (()))
  (text-is-at (()))
  (text-is-at-of (()))
  (text-is-along (()))
  (text-is-along-of (()))
  (text-is-above (()))
  (text-is-below (()))
  (text-instrument (()))
  (text-instrument-of (()))
  (text-is-part-of (()))
  (text-has-part (()))
  (text-donor (()))
  (text-donor-of (()))
  (text-destination (()))
  (text-destination-of (()))
  (text-causes (()))
  (text-caused-by (()))
  (text-beneficiary (()))
  (text-beneficiary-of (()))
  (text-base (()))
  (text-base-of (()))
  (text-away-from (()))
  (text-away-from-of (()))
  (text-agent (()))
  (text-agent-of (()))
  (text-abuts (()))
  (text-abuts-of (())))

;;; ----------

(Interaction has 
  (subclasses (Session
               Discussion
               Discourse))
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "interaction" 1 "n")))))

(every Interaction has 
  (text-nominalization ("interaction")))

;;; ----------

(Interpret has 
  (superclasses (Action))
  (required-slot (agent
                  object))
  (test-case ('((*Tale has (instance-of (Information))) (*Bubba has (instance-of (Tangible-Entity))) (*AnExpress has (instance-of (Express)) (object (*Tale))) (*AnInterpret has (instance-of (Interpret)) (agent (*Bubba)) (object ((the result of *AnExpress)))) (do-and-next *AnInterpret) ((the object of (the resulting-state of *AnInterpret)) = *Tale) ((the experiencer of (the resulting-state of *AnInterpret)) = *Bubba))))
  (wn16-synset ((:set (:triple "interpret" 1 "v") (:triple "interpret" 6 "v") (:triple "understand" 1 "v") (:triple "understand" 3 "v"))))
  (wn20-synset ((:set (:triple "interpret" 1 "v") (:triple "interpret" 6 "v") (:triple "understand" 1 "v") (:triple "understand" 3 "v"))))
  (subclasses (Learn)))

(every Interpret has 
  (agent ((a Tangible-Entity)))
  (object ((a Message)))
  (result ((the Information object of (the result-of of (the object of Self)))))
  (resulting-state ((a Be-Known)))
  (add-list ((:triple (the resulting-state of Self) object (the result of Self) [Interpret-add-1])
             (:triple (the resulting-state of Self) experiencer (the agent of Self) [Interpret-add-2])))
  (text-nominalization ("interpreting")))

;;; ----------

(interrupted-by has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (range (Event))
  (inverse (interrupts))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(interrupts has 
  (inverse (interrupted-by))
  (range (Event))
  (domain (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Invade has 
  (superclasses (Trespass
                 Intentional))
  (required-slot (agent
                  object
                  destination))
  (test-case ('((new-situation) (*Dwayne has (instance-of (Entity))) (*DwaynesProperty has (instance-of (Spatial-Entity)) (is-possessed-by (*Dwayne))) (*Venutian has (instance-of (Entity))) (a Invade with (agent (*Venutian)) (destination (*DwaynesProperty))) ((the is-possessed-by of (the destination of (thelast Invade))) = *Dwayne) ((the prevents of (the has-goal of *Dwayne)) includes (thelast Invade)) ((the is-goal-of of (the objective of (thelast Invade))) = *Venutian) ((the has-goal of *Venutian) includes (the objective of (thelast Invade))) (do-and-next (thelast Invade)) ((the location of *Venutian) = *DwaynesProperty))))
  (wn20-synset ((:set (:triple "invade" 1 "v") (:triple "occupy" 7 "v") (:triple "penetrate" 1 "v") (:triple "perforate" 2 "v")))))

(every Invade has 
  (text-active-verbseq-sg ("invades"))
  (text-active-verbseq-pl ("invade"))
  (text-argslots ((:seq destination)))
  (text-destination (""))
  (text-nominalization ("invasion")))

;;; ----------

(is-above has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-below))
  (text-slot (text-is-above))
  (cardinality (N-to-N))
  (wn20-synset ((:set (:triple "above" 2 "r") (:triple "higher_up" 1 "r") (:triple "in_a_higher_place" 1 "r") (:triple "to_a_higher_place" 1 "r")))))

;;; ----------

(is-along has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-along))
  (text-slot (text-is-along))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-at has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-at-of))
  (text-slot (text-is-at))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-at-of has 
  (inverse (is-at))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (combine-values-by-appending (t))
  (text-gloss ("is at")))

;;; ----------

(is-basic-functional-unit-of has 
  (inverse (has-basic-functional-unit))
  (range (Entity))
  (domain (Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is a basic functional unit of")))

;;; ----------

(is-basic-structural-unit-of has 
  (inverse (has-basic-structural-unit))
  (range (Tangible-Entity))
  (domain (Tangible-Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is a basic structural unit of")))

;;; ----------

(is-behind has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-in-front-of))
  (text-slot (text-is-behind))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-below has 
  (inverse (is-above))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is below")))

;;; ----------

(is-beside has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-beside))
  (text-slot (text-is-beside))
  (cardinality (N-to-N)))

;;; ----------

(is-between has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (text-slot (text-is-between))
  (cardinality (N-to-N)))

;;; ----------

(is-between-of has 
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Slot)))

;;; ----------

(is-east-of has 
  (inverse (is-west-of))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-slot (text-is-east-of)))

;;; ----------

(is-example-of has 
  (inverse (has-example))
  (range (Thing))
  (domain (Thing))
  (instance-of (KM-Slot-Group)))

;;; ----------

(is-faced-by has 
  (inverse (is-facing))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is faced by")))

;;; ----------

(is-facing has 
  (instance-of (Spatial-Relation))
  (description ("FRAME is facing VALUE.  In other words, the salient face or front side intrinsic to FRAME is the side of FRAME that is closest to VALUE."))
  (superslots (is-oriented-toward))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-faced-by))
  (fluent-status (*Inertial-Fluent))
  (text-slot (text-is-facing))
  (cardinality (N-to-N)))

;;; ----------

(is-functional-part-of has 
  (inverse (has-functional-part))
  (range (Entity))
  (domain (Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is a functional part of")))

;;; ----------

(is-goal-of has 
  (inverse (has-goal))
  (range (Entity))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-gloss ("is a goal of")))

;;; ----------

(is-in-front-of has 
  (inverse (is-behind))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is in front of")))

;;; ----------

(is-inside has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (encloses))
  (text-slot (text-is-inside))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-near has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-near))
  (text-slot (text-is-near))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-north-of has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-south-of))
  (text-slot (text-is-north-of))
  (cardinality (N-to-N)))

;;; ----------

(is-northeast-of has 
  (inverse (is-southwest-of))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-slot (text-is-northeast-of)))

;;; ----------

(is-northwest-of has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-southeast-of))
  (text-slot (text-is-northwest-of))
  (cardinality (N-to-N)))

;;; ----------

(is-on has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (has-on-it))
  (text-slot (text-is-on))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-opposite has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-opposite))
  (text-slot (text-is-opposite))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-oriented-toward has 
  (subslots (is-facing))
  (instance-of (Spatial-Relation))
  (description ("Spatially oriented toward in at least one of
several possible senses of `oriented toward'.  It could mean, for
example, that FRAME is tilted toward FILLER, or FRAME faces FILLER
(but see is-facing), or the maxor axis of FRAME points toward FILLER,
or FRAME has a rotational axis toward FILLER, etc ."))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (text-slot (text-is-oriented-toward))
  (cardinality (N-to-N)))

;;; ----------

(is-oriented-toward-of has 
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("has oriented toward it")))

;;; ----------

(is-outside has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (does-not-enclose))
  (text-slot (text-is-outside))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-over has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (is-under))
  (text-slot (text-is-over))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(is-part-of has 
  (inverse (has-part))
  (range (Entity))
  (domain (Entity))
  (instance-of (Meronymic-Relation
                Spatial-Relation))
  (text-gloss ("is part of"))
  (text-slot (text-is-part-of)))

;;; ----------

(is-possessed-by has 
  (inverse (possesses))
  (range (Entity))
  (domain (Entity))
  (instance-of (Participant-Relation))
  (text-slot (text-is-possessed-by))
  (text-gloss ("is possessed by")))

;;; ----------

(is-region-of has 
  (inverse (has-region))
  (range (Tangible-Entity))
  (domain (Spatial-Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is a region of")))

;;; ----------

(is-south-of has 
  (inverse (is-north-of))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-slot (text-is-south-of)))

;;; ----------

(is-southeast-of has 
  (inverse (is-northwest-of))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-slot (text-is-southeast-of)))

;;; ----------

(is-southwest-of has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-northeast-of))
  (text-slot (text-is-southwest-of))
  (cardinality (N-to-N)))

;;; ----------

(is-structural-part-of has 
  (inverse (has-structural-part))
  (range (Tangible-Entity))
  (domain (Tangible-Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is a structural part of")))

;;; ----------

(is-under has 
  (inverse (is-over))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is under")))

;;; ----------

(is-west-of has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-east-of))
  (text-slot (text-is-west-of))
  (cardinality (N-to-N)))

;;; ----------

(KM-Class has 
  (subclasses (Viewpoint
               Viewpoint-Query-Type
               Version
               Method
               Equation-Set
               Detailed-Instance
               Cliche))
  (superclasses (Thing)))

;;; ----------

(kreq-list has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(kreq-list-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Language has 
  (superclasses (Intangible-Entity))
  (wn16-synset ((:set (:triple "language" 1 "n") (:triple "communication" 1 "n"))))
  (wn20-synset ((:set (:triple "language" 1 "n") (:triple "communication" 1 "n"))))
  (subclasses (Natural-Language))
  (range-of (information-language))
  (domain-of (information-language-of)))

;;; ----------

(latitude has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Angle-Value))
  (scalar-constant-class (Latitude-Constant))
  (cardinal-unit-class (UoM-Angle))
  (inverse (latitude-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "latitude" 1 "n")))))

;;; ----------

(Latitude-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (latitude)))

;;; ----------

(latitude-of has 
  (inverse (latitude))
  (range (Spatial-Entity))
  (domain (Angle-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Learn has 
  (superclasses (Interpret))
  (description ("Someone acquires knowledge not known before"))
  (required-slot (agent
                  object))
  (test-case ('((*Fire-Is-Pretty-Hot has (instance-of (Information))) (*Little-Joe has (instance-of (Tangible-Entity))) (*Learn has (instance-of (Learn)) (agent (*Little-Joe)) (result (*Fire-Is-Pretty-Hot))) (not (the Be-Known experiencer-of of *Little-Joe)) (do-and-next *Learn) ((the object of (the resulting-state of *Learn)) = *Fire-Is-Pretty-Hot) ((the experiencer of (the resulting-state of *Learn)) = *Little-Joe))))
  (wn16-synset ((:set (:triple "learn" 1 "v") (:triple "learn" 2 "v") (:triple "learn" 3 "v") (:triple "learn" 4 "v") (:triple "word" 1 "v") (:triple "pick_up" 5 "v") (:triple "out" 2 "v") (:triple "discover" 2 "v") (:triple "see" 6 "v") (:triple "memorize" 1 "v") (:triple "study" 4 "v"))))
  (wn20-synset ((:set (:triple "learn" 1 "v") (:triple "learn" 2 "v") (:triple "learn" 3 "v") (:triple "learn" 4 "v") (:triple "word" 1 "v") (:triple "pick_up" 5 "v") (:triple "out" 3 "v") (:triple "discover" 3 "v") (:triple "see" 6 "v") (:triple "memorize" 1 "v") (:triple "study" 4 "v")))))

(every Learn has 
  (soft-pcs-list ((:triple (the agent of Self) experiencer-of (mustnt-be-a Be-Known with (object ((the object of Self)))))))
  (dcs-list ((:triple (the agent of Self) experiencer-of (a Be-Known with (object ((the object of Self)))))))
  (text-nominalization ("learning")))

;;; ----------

(Learning has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "acquisition" 3 "n") (:triple "learning" 1 "n") (:triple "basic_cognitive_process" 1 "n")))))

(every Learning has 
  (text-nominalization ("learning")))

;;; ----------

(Leave has 
  (superclasses (Locomotion))
  (required-slot (agent
                  object
                  origin))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq object "the thing Left")
                        (:seq agent "the Leaver")
                        (:seq origin "the place Left from")
                        (:seq destination "the place Left to")
                        (:seq path "the place Left along or through")
                        (:seq toward "the place Left toward")
                        (:seq away-from "the place Left away from")))
  (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Living-Entity))) (*John has (location (*Boston))) ((the location of *John) = *Boston) (a Leave with (agent (*John)) (origin ((the location of *John))) (destination (*Austin))) (do-and-next (thelast Leave)) (the text-gen of (thelast Leave)) ((the location of *John) = *Austin) ((the location of *John) /= *Boston))))
  (wn16-synset ((:set (:triple "leave" 1 "v") (:triple "go_away" 2 "v") (:triple "go_forth" 1 "v"))))
  (wn20-synset ((:set (:triple "leave" 1 "v") (:triple "go_away" 2 "v") (:triple "go_forth" 1 "v")))))

(every Leave has 
  (origin ((a Spatial-Entity)))
  (text-active-verbseq-sg ("leaves"))
  (text-active-verbseq-pl ("leave"))
  (text-argslots ((:seq origin)))
  (text-origin (()))
  (preparatory-event ((:default (a Go-To with (destination ((the origin of Self))) (object ((the object of Self)))))))
  (text-nominalization ("leaving")))

;;; ----------

(length has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Length-Scale))
  (scalar-constant-class (Length-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (length-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "length" 1 "n")))))

;;; ----------

(Length-Constant has 
  (superclasses (Constant))
  (instances (*short
              *long))
  (scalar-constant-class-of (length))
  (element-type-of (*short-long-scale)))

;;; ----------

(length-of has 
  (inverse (length))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Length-Scale has 
  (superclasses (Scale))
  (scale-class-of (length))
  (instances (*short-long-scale)))

;;; ----------

(Length-Value has 
  (superclasses (Property-Value))
  (doc-file ("length"))
  (test-case ('((Stick has (superclasses (Physical-Object))) (Tree has (superclasses (Physical-Object))) (*mybigstick has (instance-of (Stick)) (height ((a Length-Value))) (length ((a Length-Value)))) (*myshortstick has (instance-of (Stick)) (length ((a Length-Value with (value ((:pair 20 *inch) (:pair *short Stick) (:pair *short Tree))) (less-than ((the length of *mybigstick)))))) (height ((a Length-Value with (value ((:pair 1.5 *foot) (:pair *average Stick) (:pair *short Tree))) (less-than ((the height of *mybigstick))))))) (the value of (the length of *myshortstick)) ((the less-than of (the length of *myshortstick)) includes (the length of *mybigstick)) ((the greater-than of (the length of *mybigstick)) includes (the length of *myshortstick)) (the value of (the height of *myshortstick)) ((the less-than of (the height of *myshortstick)) includes (the height of *mybigstick)) ((the greater-than of (the height of *mybigstick)) includes (the height of *myshortstick)) (Flagpole has (superclasses (Physical-Object))) (*bigflagpole has (instance-of (Flagpole)) (height ((a Length-Value)))) (*shortflagpole has (instance-of (Flagpole)) (height ((a Length-Value with (value ((:pair 1.5 *meter) (:pair *average Stick) (:pair *short Tree))) (less-than ((the height of *bigflagpole))))))) (the less-than of (the height of *shortflagpole)) ((the height-of of (the greater-than of (the height of *bigflagpole))) = (*shortflagpole)) ((the height of *shortflagpole) property-gt (a Length-Value with (value ((:pair 55 *inch))))) (Pool has (superclasses (Physical-Object))) (Ocean has (superclasses (Physical-Object))) (*pacificocean has (instance-of (Ocean)) (depth ((a Length-Value)))) (*gregorygympool has (instance-of (Pool)) (depth ((a Length-Value with (value ((:pair *shallow Ocean) (:pair *deep Pool))) (less-than ((the depth of *pacificocean))))))) (the value of (the depth of *gregorygympool)) ((the less-than of (the depth of *gregorygympool)) includes (the depth of *pacificocean)) ((the greater-than of (the depth of *pacificocean)) includes (the depth of *gregorygympool)))))
  (range-of (circumference
             depth
             diameter
             distance
             height
             length
             perimeter
             radius
             thickness
             width))
  (domain-of (circumference-of
              depth-of
              diameter-of
              distance-of
              height-of
              length-of
              perimeter-of
              radius-of
              thickness-of
              width-of)))

(every Length-Value has 
  (primary-slot (length)))

;;; ----------

(Lengthen has 
  (superclasses (Increase))
  (test-case ('((*mycarantenna has (instance-of (Substance)) (length (*mycarantennalength))) (*mycarantennalength has (instance-of (Length-Value)) (value ((:pair 10000 *millimeter)))) (a Increase with (object (*mycarantenna)) (property-slot (length))) ((thelast Increase) isa Lengthen) (do-and-next (thelast Lengthen)) ((the greater-than of (the length of *mycarantenna)) includes *mycarantennalength))))
  (wn20-synset ((:set (:triple "lengthen" 1 "v") (:triple "lengthen" 2 "v")))))

(every Lengthen has-definition 
  (instance-of (Increase))
  (property-slot (length)))

(every Lengthen has 
  (text-nominalization ("lengthening")))

;;; ----------

(less-than has 
  (inverse (greater-than))
  (range (Property-Value))
  (domain (Property-Value))
  (instance-of (PropertyProperty)))

;;; ----------

(less-than-or-equal-to has 
  (inverse (greater-than-or-equal-to))
  (range (Property-Value))
  (domain (Property-Value))
  (instance-of (PropertyProperty)))

;;; ----------

(Let-Fall has 
  (defeated-by-class-of (Be-Supported))
  (subclasses (Dive))
  (superclasses (Unobstruct))
  (required-slot (object
                  agent
                  causes))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "causer")
                        (:seq causes "causes")))
  (wn16-synset ((:set (:triple "drop" 1 "v"))))
  (wn20-synset ((:set (:triple "drop" 1 "v")))))

(every Let-Fall has 
  (object ((a Tangible-Entity)))
  (agent ((a Tangible-Entity)))
  (causes ((a Fall with (object ((the object of Self))))))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Supported))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Supported) [Let-Fall-pcs-1]))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Let-Fall-del-1]))))
  (text-active-verbseq-sg ("lets"))
  (text-active-verbseq-pl ("let"))
  (text-passive-verbseq-sg ("is left to"))
  (text-passive-verbseq-pl ("are left to"))
  (text-argslots ((:seq text-particle destination)))
  (text-particle ("fall"))
  (preparatory-event ((:default (:set (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self))))))) (a Support with (object ((the object of Self))) (agent ((the agent of Self))) (instrument ((the instrument of Self))))))))
  (interrupted-by ((must-be-a Support with (object ((the object of Self))))))
  (text-nominalization ("letting")))

;;; ----------

(Let-Go-Of has 
  (defeated-by-class-of (Be-Held))
  (superclasses (Unobstruct))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "agent")))
  (wn16-synset ((:set (:triple "let_go_of" 1 "v") (:triple "let_go" 1 "v") (:triple "release" 1 "v"))))
  (wn20-synset ((:set (:triple "let_go_of" 1 "v") (:triple "let_go" 1 "v") (:triple "release" 1 "v")))))

(every Let-Go-Of has 
  (object ((a Tangible-Entity)))
  (agent ((a Tangible-Entity)))
  (soft-pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Held)))))
  (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Held) and ((the agent of It) = (the agent of Self))))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Let-Go-Of-del-1]) (:triple It agent (the agent of Self) [Let-Go-Of-del-2])))))
  (dcs-list ((forall (the location of (the agent of Self)) (:triple It is-at (the location of (the object of Self)) [Let-Go-Of-dcs-1]))))
  (interrupted-by ((must-be-a Hold with (object ((the object of Self))) (agent ((the agent of Self))) [Let-Go-Of-interrupted-1])))
  (text-active-verbseq-sg ("lets go of"))
  (text-active-verbseq-pl ("let go of"))
  (text-passive-verbseq-sg ("is let go of"))
  (text-passive-verbseq-pl ("are let go of"))
  (text-nominalization ("letting")))

;;; ----------

(Lie has 
  (subclasses (Deceive))
  (superclasses (Express))
  (required-slot (agent
                  object))
  (test-case ('((*little-white-lie has (instance-of (Information)) (truth ((a Truth-Value with (value (*false)))))) (*Liar has (instance-of (Tangible-Entity))) (*lie has (instance-of (Lie)) (agent (*Liar)) (object (*little-white-lie))) (do-and-next *lie) (_LieBeKnown == (theoneof (the instances of Be-Known) where ((the object of It) = *little-white-lie))) ((the experiencer of _LieBeKnown) = *Liar) ((the value of (the truth of (the object of _LieBeKnown))) = *false))))
  (wn16-synset ((:set (:triple "lie" 5 "v") (:triple "misinform" 1 "v") (:triple "mislead" 2 "v"))))
  (wn20-synset ((:set (:triple "lie" 5 "v") (:triple "misinform" 1 "v") (:triple "mislead" 2 "v")))))

(every Lie has 
  (object ((a Information with (truth ((a Truth-Value with (value (*false))))))))
  (pcs-list ((:triple (the agent of Self) experiencer-of (a Be-Known with (object ((a Information with (information-content ((the truth of (the object of Self))))))) (experiencer ((the agent of Self)))))))
  (text-active-verbseq-sg ("lies"))
  (text-active-verbseq-pl ("lie"))
  (text-nominalization ("lying")))

;;; ----------

(Light has 
  (description ("Electromagnetic energy vibrations in the visible frequency range that propagate through a region."))
  (superclasses (Energy))
  (wn20-synset ((:set (:triple "light" 1 "n") (:triple "visible_light" 1 "n") (:triple "visible_radiation" 1 "n")))))

(every Light has 
  (object-of ((a Move))))

;;; ----------

(Liquid-Substance has 
  (superclasses (Fluid-Substance))
  (description ("A substance in the liquid state at room temperature"))
  (wn20-synset ((:set (:triple "liquid" 1 "n") (:triple "liquid" 3 "n") (:triple "liquid body substance" 1 "n") (:triple "bodily fluid" 1 "n") (:triple "body fluid" 1 "n") (:triple "humor" 6 "n") (:triple "humour" 4 "n"))))
  (subclasses (Water)))

(every Liquid-Substance has 
  (physical-state ((if (not (has-value (the temperature of Self))) then ((a State-Value with (value (*liquid))))))))

;;; ----------

(Living-Entity has 
  (subclasses (Organism
               Cell))
  (superclasses (Physical-Object))
  (description ("Any living organism"))
  (wn20-synset ((:set (:triple "living_thing" 1 "n") (:triple "animate_thing" 1 "n"))))
  (domain-of (sentience
              sex))
  (range-of (sentience-of
             sex-of)))

;;; ----------

(Load has 
  (superclasses (Move-Into))
  (required-slot (object
                  base))
  (primary-slot (destination
                 origin
                 path))
  (wn16-synset ((:set (:triple "load" 1 "v") (:triple "load" 2 "v") (:triple "load" 3 "v") (:triple "charge" 16 "v") (:triple "lade" 2 "v") (:triple "laden" 2 "v") (:triple "load_up" 1 "v") (:triple "stow" 1 "v"))))
  (wn20-synset ((:set (:triple "load" 1 "v") (:triple "load" 2 "v") (:triple "charge" 16 "v") (:triple "lade" 2 "v") (:triple "laden" 2 "v") (:triple "load_up" 1 "v") (:triple "stow" 1 "v")))))

(every Load has 
  (causes ((a Activate with (object ((the base of Self))))))
  (text-active-verbseq-sg ("loads"))
  (text-active-verbseq-pl ("load"))
  (text-base ("into"))
  (text-nominalization ("loading")))

;;; ----------

(location has 
  (primary-slot-of (Collide
                    Confine
                    Tangible-Entity))
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Place))
  (inverse (location-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "located" 1 "a") (:triple "placed" 1 "a") (:triple "set" 3 "a") (:triple "situated" 1 "a") (:triple "location" 0 "n"))))
  (text-gloss ("is at")))

;;; ----------

(location-of has 
  (inverse (location))
  (range (Spatial-Entity))
  (domain (Place))
  (instance-of (Spatial-Relation))
  (combine-values-by-appending (t))
  (text-gloss ("is the location of")))

;;; ----------

(Locomotion has 
  (subclasses (Walk
               Leave
               Go-To
               Follow))
  (superclasses (Move
                 Reflexive-Cliche))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq agent "the mover")
                        (:seq object "the mover")))
  (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Living-Entity))) (*John has (location (*Boston))) (a Locomotion with (agent (*John)) (origin (*Boston)) (destination (*Austin))) (do-and-next (thelast Locomotion)) (the text-gen of (thelast Locomotion)) ((the location of *John) = *Austin))))
  (wn16-synset ((:set (:triple "locomote" 1 "v") (:triple "travel" 1 "v") (:triple "go" 1 "v") (:triple "move" 1 "v"))))
  (wn20-synset ((:set (:triple "locomote" 1 "v") (:triple "travel" 1 "v") (:triple "go" 1 "v") (:triple "move" 1 "v")))))

(every Locomotion has 
  (text-active-verbseq-sg ("locomotes"))
  (text-active-verbseq-pl ("locomote"))
  (text-nominalization ("locomotion")))

;;; ----------

(longitude has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Angle-Value))
  (scalar-constant-class (Longitude-Constant))
  (cardinal-unit-class (UoM-Angle))
  (inverse (longitude-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "longitude" 1 "n") (:triple "meridian" 2 "n") (:triple "line of longitude" 1 "n")))))

;;; ----------

(Longitude-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (longitude)))

;;; ----------

(longitude-of has 
  (inverse (longitude))
  (range (Spatial-Entity))
  (domain (Angle-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Lose has 
  (superclasses (Transfer))
  (required-slot (object
                  donor))
  (primary-slot (agent
                 recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing lost")
                        (:seq agent "causer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Mark has (instance-of (Tangible-Entity))) (*Book has (instance-of (Tangible-Entity))) (*Mark has (instance-of (Tangible-Entity)) (possesses (*Book))) (*Lose has (instance-of (Lose)) (donor (*Mark)) (object (*Book))) (do-and-next *Lose) (the text-gen of (thelast Lose)) ((the possesses of *Mark) = nil) ((the is-possessed-by of *Book) /= *Mark))))
  (wn16-synset ((:set (:triple "lose" 1 "v"))))
  (wn20-synset ((:set (:triple "lose" 1 "v"))))
  (subclasses (Relinquish)))

(every Lose has 
  (donor ((a Tangible-Entity)))
  (text-active-verbseq-sg ("loses"))
  (text-active-verbseq-pl ("lose"))
  (text-passive-verbseq-sg ("is lost"))
  (text-passive-verbseq-pl ("are lost"))
  (text-subj ((if (has-value (the agent of Self)) then (the agent of Self) else (the donor of Self))))
  (text-argslots ((:seq recipient instrument)))
  (text-active-sentence ((:seq (if ((the text-subj of Self) /= (the donor of Self)) then (:seq (the text-subj-phrase of Self) (if ((the number of (the text-subj of Self)) = 1) then ("causes") else ("cause")) (andify (the text-phrase of (the donor of Self))) ("to") (the text-active-verbseq-pl of Self)) else (:seq (the text-subj-phrase of Self) (the text-active-phrase of Self))) (the text-dobj-phrase of Self) (the text-arguments of Self))))
  (text-nominalization ("loss")))

;;; ----------

(luminance has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Luminance-Value))
  (scalar-constant-class (Luminance-Constant))
  (cardinal-unit-class (UoM-Luminance))
  (inverse (luminance-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "luminance" 1 "n") (:triple "brightness" 3 "n") (:triple "luminosity" 1 "n") (:triple "brightness level" 1 "n") (:triple "luminousness" 1 "n") (:triple "light" 4 "n")))))

;;; ----------

(Luminance-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (luminance)))

;;; ----------

(luminance-of has 
  (inverse (luminance))
  (range (Spatial-Entity))
  (domain (Luminance-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Luminance-Value has 
  (superclasses (Property-Value))
  (range-of (luminance))
  (domain-of (luminance-of)))

;;; ----------

(luminous-flux has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Luminous-Flux-Value))
  (scalar-constant-class (Luminous-Flux-Constant))
  (cardinal-unit-class (UoM-Luminous-Flux))
  (inverse (luminous-flux-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "luminous flux" 1 "n")))))

;;; ----------

(Luminous-Flux-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (luminous-flux)))

;;; ----------

(luminous-flux-of has 
  (inverse (luminous-flux))
  (range (Spatial-Entity))
  (domain (Luminous-Flux-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Luminous-Flux-Value has 
  (superclasses (Property-Value))
  (range-of (luminous-flux))
  (domain-of (luminous-flux-of)))

;;; ----------

(luminous-intensity has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Luminous-Intensity-Value))
  (scalar-constant-class (Luminous-Intensity-Constant))
  (cardinal-unit-class (UoM-Luminous-Intensity))
  (inverse (luminous-intensity-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "luminous intensity unit" 1 "n") (:triple "candlepower unit" 1 "n") (:triple "luminous intensity" 0 "n")))))

;;; ----------

(Luminous-Intensity-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (luminous-intensity)))

;;; ----------

(luminous-intensity-of has 
  (inverse (luminous-intensity))
  (range (Spatial-Entity))
  (domain (Luminous-Intensity-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Luminous-Intensity-Value has 
  (superclasses (Property-Value))
  (range-of (luminous-intensity))
  (domain-of (luminous-intensity-of)))

;;; ----------

(Lunch has 
  (superclasses (Meal))
  (wn20-synset ((:set (:triple "lunch" 1 "n"))
                (:set (:triple "luncheon" 1 "n"))
                (:set (:triple "tiffin" 1 "n"))
                (:set (:triple "dejeuner" 1 "n")))))

(every Lunch has 
  (text-nominalization ("lunch")))

;;; ----------

(Maintenance has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "care" 6 "n") (:triple "upkeep" 1 "n") (:triple "repair" 1 "n"))))
  (subclasses (Organizing)))

(every Maintenance has 
  (text-nominalization ("maintenance")))

;;; ----------

(Make-Accessible has 
  (subclasses (Unobstruct
               Unblock
               Expose
               Activate))
  (caused-by-class-of (Be-Accessible))
  (defeated-by-class-of (Be-Inaccessible))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 base))
  (cmap-correspondence ((:seq object "the thing made accessible")
                        (:seq agent "the entity that makes the object Accessable")
                        (:seq base "what the object is made accessible to")))
  (test-case ('((*Document has (instance-of (Physical-Object))) (a Make-Inaccessible with (object (*Document))) (try-do-and-next (thelast Make-Inaccessible)) (the text-gen of (thelast Make-Inaccessible)) (has-value (the Be-Inaccessible object-of of *Document)) (a Make-Accessible with (object (*Document))) (try-do-and-next (thelast Make-Accessible)) (the text-gen of (thelast Make-Accessible)) (not (has-value (the Be-Inaccessible object-of of *Document)))))))

(every Make-Accessible has 
  (object ((a Entity)))
  (agent ((must-be-a Entity)))
  (base ((must-be-a Thing)))
  (soft-pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Inaccessible)))))
  (defeats ((if (has-value (the base of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Inaccessible) and ((the base of It) = (the base of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Inaccessible)))))
  (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Make-Accessible-del-1]))))
  (text-active-verbseq-sg ("makes"))
  (text-active-verbseq-pl ("make"))
  (text-passive-verbseq-sg ("gets made"))
  (text-passive-verbseq-pl ("get made"))
  (text-argslots ((:seq text-particle base instrument path result)))
  (text-particle ("accessible"))
  (preparatory-event ((:default (a Make-Inaccessible with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("making")))

;;; ----------

(Make-Contact has 
  (caused-by-class-of (Be-Touching))
  (subclasses (Collide))
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things that Make-Contact")
                        (:seq agent "the Contact-Maker")
                        (:seq base "the place Made-Contact to")))
  (test-case ('((new-situation) (*mylips has (instance-of (Tangible-Entity))) (*yourlips has (instance-of (Tangible-Entity))) (not ((the abuts of *mylips) includes *yourlips)) (a Make-Contact with (object (*mylips)) (base (*yourlips))) (do-and-next (thelast Make-Contact)) (the text-gen of (thelast Make-Contact)) (forall (the resulting-state of (thelast Make-Contact)) (the text-gen of It)) (oneof (the Be-Touching object-of of *mylips) where ((the object of It) includes *yourlips)) ((the abuts of *mylips) includes *yourlips) (a Break-Contact with (object (*yourlips)) (base (*mylips))) (do-and-next (thelast Break-Contact)) (the text-gen of (thelast Break-Contact)) (not ((the abuts of *mylips) includes *yourlips)) (not (has-value (the Be-Touching object-of of *mylips))))))
  (wn16-synset ((:set (:triple "touch" 1 "v"))))
  (wn20-synset ((:set (:triple "touch" 1 "v")))))

(every Make-Contact has 
  (object ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
  (base ((exactly 1 Tangible-Entity)
         (a Tangible-Entity)))
  (resulting-state ((a Be-Touching)))
  (soft-pcs-list ((if (not ((the location of (the base of Self)) = (the location of (the object of Self)))) then (:triple (the object of Self) object-of (a Move with (destination ((the base of Self))))))))
  (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Touching with (object ((the base of Self)))) [Make-Contact-pcs-1])
             (:triple (the base of Self) object-of (mustnt-be-a Be-Touching with (object ((the object of Self)))) [Make-Contact-pcs-2])))
  (add-list ((:set (:triple (the resulting-state of Self) object (the object of Self) [Make-Contact-add-1]) (:triple (the resulting-state of Self) object (the base of Self) [Make-Contact-add-2]) (:triple (the base of Self) abuts (the object of Self) [Make-Contact-add-3]) (:triple (the object of Self) abuts (the base of Self) [Make-Contact-add-4]))))
  (text-active-verbseq-sg ("makes contact between"))
  (text-active-verbseq-pl ("make contact between"))
  (text-passive-verbseq-sg ("makes contact"))
  (text-passive-verbseq-pl ("make contact"))
  (text-base ((if (has-value (the base of Self)) then ("with"))))
  (preparatory-event ((:default (a Break-Contact with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("making")))

;;; ----------

(Make-Inaccessible has 
  (defeated-by-class-of (Be-Accessible))
  (caused-by-class-of (Be-Inaccessible))
  (subclasses (Obstruct
               Deactivate
               Conceal
               Block))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 base))
  (cmap-correspondence ((:seq object "the object made inaccessible")
                        (:seq base "the thing the object is made inaccessible to")
                        (:seq agent "the agent"))))

(every Make-Inaccessible has 
  (object ((a Entity)))
  (base ((must-be-a Thing)))
  (agent ((must-be-a Entity)))
  (resulting-state ((a Be-Inaccessible)))
  (add-list ((if (has-value (the base of Self)) then (:triple (the resulting-state of Self) base (the base of Self) [Make-Inaccessible-add-1]))
             (:triple (the resulting-state of Self) object (the object of Self) [Make-Inaccessible-add-2])
             (if (has-value (the agent of Self)) then (:triple (the resulting-state of Self) agent (the agent of Self) [Make-Inaccessible-add-3]))))
  (text-active-verbseq-sg ("makes"))
  (text-active-verbseq-pl ("make"))
  (text-passive-verbseq-sg ("gets made"))
  (text-passive-verbseq-pl ("get made"))
  (text-argslots ((:seq text-particle base instrument path result)))
  (text-particle ("inaccessible"))
  (preparatory-event ((:default (a Make-Accessible with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("making")))

;;; ----------

(Make-Request has 
  (superclasses (Communicate))
  (test-case ('((*Ed has (instance-of (Tangible-Entity))) (*Lucretia has (instance-of (Tangible-Entity))) (*Beer has (instance-of (Tangible-Entity))) (*Get-Me-A-Beer has (instance-of (Request)) (information-content ((a Deliver with (agent (*Lucretia)) (object (*Beer)) (recipient (*Ed)))))) (*Make-Request has (instance-of (Make-Request)) (agent (*Ed)) (recipient (*Lucretia)) (object (*Get-Me-A-Beer))) (do-and-next *Make-Request) (the text-gen of *Make-Request) ((the value of (the manner of *Make-Request)) = *politely) ((the experiencer of (thelast Be-Known)) = *Ed))))
  (wn16-synset ((:set (:triple "request" 1 "v") (:triple "request" 2 "v") (:triple "request" 3 "v") (:triple "bespeak" 2 "v") (:triple "call_for" 1 "v") (:triple "quest" 5 "v"))))
  (wn20-synset ((:set (:triple "request" 1 "v") (:triple "request" 2 "v") (:triple "request" 3 "v") (:triple "bespeak" 2 "v") (:triple "call_for" 1 "v") (:triple "quest" 5 "v")))))

(every Make-Request has-definition 
  (instance-of (Communicate))
  (object ((a Request)))
  (manner ((a Manner-Value with (value (*politely))))))

(every Make-Request has 
  (object ((a Request)))
  (manner ((a Manner-Value with (value (*politely)))))
  (text-nominalization ("making")))

;;; ----------

(manner has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Manner-Value))
  (categorical-constant-class (Manner-Constant))
  (inverse (manner-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "manner" 1 "n") (:triple "manner" 2 "n") (:triple "mode" 1 "n") (:triple "style" 2 "n") (:triple "way" 1 "n") (:triple "fashion" 1 "n") (:triple "personal manner" 1 "n")))))

;;; ----------

(Manner-Constant has 
  (superclasses (Constant))
  (instances (*dejectedly
              *happily
              *politely))
  (categorical-constant-class-of (manner)))

;;; ----------

(manner-of has 
  (inverse (manner))
  (range (Event))
  (domain (Manner-Value))
  (instance-of (EventProperty)))

;;; ----------

(Manner-Value has 
  (superclasses (Property-Value))
  (range-of (manner))
  (domain-of (manner-of)))

;;; ----------

(Mark has 
  (description ("The act of embodying a message in the form of a
printed ink, a physical mark or sketch, etc.  This includes any action
in which an object playing the role of writing implement (pen, pencil,
printer, magic marker, spray paint can, finger dipped in paint, etc)
writes, sketches, scribbles or sprays some kind of physical mark, set
of markings, or written text."))
  (superclasses (Embody
                 Produce))
  (wn20-synset ((:set (:triple "write" 7 "v"))))
  (subclasses (Print)))

(every Mark has 
  (result ((a Physical-Mark)))
  (instrument ((must-be-a Tangible-Entity)))
  (text-active-verbseq-sg ("marks"))
  (text-active-verbseq-pl ("mark"))
  (text-passive-verbseq-sg ("gets marked"))
  (text-passive-verbseq-pl ("get marked"))
  (text-raw-material ((if (has-value (the raw-material of Self)) then ("in"))))
  (text-argslots ((:seq raw-material)))
  (text-nominalization ("marking")))

;;; ----------

(mass has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Mass-Value))
  (scale-class (Mass-Scale))
  (scalar-constant-class (Mass-Constant))
  (cardinal-unit-class (UoM-Mass))
  (inverse (mass-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "mass" 1 "n")))))

;;; ----------

(Mass-Constant has 
  (superclasses (Constant))
  (instances (*light
              *hefty))
  (element-type-of (*light-hefty-scale))
  (scalar-constant-class-of (mass)))

;;; ----------

(mass-of has 
  (inverse (mass))
  (range (Tangible-Entity))
  (domain (Mass-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Mass-Scale has 
  (superclasses (Scale))
  (instances (*light-hefty-scale))
  (scale-class-of (mass)))

;;; ----------

(Mass-Value has 
  (superclasses (Property-Value))
  (test-case ('((Stick has (superclasses (Physical-Object))) (Tree has (superclasses (Physical-Object))) (*mybigstick has (instance-of (Stick)) (mass ((a Mass-Value)))) (*myshortstick has (instance-of (Stick)) (mass ((a Mass-Value with (value ((:pair 43 *gram) (:pair *hefty Stick) (:pair *light Tree))) (less-than ((the mass of *mybigstick))))))) (the value of (the mass of *myshortstick)) ((the less-than of (the mass of *myshortstick)) includes (the mass of *mybigstick)) ((the greater-than of (the mass of *mybigstick)) includes (the mass of *myshortstick)))))
  (range-of (mass))
  (domain-of (mass-of)))

;;; ----------

(Match-Result-Viewpoint has 
  (superclasses (Viewpoint)))

(every Match-Result-Viewpoint has 
  (viewpoint-question ((make-phrase (:seq "What are the" (if ((the1 of (the2 of (the1 of (the viewpoint-query of Self)))) isa Be-Similar) then "similarities" else "differences") "between" (the text-indef-head of (the1 of (the viewpoint-target of Self))) "and" (the text-indef-head of (the viewpoint-source of Self)) "nospace" "?"))))
  (viewpoint-answer ((make-phrase (:seq "
<li><b>" (the instance-of of (the1 of (the viewpoint-target of Self))) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the text-definition-sentence of (the1 of (the viewpoint-target of Self))))) "</li>
<li><b>" (the instance-of of (the viewpoint-source of Self)) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of (the viewpoint-source of Self))) or (the description of (the instance-of of (the viewpoint-source of Self))) or (the text-definition-sentence of (the viewpoint-source of Self)))) "</li>
"))))
  (viewpoint-detail ((if ((the1 of (the2 of (the1 of (the viewpoint-query of Self)))) isa Be-Similar) then (make-phrase ((?i1 == (the1 of (the viewpoint-target of Self))) and (?i2 == (the viewpoint-source of Self)) and (?c1 == (the classes of ?i1)) and (?c2 == (the classes of ?i2)) and (?sc1 == ((?c1) && ((the all-superclasses of ?c1)))) and (?sc2 == ((?c2) && ((the all-superclasses of ?c2)))) and (?usc == ((?sc1) && (?sc2))) and (?isc == (allof ?c in ?usc where ((?sc1 includes ?c) and (?sc2 includes ?c)))) and (?msca == (oneof ?sc in ?isc where (not (oneof ?scsub in ?isc where ((?scsub /= ?sc) and (?sc subsumes ?scsub)))))) and (?commpart == (allof ?vc in (the viewpoint-correspondence of Self) where ((not ((the1 of ?vc) = ?i2)) and ((make-phrase (the text-indef-head of (the1 of ?vc))) = (make-phrase (the text-indef-head of (the2 of ?vc))))))) and (:seq "The concepts" ?i1 "and" ?i2 "have the following in common:
<ul>
" (if (has-value ?msca) then (if ((?c1 includes ?msca) and (not (?c2 includes ?msca))) then (:seq "<li>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "is a specific kind of" (the text-head of ?i1))) "</li>
") else (if ((?c2 includes ?msca) and (not (?c1 includes ?msca))) then (:seq "<li>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "is a specific kind of" (the text-head of ?i2))) "</li>
") else (:seq "<li>They are both a kind of" ?msca "nospace" "." "</li>
")))) (if (has-value ?commpart) then (:seq "<li>They both involve" (andify (the text-indef-phrase of (the1 of ?commpart))) "nospace" "." "</li>
")) "<ul>
" (forall ?vp-pair in ?commpart ((?desc1 == (the text-description of (the1 of ?vp-pair))) and (?desc2 == (the text-description of (the2 of ?vp-pair))) and (?sent1 == (the text-sentence of (the1 of ?vp-pair))) and (?sent2 == (the text-sentence of (the2 of ?vp-pair))) and (?exst1 == (the text-existential-there of (the1 of ?vp-pair))) and (?exst2 == (the text-existential-there of (the2 of ?vp-pair))) and (?text1 == (if ((the1 of ?vp-pair) isa Event) then (if (not (?desc1 = ?exst1)) then ?desc1) else (if (not (?sent1 = ?exst1)) then ?sent1))) and (?text2 == (if ((the2 of ?vp-pair) isa Event) then (if (not (?desc2 = ?exst2)) then ?desc2) else (if (not (?sent2 = ?exst2)) then ?sent2))) and (:seq (if (has-value ?text1) then (:seq "<li>" ?text1 "</li>
")) (if ((has-value ?text2) and (?text2 /= ?text1)) then (:seq "<li>" ?text2 "</li>
"))))) "</ul>
</ul>
"))) else (if ((the1 of (the2 of (the1 of (the viewpoint-query of Self)))) isa Be-Different) then (make-phrase ((?i1 == (the1 of (the viewpoint-target of Self))) and (?i2 == (the viewpoint-source of Self)) and (?c1 == (the classes of ?i1)) and (?c2 == (the classes of ?i2)) and (?sc1 == ((?c1) && ((the all-superclasses of ?c1)))) and (?sc2 == ((?c2) && ((the all-superclasses of ?c2)))) and (?usc == ((?sc1) && (?sc2))) and (?isc == (allof ?c in ?usc where ((?sc1 includes ?c) and (?sc2 includes ?c)))) and (?msca == (oneof ?sc in ?isc where (not (oneof ?scsub in ?isc where ((?scsub /= ?sc) and (?sc subsumes ?scsub)))))) and (?diffc1 == (oneof ?sc in ?sc1 where (((the superclasses of ?sc) includes ?msca) and (not (?c1 includes ?sc)) and (not (?sc2 includes ?sc)) and (not (?c2 includes ?msca))))) and (?diffc2 == (oneof ?sc in ?sc2 where (((the superclasses of ?sc) includes ?msca) and (not (?c2 includes ?sc)) and (not (?sc1 includes ?sc)) and (not (?c1 includes ?msca))))) and (?relconc1 == (if (not ((?c1 includes ?msca) and (not (?c2 includes ?msca)))) then (forall ?trip in (the viewpoint-model-graph of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?i1) and (not ((the2 of (the viewpoint-correspondence of Self)) includes (the1 of ?trip)))) (the1 of ?trip)))) and (?concsl1 == (if (not ((?c1 includes ?msca) and (not (?c2 includes ?msca)))) then (forall ?trip in (the viewpoint-model-graph of Self) where ((the2 of ?trip) /= instance-of) (:pair (the1 of ?trip) (the2 of ?trip))))) and (?relconc2 == (if (not ((?c2 includes ?msca) and (not (?c1 includes ?msca)))) then (forall ?trip in (the viewpoint-scenario of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?i2) and (not ((the1 of (the viewpoint-correspondence of Self)) includes (the1 of ?trip)))) (the1 of ?trip)))) and (?concsl2 == (if (not ((?c2 includes ?msca) and (not (?c1 includes ?msca)))) then (forall ?trip in (the viewpoint-scenario of Self) where ((the2 of ?trip) /= instance-of) (:pair (the1 of ?trip) (the2 of ?trip))))) and (:seq "The concepts" ?i1 "and" ?i2 "differ in the following ways:
<ul>" (if (has-value ?msca) then (if ((?c1 includes ?msca) and (not (?c2 includes ?msca))) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "</i></b>" "is a specific kind of" "<b><i>" (the text-head of ?i1) "</i></b>")) "</li>
") else (if ((?c2 includes ?msca) and (not (?c1 includes ?msca))) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "is a specific kind of" "<b><i>" (the text-head of ?i2) "</i></b>")) "</li>
")))) (if ((has-value ?diffc1) and (has-value ?diffc2)) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "is a kind of" ?diffc1 "whereas" "<b><i>" (the text-indef-head of ?i2) "</i></b>" "is a kind of" ?diffc2)) "</li>
") else (if (has-value ?diffc1) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "is a kind of" ?diffc1 "nospace" ", which is a different kind of" (?msca or "thing") "than <b><i>" (the text-indef-head of ?i2) "</i></b>")) "</li>
") else (if (has-value ?diffc2) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "</i></b>" "is a kind of" ?diffc2 "nospace" ", which is a different kind of" (?msca or "thing") "than <b><i>" (the text-indef-head of ?i1) "</i></b>")) "</li>
")))) (if (has-value ?relconc1) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "involves" (andify (the text-indef-phrase of ?relconc1)))) "</li>
")) "<ul>
" (forall ?cs in ?concsl1 (:seq "<li>" "nospace" (make-sentence (if ((the2 of ?cs) isa Property) then (the text-description of (the (the2 of ?cs) of (the1 of ?cs))) else (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the viewpoint-model-graph of Self) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (the3 of ?trip))))))) "</li>
")) "</ul>
" (if (has-value ?relconc2) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "</i></b>" "involves" (andify (the text-indef-phrase of ?relconc2)))) "</li>
")) "<ul>
" (forall ?cs in ?concsl2 (:seq "<li>" "nospace" (make-sentence (if ((the2 of ?cs) isa Property) then (the text-description of (the (the2 of ?cs) of (the1 of ?cs))) else (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the viewpoint-scenario of Self) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (the3 of ?trip))))))) "</li>
")) "</ul>
</ul>
"))))))))

;;; ----------

(material has 
  (instance-of (Meronymic-Relation))
  (domain (Tangible-Entity))
  (range (Tangible-Entity))
  (inverse (material-of))
  (text-slot (text-material))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("is made of")))

;;; ----------

(material-of has 
  (inverse (material))
  (range (Tangible-Entity))
  (domain (Tangible-Entity))
  (instance-of (Meronymic-Relation))
  (text-gloss ("is the material of")))

;;; ----------

(max-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (inverse (max-value-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t)))

;;; ----------

(max-value-of has 
  (inverse (max-value))
  (range (Property-Value))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(mcs-list has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (inverse (mcs-list-of))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(mcs-list-of has 
  (inverse (mcs-list))
  (range (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Meal has 
  (subclasses (Supper
               Lunch
               Dinner
               Brunch
               Breakfast))
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "meal" 2 "n")))))

(every Meal has 
  (subevent ((a Eat)))
  (text-nominalization ("meal")))

;;; ----------

(means-by-which has 
  (inverse (by-means-of))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-gloss ("is the means of doing")))

;;; ----------

(Medium has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "medium" 1 "n") (:triple "medium" 3 "n") (:triple "means" 1 "n") (:triple "communication" 1 "n") (:triple "communicating" 1 "n"))))
  (wn20-synset ((:set (:triple "medium" 1 "n") (:triple "medium" 3 "n") (:triple "means" 1 "n") (:triple "communication" 1 "n") (:triple "communicating" 1 "n")))))

(every Medium has 
  (in-event ((a Action)))
  (played-by ((a Tangible-Entity with (base-of ((the in-event of Self)))))))

;;; ----------

(Message has 
  (subclasses (Specification
               Recording
               Message-Field
               Document
               Assurance))
  (superclasses (Conceptual-Entity))
  (description ("an encoding of information in a language"))
  (wn16-synset ((:set (:triple "message" 1 "n"))))
  (wn20-synset ((:set (:triple "message" 1 "n"))))
  (domain-of (information-language))
  (range-of (information-language-of)))

(every Message has 
  (information-content ((a Thing)))
  (information-language ((a Language))))

;;; ----------

(Message-Field has 
  (superclasses (Message))
  (description ("a message whose content is a single constant"))
  (subclasses (Text-Field
               Number-Field))
  (range-of (identifier))
  (domain-of (identifier-of)))

;;; ----------

(Metal has 
  (superclasses (Substance))
  (wn20-synset ((:set (:triple "metal" 1 "n") (:triple "metallic_element" 1 "n") (:triple "metal" 2 "n") (:triple "alloy" 1 "n")))))

;;; ----------

(Method has 
  (subclasses (Unit-Conversion
               Compute-Quantitative-Minimum
               Compute-Quantitative-Maximum
               Compute-Qualitative-Minimum
               Compute-Qualitative-Maximum
               Compute-Minimum
               Compute-Maximum))
  (superclasses (KM-Class)))

;;; ----------

(min-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (inverse (min-value-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t)))

;;; ----------

(min-value-of has 
  (inverse (min-value))
  (range (Property-Value))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(moment-of-inertia has 
  (instance-of (EntityProperty))
  (domain (Physical-Object))
  (range (Moment-of-Inertia-Value))
  (cardinal-unit-class (UoM-Moment-of-Inertia))
  (inverse (moment-of-inertia-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "moment of inertia" 1 "n")))))

;;; ----------

(moment-of-inertia-of has 
  (inverse (moment-of-inertia))
  (range (Physical-Object))
  (domain (Moment-of-Inertia-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Moment-of-Inertia-Value has 
  (superclasses (Property-Value))
  (range-of (moment-of-inertia))
  (domain-of (moment-of-inertia-of)))

;;; ----------

(momentum has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Momentum-Value))
  (cardinal-unit-class (UoM-Momentum))
  (inverse (momentum-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "momentum" 2 "n")))))

;;; ----------

(momentum-of has 
  (inverse (momentum))
  (range (Event))
  (domain (Momentum-Value))
  (instance-of (EventProperty)))

;;; ----------

(Momentum-Value has 
  (superclasses (Property-Value))
  (range-of (momentum))
  (domain-of (momentum-of)))

;;; ----------

(Money has 
  (superclasses (Intangible-Entity))
  (wn20-synset ((:set (:triple "money" 1 "n") (:triple "money" 3 "n")))))

(every Money has 
  (purpose ((a Resource with (in-event ((a Buy with (instrument (Self))))))
            (a Resource with (in-event ((a Sell with (instrument (Self))))))))
  (worth ((a Worth-Value))))

;;; ----------

(Move has 
  (subclasses (Transmit
               Slide
               Propel
               Move-Through
               Locomotion
               Fall
               Emit
               Carry))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 origin
                 destination
                 path))
  (secondary-slot (toward
                   away-from))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq origin "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Tangible-Entity))) (*John has (location (*Boston))) (a Move with (object (*John)) (origin (*Boston)) (destination (*Austin))) (do-and-next (thelast Move)) (the text-gen of (thelast Move)) ((the location of *John) = *Austin) ((in-situation (the1 of (the prev-situation of (curr-situation))) (the location of *John)) = *Boston) ((the location of *John) /= *Boston) (not (*Boston &? *Austin)) (new-situation) (*book has (instance-of (Physical-Object)) (is-on (*table)) (is-beside (*mug))) (*table has (instance-of (Physical-Object))) (*mug has (instance-of (Physical-Object))) (*phone has (instance-of (Physical-Object)) (is-on (*table))) (a Move with (object (*book)) (destination (*phone))) (do-and-next (thelast Move)) ((the is-on of *book) = *table) ((the is-beside of *book) /= *mug) ((the location of *book) = (the location of *phone)) (*TheRoof has (instance-of (Architectural-Structure)) (plays ((a Cover)))) (*TheSky has (instance-of (Place)) (is-above (*TheRoof))) (*TheBBQ has (instance-of (Device)) (is-below (*TheRoof))) (*TheRain has (instance-of (Substance))) (a Move with (object (*TheRain)) (origin (*TheSky)) (destination (*TheBBQ))) (not (try-do (thelast Move))))))
  (wn16-synset ((:set (:triple "move" 1 "v") (:triple "move" 2 "v") (:triple "move" 3 "v") (:triple "move" 4 "v") (:triple "move" 7 "v") (:triple "move" 12 "v") (:triple "move" 14 "v") (:triple "move" 15 "v") (:triple "displace" 4 "v") (:triple "go" 1 "v") (:triple "go" 21 "v") (:triple "locomote" 1 "v") (:triple "travel" 1 "v"))))
  (wn20-synset ((:set (:triple "move" 1 "v") (:triple "move" 2 "v") (:triple "move" 3 "v") (:triple "move" 4 "v") (:triple "move" 7 "v") (:triple "move" 12 "v") (:triple "move" 14 "v") (:triple "move" 15 "v") (:triple "displace" 4 "v") (:triple "go" 1 "v") (:triple "go" 21 "v") (:triple "locomote" 1 "v") (:triple "travel" 1 "v") (:triple "motion" 6 "n") (:triple "movement" 3 "n") (:triple "move" 4 "n") (:triple "drive" 1 "v") (:triple "drive" 2 "v") (:triple "drive" 3 "v")))))

(every Move has 
  (object ((a Tangible-Entity)
           (excluded-values (the origin of Self) (the destination of Self) (the away-from of Self) (the toward of Self) (the path of Self))))
  (origin ((must-be-a Spatial-Entity)))
  (destination ((must-be-a Spatial-Entity)))
  (away-from ((must-be-a Spatial-Entity)))
  (toward ((must-be-a Spatial-Entity)))
  (path ((must-be-a Spatial-Entity)))
  (soft-pcs-list ((if (has-value (the destination of Self)) then (:triple (the destination of Self) object-of (mustnt-be-a Be-Blocked)))
                  (if ((has-value (the destination of Self)) and (has-value (the origin of Self))) then (:triple (the origin of Self) object-of (mustnt-be-a Be-Blocked)))))
  (pcs-list ((if (has-value (the origin of Self)) then (forall (the object of Self) (:triple It location (if ((the origin of Self) isa Place) then (the origin of Self) else (the location of (the origin of Self))))))
             (forall (the object of Self) (forall2 (the object-of of It) (if (It2 isa Be-Held) then (:triple It2 agent (the agent of Self)))))
             (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Restrained)))
             (if (has-value (the Be-Held object-of of (the object of Self))) then (forall (the agent of Self) (:triple It agent-of (a Be-Held with (object ((the object of Self))) (agent ((the agent of Self)))))))
             (if (has-value (the path of Self)) then (forall (the path of Self) (:triple (the path of Self) object-of (mustnt-be-a Be-Blocked))))))
  (ncs-list ((forall (the is-below of (the destination of Self)) where (oneof2 (the plays of It) where (It2 isa Cover)) (:triple (the origin of Self) is-above It))))
  (add-list ((if (has-value (the destination of Self)) then (forall (the object of Self) (:set (:triple It is-near (the is-near of (the destination of Self))) (:triple It is-above (the is-above of (the destination of Self))) (:triple It is-below (the is-below of (the destination of Self))) (:triple It is-along (the is-along of (the destination of Self))) (:triple It is-at (the is-at of (the destination of Self))) (:triple It is-at-of (the is-at-of of (the destination of Self))) (:triple It is-beside (the is-beside of (the destination of Self))) (:triple It is-between (the is-between of (the destination of Self))) (:triple It is-behind (the is-behind of (the destination of Self))) (:triple It is-in-front-of (the is-in-front-of of (the destination of Self))) (:triple It is-inside (the is-inside of (the destination of Self))) (:triple It is-on (the is-on of (the destination of Self))) (:triple It is-opposite (the is-opposite of (the destination of Self))) (:triple It is-outside (the is-outside of (the destination of Self))) (:triple It does-not-enclose (the does-not-enclose of (the destination of Self))) (:triple It is-over (the is-over of (the destination of Self))) (:triple It is-under (the is-under of (the destination of Self))) (:triple It location (if ((the destination of Self) isa Place) then (the destination of Self) else ((if ((the destination of Self) isa Tangible-Entity) then (the location of (the destination of Self)) else (the destination of Self))))))))))
  (del-list ((forall (the object of Self) (:set (:triple It location (the location of It)) (forall2 (the is-near of It) (if (not ((the is-near of (the destination of Self)) includes It2)) then (:triple It is-near It2))) (forall2 (the abuts of It) (if (not ((the abuts of (the destination of Self)) includes It2)) then (:triple It abuts It2))) (forall2 (the is-above of It) (if (not ((the is-above of (the destination of Self)) includes It2)) then (:triple It is-above It2))) (forall2 (the is-below of It) (if (not ((the is-below of (the destination of Self)) includes It2)) then (:triple It is-below It2))) (forall2 (the is-along of It) (if (not ((the is-along of (the destination of Self)) includes It2)) then (:triple It is-along It2))) (forall2 (the is-at of It) (if (not ((the is-at of (the destination of Self)) includes It2)) then (:triple It is-at It2))) (forall2 (the is-at-of of It) (if (not ((the is-at-of of (the destination of Self)) includes It2)) then (:triple It is-at-of It2))) (forall2 (the is-beside of It) (if (not ((the is-beside of (the destination of Self)) includes It2)) then (:triple It is-beside It2))) (forall2 (the is-between of It) (if (not ((the is-between of (the destination of Self)) includes It2)) then (:triple It is-between It2))) (forall2 (the is-behind of It) (if (not ((the is-behind of (the destination of Self)) includes It2)) then (:triple It is-behind It2))) (forall2 (the is-in-front-of of It) (if (not ((the is-in-front-of of (the destination of Self)) includes It2)) then (:triple It is-in-front-of It2))) (forall2 (the is-inside of It) (if (not ((the is-inside of (the destination of Self)) includes It2)) then (:triple It is-inside It2))) (forall2 (the encloses of It) (if (not ((the encloses of (the destination of Self)) includes It2)) then (:triple It encloses It2))) (forall2 (the is-on of It) (if (not ((the is-on of (the destination of Self)) includes It2)) then (:triple It is-on It2))) (forall2 (the has-on-it of It) (if (not ((the has-on-it of (the destination of Self)) includes It2)) then (:triple It has-on-it It2))) (forall2 (the is-opposite of It) (if (not ((the is-opposite of (the destination of Self)) includes It2)) then (:triple It is-opposite It2))) (forall2 (the is-outside of It) (if (not ((the is-outside of (the destination of Self)) includes It2)) then (:triple It is-outside It2))) (forall2 (the does-not-enclose of It) (if (not ((the does-not-enclose of (the destination of Self)) includes It2)) then (:triple It does-not-enclose It2))) (forall2 (the is-over of It) (if (not ((the is-over of (the destination of Self)) includes It2)) then (:triple It is-over It2))) (forall2 (the is-under of It) (if (not ((the is-under of (the destination of Self)) includes It2)) then (:triple It is-under It2)))))))
  (dcs-list ((if (has-value (the path of Self)) then ((forall (the object of Self) (:triple It location (if ((the path of Self) isa Place) then (the path of Self) else (the location of (the path of Self)))))))))
  (preparatory-event ((:default (if (has-value (the origin of Self)) then (a Move with (object ((the object of Self))) (destination ((the origin of Self))))) (forall (the object of Self) ((a Release with (object (It))))) (if (has-value (the path of Self)) then ((a Unblock with (object ((the path of Self)))))) (if (has-value (the Be-Held object-of of (the object of Self))) then ((a Hold with (object ((the object of Self))) (agent ((the agent of Self)))))))))
  (interrupted-by ((must-be-a Block with (object ((the path of Self))))))
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("moves"))
  (text-passive-verbseq-pl ("move"))
  (text-argslots ((:seq origin path destination base instrument)))
  (text-nominalization ("move")))

;;; ----------

(Move-Apart has 
  (superclasses (Action))
  (required-slot (object
                  origin))
  (primary-slot (agent
                 subevent))
  (cmap-correspondence ((:seq object "the things being moved apart")
                        (:seq agent "the doer")
                        (:seq origin "starting point")
                        (:seq subevent "subevents")))
  (test-case ('((*Blue-Cow has (instance-of (Living-Entity))) (*Purple-Cow has (instance-of (Living-Entity))) (*Farmer-Bill has (instance-of (Living-Entity))) (*Prairie has (instance-of (Place))) (*Blue-Cow has (location (*Prairie))) (*Purple-Cow has (location (*Prairie))) (a Move-Apart with (object (*Blue-Cow *Purple-Cow)) (agent (*Farmer-Bill)) (origin (*Prairie))) (do-script (thelast Move-Apart)) ((the location of *Blue-Cow) /= *Prairie) ((the location of *Purple-Cow) /= *Prairie) (forall (the subevent of (thelast Move-Apart)) ((It isa Move) and ((:set *Blue-Cow *Purple-Cow) includes (the object of It)))) (new-situation) (*me has (instance-of (Living-Entity)) (is-near (*my-brother *my-sister *the-folks))) (*my-brother has (instance-of (Living-Entity)) (is-near (*me *my-sister *the-folks))) (*my-sister has (instance-of (Living-Entity)) (is-near (*my-brother *me *the-folks))) (*the-folks has (instance-of (Living-Entity))) (a Move-Apart with (object (*me *my-brother *my-sister)) (origin (*the-folks))) (do-script (thelast Move-Apart)) (not ((the is-near of *me) includes *my-brother)) (not ((the is-near of *me) includes *my-sister)) (not ((the is-near of *me) includes *the-folks)) (not ((the is-near of *my-brother) includes *me)) (not ((the is-near of *my-brother) includes *my-sister)) (not ((the is-near of *my-brother) includes *the-folks)) (not ((the is-near of *my-sister) includes *my-brother)) (not ((the is-near of *my-sister) includes *me)) (not ((the is-near of *my-sister) includes *the-folks)))))
  (wn16-synset ((:set (:triple "separate" 2 "v") (:triple "disunite" 2 "v") (:triple "divide" 5 "v") (:triple "part" 5 "v"))))
  (wn20-synset ((:set (:triple "separate" 2 "v") (:triple "disunite" 2 "v") (:triple "divide" 5 "v") (:triple "part" 5 "v")))))

(every Move-Apart has 
  (object ((at-least 2 Tangible-Entity)
           (a Tangible-Entity)
           (a Tangible-Entity)))
  (origin ((a Spatial-Entity)))
  (soft-pcs-list ((forall (the object of Self) where t (forall2 (the object of Self) where (It2 /= It) (:triple It is-at It2)))))
  (first-subevent ((the subevent of Self)))
  (subevent ((forall (the object of Self) (a Move with (object (It)) (origin ((the origin of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (destination ((if (has-value (the destination of Self)) then (the destination of Self))))))))
  (text-active-verbseq-sg ("causes to move apart"))
  (text-active-verbseq-pl ("cause to move apart"))
  (text-passive-verbseq-sg ("moves apart"))
  (text-passive-verbseq-pl ("move apart"))
  (text-nominalization ("moving")))

;;; ----------

(Move-Into has 
  (caused-by-class-of (Be-Contained))
  (subclasses (Take-In
               Load
               Enter))
  (superclasses (Move-Through))
  (required-slot (object
                  base
                  destination))
  (primary-slot (agent
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq base "the enclosure")
                        (:seq destination "moved to")
                        (:seq agent "the mover")
                        (:seq origin "moved from")
                        (:seq path "moved along or through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((*Troy has (instance-of (Tangible-Entity))) (*TrojanHorse has (instance-of (Physical-Object)) (is-outside (*Troy))) (a Move-Into with (base (*Troy)) (object (*TrojanHorse))) (do-and-next (thelast Move-Into)) (the text-gen of (thelast Move-Into)) ((the is-inside of *TrojanHorse) includes *Troy) ((the content of (the Container plays of *Troy)) includes *TrojanHorse) ((the Container plays of *Troy) isa Container) (has-value (the Be-Contained object-of of *TrojanHorse)))))
  (wn16-synset ((:set (:triple "move_into" 1 "v") (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v"))))
  (wn20-synset ((:set (:triple "move_into" 1 "v") (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v")))))

(every Move-Into has 
  (resulting-state ((a Be-Contained)))
  (object ((a Tangible-Entity)))
  (base ((a Tangible-Entity with (plays ((a Container))) (encloses ((the destination of Self))) (has-region ((a Spatial-Entity with (plays ((a Portal)))))))))
  (destination ((a Spatial-Entity with (is-inside ((the base of Self))))))
  (origin ((a Spatial-Entity with (is-outside ((the base of Self))))))
  (path ((a Spatial-Entity with (plays ((a Portal))) (is-region-of ((the base of Self))))))
  (soft-pcs-list ((forall (the object of Self) (:triple It is-outside (the base of Self)))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Shut-Out with (base ((the base of Self)))) [Move-Into-pcs-1]))
             (if (has-value (the path of Self)) then (forall (the path of Self) (:triple (the path of Self) object-of (mustnt-be-a Be-Closed))))))
  (add-list ((:triple (the Container plays of (the base of Self)) content (the object of Self) [Move-Into-add-1])
             (:triple (the resulting-state of Self) object (the object of Self) [Move-Into-add-2])))
  (interrupted-by ((must-be-a Move-Out-Of with (object ((the object of Self))) (base ((the base of Self))))))
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("gets moved"))
  (text-passive-verbseq-pl ("get moved"))
  (text-argslots ((:seq base path)))
  (text-base ("into"))
  (text-path ("through"))
  (preparatory-event ((:default (a Admit with (object ((the object of Self))) (base ((the base of Self)))) (a Open with (object ((the base of Self)))) (a Move-Out-Of with (object ((the object of Self))) (base ((the base of Self)))))))
  (text-nominalization ("moving")))

;;; ----------

(Move-Out-Of has 
  (defeated-by-class-of (Be-Contained))
  (subclasses (Withdraw
               Exit))
  (superclasses (Move-Through))
  (required-slot (object
                  base
                  origin))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq base "the enclosure")
                        (:seq origin "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through or along")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((*student has (instance-of (Tangible-Entity))) (*bag has (instance-of (Tangible-Entity)) (location ((a Place))) (plays ((a Container with (content (*book)))))) (*book has (instance-of (Tangible-Entity)) (location ((a Place))) (is-inside (*bag))) (*outside has (instance-of (Place)) (is-outside (*bag))) (a Move-Out-Of with (agent (*student)) (object (*book)) (base (*bag)) (destination (*outside)) (origin ((a Place with (is-inside (*bag)))))) (do-and-next (thelast Move-Out-Of)) (the text-gen of (thelast Move-Out-Of)) (the location of *book) (the location of *bag) (the is-outside of *book) (the does-not-enclose of *bag) (not ((the is-inside of (the location of *book)) includes (the location of *bag))) ((the is-outside of (the location of *book)) includes *bag) ((the Container plays of *bag) isa Container))))
  (wn16-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v"))))
  (wn20-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v")))))

(every Move-Out-Of has 
  (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Contained) and ((the base of It) = (the base of Self))))))
  (object ((must-be-a Tangible-Entity)))
  (base ((must-be-a Tangible-Entity with (plays ((a Container with (content ((the object of Self)))))) (encloses ((the origin of Self))) (has-region ((a Spatial-Entity))))))
  (origin ((a Spatial-Entity with (is-inside ((the base of Self))))))
  (destination ((a Spatial-Entity with (is-outside ((the base of Self))))))
  (path ((a Spatial-Entity with (plays ((a Portal))) (is-region-of ((the base of Self))))))
  (soft-pcs-list ((forall (the object of Self) (:triple (It) is-inside (the base of Self)))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Confined with (base ((the base of Self)))) [Move-Out-Of-pcs-1]))
             (if (has-value (the path of Self)) then (forall (the path of Self) (:triple (the path of Self) object-of (mustnt-be-a Be-Closed))))))
  (del-list ((:triple (the Container plays of (the base of Self)) content (the content of (the Container plays of (the base of Self) [Move-Out-Of-del-1])))
             ((forall (the defeats of Self) (:set (:triple It object (the object of Self)) (:triple It base (the base of Self)))) [Move-Out-Of-del-2])))
  (interrupted-by ((must-be-a Move-Into with (object ((the object of Self))) (base ((the base of Self))))))
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("gets moved"))
  (text-argslots ((:seq base path)))
  (text-base ("out of"))
  (text-path ("through"))
  (preparatory-event ((:default (a Shut-Out with (object ((the object of Self))) (base ((the base of Self)))) (a Open with (object ((the base of Self)))) (a Move-Into with (object ((the object of Self))) (base ((the base of Self)))))))
  (text-nominalization ("moving")))

;;; ----------

(Move-Through has 
  (subclasses (Move-Out-Of
               Move-Into
               Go-Through))
  (superclasses (Move))
  (required-slot (object
                  path
                  base))
  (primary-slot (agent
                 origin
                 destination))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq origin "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")))
  (test-case ('((*Fence has (instance-of (Tangible-Entity))) (*David has (instance-of (Tangible-Entity))) (*Move-Through has (instance-of (Move-Through)) (object (*David)) (base (*Fence))) (do-and-next *Move-Through) (the text-gen of (thelast Move-Through)) ((the is-region-of of (the path of *Move-Through)) = *Fence))))
  (wn16-synset ((:set (:triple "follow" 4 "v") (:triple "travel_along" 1 "v"))))
  (wn20-synset ((:set (:triple "follow" 4 "v") (:triple "travel_along" 1 "v")))))

(every Move-Through has 
  (object ((a Tangible-Entity)))
  (base ((a Tangible-Entity with (plays ((a Barrier))) (has-region ((a Spatial-Entity))))))
  (path ((the has-region of (the base of Self))))
  (soft-pcs-list ((:triple (the base of Self) object-of (mustnt-be-a Be-Inaccessible))))
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("moves"))
  (text-passive-verbseq-pl ("move"))
  (text-argslots ((:seq path base)))
  (text-path ("through"))
  (text-base ("in"))
  (text-nominalization ("moving")))

;;; ----------

(Move-Together has 
  (superclasses (Action))
  (required-slot (object
                  destination))
  (primary-slot (agent
                 subevent))
  (cmap-correspondence ((:seq object "the things Moved-Together")
                        (:seq agent "the Mover")
                        (:seq destination "the place to which the objects are Moved-Together")
                        (:seq subevent "the Move of each object")))
  (test-case ('((*soccer-ball has (instance-of (Physical-Object))) (*soccer-player has (instance-of (Physical-Object))) (*midfield has (instance-of (Place))) (a Move-Together with (object (*soccer-ball *soccer-player)) (destination (*midfield))) (do-script (thelast Move-Together)) ((the location of *soccer-ball) = *midfield) ((the location of *soccer-player) = *midfield) (forall (the subevent of (thelast Move-Together)) ((It isa Move) and ((:set *soccer-player *soccer-ball) includes (the object of It)))) (new-situation) (*comet has (instance-of (Physical-Object))) (*asteroid has (instance-of (Physical-Object)) (is-near (*pluto))) (*earth has (instance-of (Physical-Object))) (*mercury has (instance-of (Physical-Object))) (*pluto has (instance-of (Physical-Object))) (*sun has (instance-of (Physical-Object)) (is-near (*mercury)) (location ((a Place)))) (a Move-Together with (object (*comet *asteroid *earth)) (destination (*sun))) (do-script (thelast Move-Together)) ((the location-of of (the location of *sun)) is-superset-of (:set *comet *asteroid *earth)) ((the is-near of *comet) includes *mercury) ((the is-near of *asteroid) includes *mercury) (not ((the is-near of *asteroid) includes *pluto)) ((the is-near of *earth) includes *mercury))))
  (wn16-synset ((:set (:triple "assemble" 3 "v") (:triple "gather" 7 "v") (:triple "get_together" 1 "v"))))
  (wn20-synset ((:set (:triple "assemble" 3 "v") (:triple "gather" 6 "v") (:triple "get_together" 1 "v")))))

(every Move-Together has 
  (object ((at-least 2 Tangible-Entity)
           (a Tangible-Entity)
           (a Tangible-Entity)))
  (destination ((a Spatial-Entity)))
  (first-subevent ((the subevent of Self)))
  (subevent ((forall (the object of Self) (a Move with (object (It)) (destination ((the destination of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (origin ((if (has-value (the origin of Self)) then (the origin of Self))))))))
  (text-active-verbseq-sg ("causes to move together"))
  (text-active-verbseq-pl ("cause to move together"))
  (text-passive-verbseq-sg ("moves together"))
  (text-passive-verbseq-pl ("move together"))
  (text-nominalization ("moving together")))

;;; ----------

(Multislot-Value-Viewpoint has 
  (superclasses (Viewpoint)))

(every Multislot-Value-Viewpoint has 
  (viewpoint-question (((?vaq == (the viewpoint-answerable-query of Self)) and (?fr == (the1 of (the2 of (the1 of ?vaq)))) and (?slotfamily == (the viewpoint-multislot-type of Self)) and (make-phrase (if (?slotfamily = *meronymic-multislot-query*) then (:seq "What are the parts of" (the text-def-head of ?fr) "nospace" "?") else (if (?slotfamily = *participant-multislot-query*) then (:seq "What is the purpose of" (the text-def-head of ?fr) "nospace" "?") else (if (?slotfamily = *spatial-multislot-query*) then (:seq "What is the location of" (the text-def-head of ?fr) "nospace" "?") else (if (?slotfamily = *agentive-multislot-query*) then (if (?fr isa Entity) then (:seq "What does" (the text-def-head of ?fr) "do" "?") else (if (?fr isa Event) then (:seq "What" (the text-active-phrase of ?fr) (the text-dobj-phrase of ?fr) (the text-arguments of ?fr) "nospace" "?") else (if (?fr isa Role) then (:seq "What has" (the text-def-head of ?fr) "as its purpose" "nospace" "?"))))))))))))
  (viewpoint-answer (((?vaq == (allof ?q in (the elements of (the viewpoint-answerable-query of Self)) where (not (((the2 of (the2 of ?q)) = purpose) and ((make-phrase (the text-indef-phrase of (the (the2 of (the2 of ?q)) of (the1 of (the2 of ?q))))) = "a role"))))) and (?fr == (the1 of (the2 of (the1 of (the viewpoint-answerable-query of Self))))) and (make-sentence (:seq (if (oneof ?vaq where ((the2 of (the2 of It)) isa Relation)) then (:seq (the text-def-head of ?fr) (forall ?p in ?vaq where ((the2 of (the2 of ?p)) isa Relation) ((?sl == (the2 of (the2 of ?p))) and (?filtfill == (if (has-value (the viewpoint-filter of Self)) then (allof (the ?sl of ?fr) where (It isa (the viewpoint-filter of Self))) else (the ?sl of ?fr))) and ((the text-head of ?filtfill) /= (:seq (:seq "location of" (the text-gen of ?fr)) ())) and (:seq (if ((the number of ?vaq) > 1) then "<li>") (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (andify (the text-indef-phrase of ?filtfill)) (if ((the number of ?vaq) > 1) then "</li>
")))))) (if (oneof ?vaq where ((the2 of (the2 of It)) isa Property)) then (forall ?vaq where ((the2 of (the2 of It)) isa Property) (:seq (if ((the number of ?vaq) > 1) then "<li>") (the text-description of (the (the2 of (the2 of It)) of ?fr)) (if ((the number of ?vaq) > 1) then "</li>
")))))))))
  (viewpoint-detail (((?vaq == (the viewpoint-answerable-query of Self)) and (?fr == (the1 of (the2 of (the1 of ?vaq)))) and (make-phrase (:seq "<b>" (the instance-of of ?fr) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of ?fr)) or (the description of (the instance-of of ?fr)))) (forall ?as in (the user-assumption of (the instance-of of ?fr)) (:seq "
<li>" ?as "</li>
")) "<p>
" "<ul>
" (forall ?p in (the elements of ?vaq) (:seq "<li>" (get-justification (:triple (the1 of (the2 of ?p)) (the2 of (the2 of ?p)) *)) "</li>
")) "</ul>
"))))))

;;; ----------

(Narrow has 
  (superclasses (Decrease))
  (test-case ('((*myroad has (instance-of (Physical-Object)) (width (*myroadwidth))) (*myroadwidth has (instance-of (Length-Value)) (value ((:pair 30 *foot)))) (a Decrease with (object (*myroad)) (property-slot (width))) ((thelast Decrease) isa Narrow) (do-and-next (thelast Narrow)) ((the less-than of (the width of *myroad)) includes *myroadwidth))))
  (wn20-synset ((:set (:triple "narrow" 1 "v") (:triple "contract" 8 "v")))))

(every Narrow has-definition 
  (instance-of (Decrease))
  (property-slot (width)))

(every Narrow has 
  (text-nominalization ("narrowing")))

;;; ----------

(Natural-Language has 
  (superclasses (Language))
  (instances (*Mandarin
              *English
              *Hindi
              *Spanish
              *Russian
              *Arabic
              *Bengali
              *Portugese
              *Japanese
              *German
              *French
              *Indonesian
              *Urdu
              *Punjabi
              *Korean
              *Italian
              *Tamil
              *Telugu
              *Marathi
              *Cantonese))
  (wn20-synset ((:set (:triple "natural_language" 1 "n") (:triple "tongue" 2 "n")))))

;;; ----------

(next-element has 
  (instance-of (Meronymic-Relation))
  (domain (Entity))
  (range (Entity))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inverse (previous-element))
  (text-gloss ("comes before")))

;;; ----------

(next-event has 
  (subslots (disjunctive-next-events))
  (instance-of (Meronymic-Relation))
  (domain (Event))
  (range (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inverse (prev-event))
  (text-gloss ("comes before")))

;;; ----------

(Nonrenewable-Resource has 
  (superclasses (Resource))
  (member-of (_Partition3)))

(every Nonrenewable-Resource has 
  (base-of ((mustnt-be-a Replenish))))

;;; ----------

(Number has 
  (range-of (time-year
             time-month
             time-day
             time-hour
             time-minute
             time-second
             number-of-elements
             numeric-value
             text-number
             viewpoint-score))
  (domain-of (time-year-of
              time-month-of
              time-day-of
              time-hour-of
              time-minute-of
              time-second-of
              number-of-elements-of
              numeric-value-of
              text-number-of
              viewpoint-score-of))
  (superclasses (Thing)))

;;; ----------

(Number-Field has 
  (superclasses (Message-Field))
  (description ("a message field whose content is a numeric constant")))

(every Number-Field has-definition 
  (instance-of (Message-Field))
  (information-content ((a Number))))

(every Number-Field has 
  (information-content ((a Number))))

;;; ----------

(number-of-elements has 
  (instance-of (EntityProperty))
  (domain (Aggregate))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (dont-cache-values (t))
  (inherit-with-overrides (t))
  (inverse (number-of-elements-of))
  (cardinality (N-to-1)))

;;; ----------

(number-of-elements-of has 
  (inverse (number-of-elements))
  (range (Aggregate))
  (domain (Number))
  (instance-of (EntityProperty)))

;;; ----------

(numeric-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Cardinal))
  (range (Number))
  (inverse (numeric-value-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(numeric-value-of has 
  (inverse (numeric-value))
  (range (Cardinal))
  (domain (Number))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(object has 
  (required-slot-of (Absorb
                     Activate
                     Add
                     Admit
                     Allocate-Resource
                     Attach
                     Be-Accessible
                     Be-Activated
                     Be-Available
                     Be-Blocked
                     Be-Broken
                     Be-Closed
                     Be-Concealed
                     Be-Confined
                     Be-Contained
                     Be-Controlled
                     Be-Damaged
                     Be-Held
                     Be-Inaccessible
                     Be-Known
                     Be-Obstructed
                     Be-Open
                     Be-Restrained
                     Be-Shut-Out
                     Be-Stable
                     Be-Stored
                     Be-Supported
                     Be-Unavailable
                     Be-Unblocked
                     Block
                     Breach
                     Break-Contact
                     Break
                     Carry
                     Close
                     Collide
                     Come-Together
                     Command
                     Communicate
                     Conceal
                     Confine
                     Convey
                     Copy
                     Damage
                     Deactivate
                     Deceive
                     Deliver
                     Detach
                     Disperse
                     Divide
                     Donate
                     Duplicate
                     Eat
                     Edit
                     Embody
                     Emit
                     Enter
                     Exit
                     Expose
                     Express
                     Fall
                     Feed
                     Follow
                     Forget
                     Give
                     Go-Through
                     Go-To
                     Harm
                     Hold
                     Impair
                     Inquire
                     Interpret
                     Invade
                     Learn
                     Leave
                     Let-Fall
                     Let-Go-Of
                     Lie
                     Load
                     Locomotion
                     Lose
                     Make-Accessible
                     Make-Contact
                     Make-Inaccessible
                     Move-Apart
                     Move-Into
                     Move-Out-Of
                     Move-Through
                     Move-Together
                     Move
                     Obstruct
                     Obtain
                     Open
                     Penetrate
                     Perceive
                     Print
                     Receive
                     Recognize
                     Release-Resource
                     Release
                     Relinquish
                     Remove
                     Repair
                     Replace
                     Restrain
                     Ruin
                     Send
                     Sense
                     Shut-Out
                     Slide
                     Store
                     Supply
                     Support
                     Take-Apart
                     Take-Control
                     Take-In
                     Take
                     Teach
                     Transfer
                     Transmit
                     Trespass
                     Unblock
                     Unobstruct
                     Unrestrain
                     Withdraw))
  (primary-slot-of (Action
                    State))
  (instance-of (Participant-Relation))
  (domain (Event))
  (range (Entity))
  (inverse (object-of))
  (fluent-status (*Inertial-Fluent))
  (text-slot (text-object))
  (cardinality (N-to-N))
  (text-gloss ("is done to"))
  (wn20-synset ((:set (:triple "affected_role" 1 "n") (:triple "patient_role" 1 "n") (:triple "patient" 2 "n")))))

;;; ----------

(object-of has 
  (inverse (object))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation))
  (combine-values-by-appending (t))
  (text-gloss ("is the object of")))

;;; ----------

(objective has 
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (objective-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("has as objective")))

;;; ----------

(objective-of has 
  (inverse (objective))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-gloss ("is an objective of")))

;;; ----------

(Obstruct has 
  (caused-by-class-of (Be-Obstructed))
  (subclasses (Support
               Shut-Out
               Restrain
               Hold
               Confine))
  (superclasses (Make-Inaccessible))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the thing Obstructed")
                        (:seq agent "the Obstructor")
                        (:seq destination "the place to which the object is Obstructed")))
  (test-case ('((*pedestrian has (instance-of (Physical-Object))) (a Obstruct with (object (*pedestrian))) (do-and-next (thelast Obstruct)) (the text-gen of (thelast Obstruct)) (has-value (the Be-Obstructed object-of of *pedestrian)) (forall (the resulting-state of (thelast Obstruct)) (the text-gen of It)) (a Move with (object (*car)) (path (*path))) (try-do (thelast Move)))))
  (wn16-synset ((:set (:triple "obstruct" 2 "v") (:triple "block" 10 "v") (:triple "close_up" 1 "v") (:triple "jam" 7 "v") (:triple "impede" 2 "v") (:triple "occlude" 1 "v"))))
  (wn20-synset ((:set (:triple "obstruct" 2 "v") (:triple "block" 10 "v") (:triple "close_up" 1 "v") (:triple "jam" 7 "v") (:triple "impede" 2 "v") (:triple "occlude" 1 "v")))))

(every Obstruct has 
  (object ((a Tangible-Entity)))
  (agent ((must-be-a Entity)))
  (resulting-state ((a Be-Obstructed)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Obstruct-add-1])
             (if (has-value (the agent of Self)) then (forall (the agent of Self) (:triple It agent-of (the resulting-state of Self) [Obstruct-add-2])))))
  (text-active-verbseq-sg ("obstructs"))
  (text-active-verbseq-pl ("obstruct"))
  (text-passive-verbseq-sg ("gets obstructed"))
  (text-passive-verbseq-pl ("get obstructed"))
  (text-argslots ((:seq base instrument path result)))
  (preparatory-event ((:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self)))))))))))
  (text-nominalization ("obstruction")))

;;; ----------

(Obtain has 
  (subclasses (Take
               Buy))
  (superclasses (Receive))
  (required-slot (recipient
                  object))
  (primary-slot (donor
                 instrument))
  (cmap-correspondence ((:seq object "the thing obtained")
                        (:seq agent "obtainer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Johnathan has (instance-of (Tangible-Entity))) (*Big-Green-Book has (instance-of (Tangible-Entity))) (a Obtain with (agent (*Johnathan)) (object (*Big-Green-Book))) (do-and-next (thelast Obtain)) (the text-gen of (thelast Obtain)) ((the possesses of *Johnathan) = *Big-Green-Book) ((the is-possessed-by of *Big-Green-Book) = *Johnathan) ((the agent of (thelast Obtain)) = (the recipient of (thelast Obtain))))))
  (wn16-synset ((:set (:triple "obtain" 1 "v"))))
  (wn20-synset ((:set (:triple "obtain" 1 "v")))))

(every Obtain has 
  (agent ((the recipient of Self)))
  (recipient ((the agent of Self)))
  (text-active-verbseq-sg ("obtains"))
  (text-active-verbseq-pl ("obtain"))
  (text-passive-verbseq-sg ("is obtained"))
  (text-passive-verbseq-pl ("are obtained"))
  (text-nominalization ("obtaining")))

;;; ----------

(Open has 
  (defeated-by-class-of (Be-Closed))
  (caused-by-class-of (Be-Open))
  (superclasses (Unblock))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "thing opened")
                        (:seq agent "opener")
                        (:seq instrument "portal covering")))
  (test-case ('((*the-Jar-Opening has (instance-of (Spatial-Entity))) (*the-Jar-Lid has (instance-of (Tangible-Entity))) (*the-Cookie-Jar has (instance-of (Tangible-Entity)) (has-region (*the-Jar-Opening)) (has-part (*the-Jar-Lid))) (*Ralf has (instance-of (Living-Entity))) (not (the Be-Open object-of of *the-Jar-Opening)) (a Be-Closed with (object (*the-Jar-Opening)) (instrument (*the-Jar-Lid))) (the text-gen of (thelast Be-Closed)) (a Open with (object (*the-Jar-Opening)) (agent (*Ralf))) (do-and-next (thelast Open)) (the text-gen of (thelast Open)) (forall (the resulting-state of (thelast Open)) (the text-gen of It)) (the Be-Open object-of of *the-Jar-Opening) (not (the Be-Closed object-of of *the-Jar-Opening)) (a Close with (object (*the-Jar-Opening)) (instrument (*the-Jar-Lid)) (agent (*Ralf))) (do-and-next (thelast Close)) (the text-gen of (thelast Close)) (not (the Be-Open object-of of *the-Jar-Opening)) (the Be-Closed object-of of *the-Jar-Opening) (forall (the resulting-state of (thelast Close)) (the text-gen of It)))))
  (wn16-synset ((:set (:triple "open" 6 "v") (:triple "open_up" 3 "v") (:triple "afford" 2 "v") (:triple "unfasten" 2 "v"))))
  (wn20-synset ((:set (:triple "open" 6 "v") (:triple "open_up" 3 "v") (:triple "afford" 2 "v") (:triple "unfasten" 2 "v")))))

(every Open has 
  (object ((a Spatial-Entity with (object-of ((a Be-Closed with (instrument ((a Tangible-Entity with (plays ((a Portal-Covering))))))))))))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Closed))))
  (resulting-state ((a Be-Open)))
  (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Open) [Open-pcs-1])
             (:triple (the object of Self) object-of (a Be-Closed) [Open-pcs-2])))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Open-del-1]))
             (forall (the defeats of Self) (:triple (the instrument of It) plays (a Portal-Covering)) [Open-del-2])
             (forall (the defeats of Self) (:triple It instrument (the instrument of It)) [Open-del-3])))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Open-add-1])
             (:triple (the object of Self) plays (a Portal) [Open-add-2])))
  (text-active-verbseq-sg ("opens"))
  (text-active-verbseq-pl ("open"))
  (text-passive-verbseq-sg ("gets opened"))
  (text-passive-verbseq-pl ("get opened"))
  (text-argslots ((:seq base instrument path result)))
  (preparatory-event ((:default (a Close with (object ((the object of Self))) (base ((the base of Self))) (agent ((the agent of Self))) (instrument ((the instrument of Self)))) (a Unblock with (object ((the object of Self)))))))
  (text-nominalization ("opening")))

;;; ----------

(Operations has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "operation" 1 "n") (:triple "business_activity" 1 "n") (:triple "commercial_activity" 1 "n")))))

(every Operations has 
  (text-nominalization ("operations")))

;;; ----------

(Organism has 
  (subclasses (Plant
               Animal))
  (superclasses (Living-Entity))
  (description ("Single or multicellular entities which are free living
                         and capable of reproduction.")))

(every Organism has 
  (has-part ((at-least 1 Cell)))
  (text-phrase ((the name of Self)))
  (text-gen ((the text-phrase of Self))))

;;; ----------

(Organization has 
  (subclasses (Institution
               Group
               Department))
  (superclasses (Aggregate))
  (description ("an aggregate of roles"))
  (test-case ('((BrauMeister has (superclasses (Role))) (MarketingDude has (superclasses (Role))) (*BrauCorp has (instance-of (Organization)) (element ((a BrauMeister) (a MarketingDude)))) (*Gustav has (instance-of (Person)) (plays ((the BrauMeister element of *BrauCorp)))) ((the number-of-elements of *BrauCorp) = 2) (the plays of *Gustav) ((the played-by of (the BrauMeister element of *BrauCorp)) = *Gustav) (the in-organization-of of *BrauCorp) ((the in-organization of (the plays of *Gustav)) = *BrauCorp) (not (the played-by of (the MarketingDude element of *BrauCorp))))))
  (wn20-synset ((:set (:triple "administration" 2 "n") (:triple "governance" 1 "n") (:triple "governing_body" 1 "n") (:triple "establishment" 3 "n") (:triple "brass" 3 "n") (:triple "organization" 3 "n") (:triple "organisation" 2 "n"))))
  (range-of (in-organization))
  (domain-of (in-organization-of)))

(every Organization has 
  (element-type (Role))
  (in-organization-of ((the element of Self))))

;;; ----------

(Organizing has 
  (superclasses (Maintenance))
  (wn20-synset ((:set (:triple "form" 1 "v") (:triple "organize" 1 "v")))))

(every Organizing has 
  (text-nominalization ("organizing")))

;;; ----------

(Orient has 
  (subclasses (Stand-Up
               Sit-Down
               Gesticulate
               Fidget))
  (superclasses (Action))
  (description ("to change the position or orientation of an object or part of an object"))
  (wn20-synset ((:set (:triple "move" 3 "v")))))

(every Orient has 
  (object ((must-be-a Tangible-Entity)))
  (text-active-verbseq-sg ("orients"))
  (text-active-verbseq-pl ("orient"))
  (text-passive-verbseq-sg ("gets oriented"))
  (text-passive-verbseq-pl ("get oriented"))
  (text-nominalization ("orienting")))

;;; ----------

(orientation has 
  (instance-of (EntityProperty))
  (domain (Entity))
  (range (Angle-Value))
  (scalar-constant-class (Orientation-Constant))
  (cardinal-unit-class (UoM-Angle))
  (inverse (orientation-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "orientation" 3 "n")))))

;;; ----------

(Orientation-Constant has 
  (superclasses (Constant))
  (instances (*horizontal
              *vertical
              *upright))
  (scalar-constant-class-of (orientation)))

;;; ----------

(orientation-of has 
  (inverse (orientation))
  (range (Entity))
  (domain (Angle-Value))
  (instance-of (EntityProperty)))

;;; ----------

(origin has 
  (primary-slot-of (Absorb
                    Carry
                    Enter
                    Fall
                    Go-Through
                    Go-To
                    Load
                    Move-Through
                    Move
                    Send
                    Slide
                    Take-In))
  (required-slot-of (Disperse
                     Emit
                     Exit
                     Leave
                     Move-Apart
                     Move-Out-Of))
  (instance-of (Spatial-Relation))
  (domain (Event))
  (range (Spatial-Entity))
  (inverse (origin-of))
  (text-slot (text-origin))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(origin-of has 
  (inverse (origin))
  (range (Event))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is the origin of")))

;;; ----------

(Outlet has 
  (superclasses (Portal))
  (wn20-synset ((:set (:triple "exit" 1 "n"))
                (:set (:triple "issue" 10 "n"))
                (:set (:triple "outlet" 3 "n"))
                (:set (:triple "way_out" 1 "n")))))

(every Outlet has 
  (in-event ((a Move-Out-Of)))
  (played-by ((a Spatial-Entity with (path-of ((the in-event of Self))))))
  (is-between ((the is-inside of Self)
               (the is-outside of Self))))

;;; ----------

(output has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (inverse (output-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(output-of has 
  (inverse (output))
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Paper has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "paper" 1 "n")))))

;;; ----------

(ParkingLot has 
  (superclasses (Architectural-Structure))
  (wn20-synset ((:set (:triple "parking_lot" 1 "n") (:triple "lot" 2 "n") (:triple "car_park" 1 "n") (:triple "park" 5 "n") (:triple "parking_area" 1 "n")))))

;;; ----------

(Participant has 
  (subclasses (Creator))
  (superclasses (Agent-Role))
  (wn20-synset ((:set (:triple "participant" 1 "n") (:triple "participant" 2 "n") (:triple "player" 1 "n")))))

;;; ----------

(Partition has 
  (instances (_Partition1
              _Partition2
              _Partition3
              _Partition4
              _Partition5))
  (superclasses (Thing)))

;;; ----------

(path has 
  (primary-slot-of (Absorb
                    Carry
                    Emit
                    Enter
                    Exit
                    Fall
                    Go-To
                    Leave
                    Load
                    Move-Into
                    Move
                    Send
                    Take-In))
  (required-slot-of (Go-Through
                     Move-Through
                     Slide))
  (instance-of (Spatial-Relation))
  (domain (Event))
  (range (Spatial-Entity))
  (inverse (path-of))
  (text-slot (text-path))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(path-of has 
  (inverse (path))
  (range (Event))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (combine-values-by-appending (t))
  (text-gloss ("is the path of")))

;;; ----------

(Penetrate has 
  (superclasses (Action))
  (required-slot (agent
                  object))
  (cmap-correspondence ((:seq object "the barrier penetrated")
                        (:seq agent "the penetrator")))
  (test-case ('((*forces has (instance-of (Tangible-Entity)) (is-outside (*castle))) (*castle has (instance-of (Physical-Object)) (has-part (*castle-wall))) (*castle-wall has (instance-of (Physical-Object))) (a Penetrate with (agent (*forces)) (object (*castle-wall))) (do-script (thelast Penetrate)) (the text-gen of (thelast Penetrate)) (forall (the subevent of (thelast Penetrate)) (the text-gen of It)) ((the has-region of *castle-wall) = (the path of (thelast Penetrate))) (not ((the is-outside of *forces) includes *castle)))))
  (wn16-synset ((:set (:triple "penetrate" 1 "v"))))
  (wn20-synset ((:set (:triple "penetrate" 1 "v")))))

(every Penetrate has 
  (agent ((a Tangible-Entity)))
  (object ((a Tangible-Entity with (plays ((a Barrier))))))
  (path ((the result of (the Breach subevent of Self))))
  (first-subevent ((the Breach subevent of Self)))
  (subevent ((a Breach with (agent ((the agent of Self))) (object ((the object of Self))) (next-event ((the Go-Through subevent of Self))))
             (a Go-Through with (agent ((the agent of Self))) (path ((the result of (the Breach subevent of Self)))))))
  (text-active-verbseq-sg ("penetrates"))
  (text-active-verbseq-pl ("penetrate"))
  (text-passive-verbseq-sg ("gets penetrated"))
  (text-passive-verbseq-pl ("get penetrated"))
  (text-path ("through"))
  (text-nominalization ("penetration")))

;;; ----------

(Perceive has 
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq agent "the perceiver")
                        (:seq object "the perceived")))
  (wn20-synset ((:set (:triple "perceive" 1 "v") (:triple "comprehend" 2 "v"))))
  (subclasses (Recognize)))

(every Perceive has 
  (object ((a Entity)))
  (agent ((must-be-a Tangible-Entity)))
  (text-active-verbseq-sg ("perceives"))
  (text-active-verbseq-pl ("perceive"))
  (text-passive-verbseq-sg ("is perceived"))
  (text-passive-verbseq-pl ("are perceived"))
  (text-nominalization ("perception")))

;;; ----------

(perimeter has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Perimeter-Scale))
  (scalar-constant-class (Perimeter-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (perimeter-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "perimeter" 3 "n") (:triple "circumference" 1 "n")))))

;;; ----------

(Perimeter-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (perimeter)))

;;; ----------

(perimeter-of has 
  (inverse (perimeter))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Perimeter-Scale has 
  (superclasses (Scale))
  (scale-class-of (perimeter)))

;;; ----------

(Person has 
  (superclasses (Animal))
  (description ("human being; a sentient animal"))
  (wn20-synset ((:set (:triple "person" 1 "n") (:triple "individual" 1 "n") (:triple "someone" 1 "n") (:triple "somebody" 1 "n") (:triple "mortal" 1 "n") (:triple "human" 1 "n") (:triple "soul" 2 "n")))))

(every Person has 
  (sentience ((a Sentience-Value with (value (*sentient))))))

;;; ----------

(Physical-Document has 
  (superclasses (Artifact))
  (description ("a physically rendered written message")))

(every Physical-Document has 
  (result-of ((a Print)))
  (has-part ((a Physical-Mark))))

;;; ----------

(Physical-Mark has 
  (description ("Any mark created as the result of writing,
sketching, printing, drawing etc (i.e. the result of Mark).  Any
persistant physical mark or set of marks created by depositing or
applying something acting in the role of a writing substance
(e.g. ink, paint, sand, blood) to some kind of writable medium using
something acting in the role of writing implement (e.g. pencil,
marker, finger, paintbrush, spray paint can, printer)."))
  (superclasses (Piece-of-Substance))
  (wn20-synset ((:set (:triple "mark" 4 "n") (:triple "print" 3 "n") (:triple "mark" 10 "n")))))

(every Physical-Mark has 
  (result-of ((a Mark))))

;;; ----------

(Physical-Object has 
  (subclasses (Living-Entity
               Inanimate-Object
               Chemical-Entity))
  (superclasses (Tangible-Entity))
  (wn20-synset ((:set (:triple "object" 1 "n"))))
  (domain-of (moment-of-inertia))
  (range-of (moment-of-inertia-of)))

;;; ----------

(physical-state has 
  (instance-of (EntityProperty))
  (domain (Substance))
  (range (State-Value))
  (categorical-constant-class (State-Constant))
  (inverse (physical-state-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "state" 8 "n") (:triple "state of matter" 1 "n") (:triple "physical state" 0 "n")))))

;;; ----------

(physical-state-of has 
  (inverse (physical-state))
  (range (Substance))
  (domain (State-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Piece-of-Glass has 
  (superclasses (Piece-of-Substance)))

(every Piece-of-Glass has 
  (material ((a Glass))))

;;; ----------

(Piece-of-Metal has 
  (superclasses (Piece-of-Substance)))

(every Piece-of-Metal has 
  (material ((a Metal))))

;;; ----------

(Piece-of-Paper has 
  (superclasses (Piece-of-Substance))
  (wn20-synset ((:set (:triple "paper" 5 "n")))))

(every Piece-of-Paper has 
  (material ((a Paper))))

;;; ----------

(Piece-of-Plastic has 
  (superclasses (Piece-of-Substance)))

(every Piece-of-Plastic has 
  (material ((a Plastic))))

;;; ----------

(Piece-of-Rubber has 
  (superclasses (Piece-of-Substance)))

(every Piece-of-Rubber has 
  (material ((a Rubber))))

;;; ----------

(Piece-of-Stone has 
  (superclasses (Piece-of-Substance))
  (wn20-synset ((:set (:triple "stone" 1 "n") (:triple "rock" 1 "n")))))

(every Piece-of-Stone has 
  (material ((a Stone))))

;;; ----------

(Piece-of-Substance has 
  (subclasses (Piece-of-Wood
               Piece-of-Tissue
               Piece-of-Stone
               Piece-of-Rubber
               Piece-of-Plastic
               Piece-of-Paper
               Piece-of-Metal
               Piece-of-Glass
               Physical-Mark))
  (superclasses (Inanimate-Object)))

(every Piece-of-Substance has 
  (material ((a Substance))))

;;; ----------

(Piece-of-Tissue has 
  (superclasses (Piece-of-Substance)))

(every Piece-of-Tissue has 
  (material ((a Tissue))))

;;; ----------

(Piece-of-Wood has 
  (superclasses (Piece-of-Substance)))

(every Piece-of-Wood has 
  (material ((a Wood))))

;;; ----------

(Place has 
  (superclasses (Spatial-Entity))
  (wn20-synset ((:set (:triple "location" 1 "n"))))
  (subclasses (Region))
  (member-of (_Partition4))
  (range-of (location))
  (domain-of (location-of)))

(every Place has 
  (location ((exactly 0 Place)))
  (is-near ((forall (the location-of of Self) (the is-near of It))))
  (abuts ((forall (the location-of of Self) (the abuts of It))))
  (is-above ((forall (the location-of of Self) (the is-above of It))))
  (is-below ((forall (the location-of of Self) (the is-below of It))))
  (is-along ((forall (the location-of of Self) (the is-along of It))))
  (is-at ((forall (the location-of of Self) (the is-at of It))))
  (is-at-of ((forall (the location-of of Self) (the is-at-of of It))))
  (is-beside ((forall (the location-of of Self) (the is-beside of It))))
  (is-between ((forall (the location-of of Self) (the is-between of It))))
  (is-behind ((forall (the location-of of Self) (the is-behind of It))))
  (is-in-front-of ((forall (the location-of of Self) (the is-in-front-of of It))))
  (is-inside ((forall (the location-of of Self) (the is-inside of It))))
  (encloses ((forall (the location-of of Self) (the encloses of It))))
  (is-on ((forall (the location-of of Self) (the is-on of It))))
  (has-on-it ((forall (the location-of of Self) (the has-on-it of It))))
  (is-opposite ((forall (the location-of of Self) (the is-opposite of It))))
  (is-outside ((forall (the location-of of Self) (the is-outside of It))))
  (does-not-enclose ((forall (the location-of of Self) (the does-not-enclose of It))))
  (is-over ((forall (the location-of of Self) (the is-over of It))))
  (is-under ((forall (the location-of of Self) (the is-under of It)))))

;;; ----------

(Place-Order has 
  (superclasses (Action))
  (description ("order an entity from a seller"))
  (wn20-synset ((:set (:triple "order" 2 "v")))))

(every Place-Order has 
  (object ((a Entity with (is-possessed-by ((a Entity))))))
  (base ((the is-possessed-by of (the object of Self))))
  (text-nominalization ("placing")))

;;; ----------

(Planning has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "preparation" 1 "n") (:triple "planning" 1 "n") (:triple "readying" 1 "n")))))

(every Planning has 
  (text-nominalization ("planning")))

;;; ----------

(Plant has 
  (member-of (_Partition2))
  (superclasses (Organism))
  (description ("a living entity incapable of locomotion"))
  (wn20-synset ((:set (:triple "plant" 2 "n") (:triple "flora" 2 "n") (:triple "plant_life" 1 "n")))))

;;; ----------

(Plastic has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "plastic" 1 "n")))))

;;; ----------

(Platform has 
  (subclasses (Floor))
  (superclasses (Architectural-Structure))
  (description ("a horizontal architectural structure supporting everything on it"))
  (test-case ('((*TheOrchestra has (instance-of (Organization))) (*TheChoir has (instance-of (Organization))) (*TheConductor has (instance-of (Person))) (*TheStage has (instance-of (Platform)) (has-on-it (*TheOrchestra *TheChoir *TheConductor))) ((the object of (the Be-Supported instrument-of of *TheStage)) includes *TheOrchestra) ((the instrument of (the Be-Supported object-of of *TheChoir)) = *TheStage))))
  (wn20-synset ((:set (:triple "support" 7 "n") (:triple "support" 10 "n") (:triple "supporting_structure" 1 "n")))))

(every Platform has 
  (orientation ((a Angle-Value with (value ((:pair *horizontal Entity))))))
  (instrument-of ((forall (the has-on-it of Self) (a Be-Supported with (object (It)) (instrument (Self)))))))

;;; ----------

(played-by has 
  (inverse (plays))
  (range (Entity))
  (domain (Role))
  (instance-of (Participant-Relation))
  (text-gloss ("is the role played by")))

;;; ----------

(plays has 
  (instance-of (Participant-Relation))
  (domain (Entity))
  (range (Role))
  (inverse (played-by))
  (cardinality (1-to-N))
  (fluent-status (*Inertial-Fluent))
  (text-gloss ("plays the role of")))

;;; ----------

(polarity has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Polarity-Value))
  (categorical-constant-class (Polarity-Constant))
  (fluent-status (*Inertial-Fluent))
  (inverse (polarity-of))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "polarity" 2 "n") (:triple "sign" 7 "n")))))

;;; ----------

(Polarity-Constant has 
  (superclasses (Constant))
  (instances (*positive
              *negative))
  (categorical-constant-class-of (polarity)))

;;; ----------

(polarity-of has 
  (inverse (polarity))
  (range (Tangible-Entity))
  (domain (Polarity-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Polarity-Value has 
  (superclasses (Property-Value))
  (range-of (polarity))
  (domain-of (polarity-of)))

;;; ----------

(Political-State has 
  (superclasses (Administrative-District))
  (description ("a state (such as Texas) within a country"))
  (wn20-synset ((:set (:triple "state" 2 "n") (:triple "province" 1 "n")))))

;;; ----------

(Portal has 
  (subclasses (Outlet
               Entrance))
  (superclasses (Conduit))
  (wn20-synset ((:set (:triple "portal" 1 "n")))))

(every Portal has 
  (in-event ((a Move-Through)))
  (played-by ((a Spatial-Entity with (path-of ((the in-event of Self)))))))

;;; ----------

(Portal-Covering has 
  (superclasses (Barrier))
  (wn16-synset ((:set (:triple "movable_barrier" 1 "n"))))
  (wn20-synset ((:set (:triple "movable_barrier" 1 "n")))))

(every Portal-Covering has 
  (played-by ((a Tangible-Entity with (is-part-of ((a Tangible-Entity with (plays ((a Container))))))))))

;;; ----------

(possesses has 
  (instance-of (Participant-Relation))
  (domain (Entity))
  (range (Entity))
  (inverse (is-possessed-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("possesses")))

;;; ----------

(power has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Power-Value))
  (scalar-constant-class (Power-Constant))
  (cardinal-unit-class (UoM-Power))
  (inverse (power-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "power" 2 "n")))))

;;; ----------

(Power-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (power)))

;;; ----------

(power-of has 
  (inverse (power))
  (range (Spatial-Entity))
  (domain (Power-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Power-Value has 
  (superclasses (Property-Value))
  (range-of (power))
  (domain-of (power-of)))

;;; ----------

(preferred-unit has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (range (Unit-of-Measurement))
  (inverse (preferred-unit-of))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t))
  (cardinality (N-to-1)))

;;; ----------

(preferred-unit-of has 
  (inverse (preferred-unit))
  (range (Property-Value))
  (domain (Unit-of-Measurement))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(preparatory-event has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (range (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(preparatory-event-of has 
  (range (Event))
  (domain (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(pressure has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Pressure-Value))
  (scale-class (Pressure-Scale))
  (scalar-constant-class (Pressure-Constant))
  (cardinal-unit-class (UoM-Pressure))
  (inverse (pressure-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "pressure" 1 "n") (:triple "pressure level" 1 "n") (:triple "force per unit area" 1 "n")))))

;;; ----------

(Pressure-Constant has 
  (superclasses (Constant))
  (instances (*low
              *high))
  (scalar-constant-class-of (pressure)))

;;; ----------

(pressure-of has 
  (inverse (pressure))
  (range (Spatial-Entity))
  (domain (Pressure-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Pressure-Scale has 
  (superclasses (Scale))
  (scale-class-of (pressure)))

;;; ----------

(Pressure-Value has 
  (superclasses (Property-Value))
  (range-of (pressure))
  (domain-of (pressure-of)))

;;; ----------

(prev-event has 
  (inverse (next-event))
  (range (Event))
  (domain (Event))
  (instance-of (Meronymic-Relation))
  (text-gloss ("comes after")))

;;; ----------

(prevented-by has 
  (inverse (prevents))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (text-gloss ("is prevented by")))

;;; ----------

(prevents has 
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (prevented-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("prevents")))

;;; ----------

(previous-element has 
  (inverse (next-element))
  (range (Entity))
  (domain (Entity))
  (instance-of (Meronymic-Relation))
  (wn20-synset ((:set (:triple "previous element" 0 "n"))))
  (text-gloss ("comes after")))

;;; ----------

(Primary-Constant has 
  (instances (*old
              *deep
              *long
              *tall
              *thick
              *wide))
  (superclasses (Constant)))

;;; ----------

(primary-slot has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(primary-slot-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(primitive-actions has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (range (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(primitive-actions-of has 
  (range (Event))
  (domain (Event))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Print has 
  (superclasses (Mark))
  (required-slot (object
                  result))
  (description ("To render a written message in physical form"))
  (wn20-synset ((:set (:triple "print" 1 "v") (:triple "publish" 1 "v")))))

(every Print has 
  (object ((a Document)))
  (result ((a Physical-Document)))
  (text-active-verbseq-sg ("prints"))
  (text-active-verbseq-pl ("print"))
  (text-passive-verbseq-sg ("gets printed"))
  (text-passive-verbseq-pl ("get printed"))
  (text-nominalization ("printing")))

;;; ----------

(priority has 
  (instance-of (EntityProperty
                EventProperty))
  (domain (Thing))
  (range (Unitless-Value))
  (scale-class (Priority-Scale))
  (scalar-constant-class (Priority-Constant))
  (cardinal-unit-class (UoM-Unitless))
  (inverse (priority-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "priority" 1 "n") (:triple "precedence" 1 "n") (:triple "precedency" 1 "n")))))

;;; ----------

(Priority-Constant has 
  (superclasses (Constant))
  (instances (*low
              *medium
              *high
              *urgent))
  (element-type-of (*low-urgent-scale))
  (scalar-constant-class-of (priority)))

;;; ----------

(priority-of has 
  (inverse (priority))
  (range (Thing))
  (domain (Unitless-Value))
  (instance-of (EntityProperty
                EventProperty)))

;;; ----------

(Priority-Scale has 
  (superclasses (Scale))
  (instances (*low-urgent-scale))
  (scale-class-of (priority)))

;;; ----------

(Produce has 
  (subclasses (Mark))
  (superclasses (Create))
  (required-slot (raw-material))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq raw-material "the raw material/parts")))
  (test-case ('((new-situation) (*metal has (instance-of (Substance))) (a Produce with (raw-material (*metal))) (do-and-next (thelast Produce)) ((the material of (the result of (thelast Produce))) = *metal) (the text-gen of (thelast Produce)) (new-situation) (*brick has (instance-of (Physical-Object))) (a Produce with (raw-material (*brick))) (do-and-next (thelast Produce)) ((the has-part of (the result of (thelast Produce))) = *brick) (the text-gen of (thelast Produce)))))
  (wn16-synset ((:set (:triple "produce" 1 "v") (:triple "bring_forth" 3 "v"))))
  (wn20-synset ((:set (:triple "produce" 1 "v") (:triple "bring_forth" 3 "v")))))

(every Produce has 
  (raw-material ((a Tangible-Entity)))
  (soft-pcs-list ((forall (the raw-material of Self) (:triple It object-of (a Be-Controlled with (agent (the agent of Self)))))))
  (add-list ((if (has-value (the result of Self)) then (if ((the raw-material of Self) isa Substance) then (forall (the result of Self) (:triple It material (the raw-material of Self) [Produce-add-1])) else (forall (the result of Self) (:triple It has-part (the raw-material of Self) [Produce-add-2]))) else (if ((the raw-material of Self) isa Substance) then (:triple Self result (a Tangible-Entity with (material ((the raw-material of Self)))) [Produce-add-3]) else (:triple Self result (a Tangible-Entity with (has-part ((the raw-material of Self)))) [Produce-add-4])))))
  (text-argslots ((:seq raw-material instrument)))
  (text-active-verbseq-sg ("produces"))
  (text-active-verbseq-pl ("produce"))
  (text-passive-verbseq-sg ("gets produced"))
  (text-passive-verbseq-pl ("get produced"))
  (text-nominalization ("production")))

;;; ----------

(Product has 
  (superclasses (Role))
  (wn20-synset ((:set (:triple "product" 2 "n"))
                (:set (:triple "production" 2 "n")))))

(every Product has 
  (in-event ((a Produce)))
  (played-by ((a Tangible-Entity with (result-of ((the in-event of Self))) (material ((the raw-material of (the in-event of Self))))))))

;;; ----------

(Propel has 
  (superclasses (Move))
  (wn16-synset ((:set (:triple "propel" 1 "v") (:triple "impel" 2 "v"))))
  (wn20-synset ((:set (:triple "propel" 1 "v") (:triple "impel" 2 "v")))))

(every Propel has 
  (agent ((must-be-a Entity)))
  (object ((a Tangible-Entity with (is-near ((the agent of Self))))))
  (toward ((a Spatial-Entity with (plays ((a Target))))))
  (destination ((the toward of Self)))
  (text-nominalization ("propulsion")))

;;; ----------

(Property-Class-Order has 
  (superclasses (Property-Group
                 Aggregate))
  (domain-of (property-slot))
  (range-of (property-slot-of)))

;;; ----------

(Property-Group has 
  (subclasses (Unit-of-Measurement
               Scale
               Scalar
               Property-Value
               Property-Class-Order
               Constant
               Categorical
               Cardinal))
  (superclasses (Thing))
  (domain-of (value))
  (range-of (value-of)))

;;; ----------

(property-of-slot has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (range (Slot))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(property-of-slot-of has 
  (range (Property-Value))
  (domain (Slot))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(property-slot has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value
           Property-Class-Order
           Increase
           Decrease))
  (range (Slot))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(property-slot-of has 
  (range (Decrease
          Increase
          Property-Class-Order
          Property-Value))
  (domain (Slot))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Property-Value has 
  (subclasses (Worth-Value
               Wetness-Value
               Volume-Value
               Voltage-Value
               Velocity-Value
               Unitless-Value
               Truth-Value
               Trait-Value
               Texture-Value
               Temperature-Value
               Taste-Value
               State-Value
               Smell-Value
               Size-Value
               Shape-Value
               Sex-Value
               Sentience-Value
               Rotational-Rate-Value
               Rate-Value
               Quantity-Value
               Pressure-Value
               Power-Value
               Polarity-Value
               Momentum-Value
               Moment-of-Inertia-Value
               Mass-Value
               Manner-Value
               Luminous-Intensity-Value
               Luminous-Flux-Value
               Luminance-Value
               Length-Value
               Intensity-Value
               Integrity-Value
               Frequency-Value
               Duration-Value
               Density-Value
               Consistency-Value
               Color-Value
               Capacity-Value
               Brightness-Value
               Breakability-Value
               Area-Value
               Animacy-Value
               Angle-Value
               Acceleration-Value))
  (superclasses (Property-Group))
  (domain-of (cardinal-value
              categorical-value
              from-value-of
              greater-than-or-equal-to
              less-than-or-equal-to
              greater-than
              less-than
              max-value
              min-value
              preferred-unit
              property-of-slot
              property-slot
              same-as
              scalar-value
              to-value-of))
  (range-of (cardinal-value-of
             categorical-value-of
             from-value
             greater-than-or-equal-to
             less-than-or-equal-to
             greater-than
             less-than
             max-value-of
             min-value-of
             preferred-unit-of
             property-of-slot-of
             property-slot-of
             same-as
             scalar-value-of
             to-value)))

(every Property-Value has 
  (slots-to-opportunistically-evaluate (value))
  (property-slot ((the range-of of (the instance-of of Self))))
  (property-of-slot ((the inverse of (the property-slot of Self))))
  (text-slot (((oneof ?p in (the property-slot of Self) where (has-value (the (the inverse of ?p) of Self))) or (the primary-slot of Self) or (the first of (the property-slot of Self)))))
  (text-premods ((if (has-value (the used-in-equation of Self)) then ((?vsympair == (oneof (the equation-symbol of (the used-in-equation of Self)) where ((the2 of It) = Self))) and (make-phrase (:seq (if (#'(LAMBDA () (LISTP (CADR (KM-UNIQUE0 '?vsympair))))) then (if ((#'(LAMBDA () (CAADR (KM-UNIQUE0 '?vsympair)))) = QUOTE) then (#'(LAMBDA () (STRING (CADADR (KM-UNIQUE0 '?vsympair))))) else "?") else #'(LAMBDA () (STRING (CADR (KM-UNIQUE0 '?vsympair))))) "="))) else (if (has-value (the called of Self)) then (make-phrase (:seq (oneof (the called of Self) where t) "=")) else (make-phrase (:seq (forall ?i in (forall ?ip in (the property-of-slot of Self) (the ?ip of Self)) (:seq "the" (oneof ?p in (the property-slot of Self) where ((the ?p of ?i) = Self)) "of" (the text-def-head of ?i) "="))))))))
  (text-sentence ((if (not ((make-phrase (the text-phrase of Self)) = "")) then (make-phrase (:seq (the text-premods of Self) (the text-head of Self))) else (the text-existential-there of Self))))
  (text-existential-there ((make-sentence (:seq "there is" (the text-indef-head of Self) (if (has-value (the called of Self)) then (:seq "(called" (the called of Self) "nospace" ")"))))))
  (text-def-determiner ((:seq "the")))
  (text-indef-determiner ((if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (the text-slot of Self))) 0))))) then (:seq "an") else (:seq "a"))))
  (text-description ((the text-sentence of Self)))
  (text-gen ((make-phrase (the text-phrase of Self))))
  (text-phrase ((:seq (the text-head of Self) (the text-postmods of Self))))
  (text-def-head ((if (has-value (the text-head of Self)) then (:seq (the text-def-determiner of Self) (the text-slot of Self) "of" (the text-head of Self)) else (:seq "the unknown" (the text-slot of Self)))))
  (text-indef-head ((if (has-value (the text-head of Self)) then (:seq (the text-indef-determiner of Self) (the text-slot of Self) "of" (the text-head of Self)) else (:seq "an unknown" (the text-slot of Self)))))
  (text-head ((if (the categorical-constant-class of (the property-slot of Self)) then (oneof ?val in (the value of Self) where (oneof ?valclass in (the classes of ?val) where ((the categorical-constant-class of (the property-slot of Self)) includes ?valclass))) else ((?scalar-val == ((oneof ?val in (the value of Self) where (((the1 of ?val) and (forall ?ip in (the property-of-slot of Self) ((the instance-of of (the ?ip of Self)) includes (the2 of ?val)))))) or (oneof ?val in (the value of Self) where t))) and (?card-val == (oneof ?val in (the value of Self) where (((the1 of ?val) and ((the1 of ?val) isa Number) and ((oneof ?prop in (the range-of of (the instance-of of Self)) where ((the cardinal-unit-class of ?prop) and ((the2 of ?val) isa (the cardinal-unit-class of ?prop))))))))) and (?conv-card-val == (if ((has-value ?card-val) and (has-value (the preferred-unit of Self))) then (the value of (the output of (a Unit-Conversion with (input (Self)) (target-unit ((the preferred-unit of Self)))))))) and (if ?conv-card-val then (:seq (the1 of ?conv-card-val) (if ((the2 of ?conv-card-val) /= *unity) then (the2 of ?conv-card-val))) else (if ?card-val then (:seq (the1 of ?card-val) (if ((the2 of ?card-val) /= *unity) then (the2 of ?card-val))) else (if ?scalar-val then (if (oneof ?ip in (the property-of-slot of Self) where ((the2 of ?scalar-val) = (the instance-of of (the ?ip of Self)))) then (the1 of ?scalar-val) else (:seq (the1 of ?scalar-val))))))))))
  (text-postmods ((if (has-value (oneof ?val in (the value of Self) where ((the1 of ?val) isa Number))) then (oneof (the all-instances of (the scalar-constant-class of (the text-slot of Self))) where (It isa Primary-Constant)))))
  (greater-than ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-gt TheValue) else t))))
  (greater-than-or-equal-to ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-gte TheValue) else t))))
  (less-than ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-lt TheValue) else t))))
  (less-than-or-equal-to ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-lte TheValue) else t))))
  (same-as ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-eq TheValue) else t))))
  (value ((((constraint ((if (has-value (the scalar-constant-class of (the property-slot of Self))) then (((((the1 of TheValue) isa Number) and ((if (has-value (the2 of TheValue)) then (if ((the2 of TheValue) isa Unit-of-Measurement) then (oneof (the cardinal-unit-class of (the property-slot of Self)) where ((the2 of TheValue) isa It)) else (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue)))) else ((the cardinal-unit-class of (the property-slot of Self)) = UoM-Unitless)))) or ((oneof (the scalar-constant-class of (the property-slot of Self)) where ((the1 of TheValue) isa It)) and (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue))))) and (#'(LAMBDA () (VALUECHECK (KM0 'Self) (KM0 'TheValue))))) else ((oneof (the categorical-constant-class of (the property-slot of Self)) where (TheValue isa It)))))) (set-constraint (#'(LAMBDA () (VALUES-CONSISTENT (KM0 'TheValues)))))) && ((forall (the cardinal-value of Self) (:pair (the numeric-value of It) (the unit of It)))) && ((forall (the scalar-value of Self) (:pair (the scalar-constant of It) (the reference-class of It)))) && ((forall (the categorical-value of Self) (the categorical-constant of It))) && (#'(LAMBDA () (COND ((FBOUNDP 'EQUATION-SOLVE) (EQUATION-SOLVE 'Self))))))))
  (max-value ((constraint (sanity-check ((if (has-value (the scalar-constant-class of (the property-slot of Self))) then (((((the1 of TheValue) isa Number) and ((if (has-value (the2 of TheValue)) then (if ((the2 of TheValue) isa Unit-of-Measurement) then (oneof (the cardinal-unit-class of (the property-slot of Self)) where ((the2 of TheValue) isa It)) else (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue)))) else ((the cardinal-unit-class of (the property-slot of Self)) = UoM-Unitless)))) or ((oneof (the scalar-constant-class of (the property-slot of Self)) where ((the1 of TheValue) isa It)) and (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue))))) and (#'(LAMBDA () (VALUECHECK (KM0 'Self) (KM0 'TheValue))))) else ((oneof (the categorical-constant-class of (the property-slot of Self)) where (TheValue isa It)))))))))
  (min-value ((constraint (sanity-check ((if (has-value (the scalar-constant-class of (the property-slot of Self))) then (((((the1 of TheValue) isa Number) and ((if (has-value (the2 of TheValue)) then (if ((the2 of TheValue) isa Unit-of-Measurement) then (oneof (the cardinal-unit-class of (the property-slot of Self)) where ((the2 of TheValue) isa It)) else (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue)))) else ((the cardinal-unit-class of (the property-slot of Self)) = UoM-Unitless)))) or ((oneof (the scalar-constant-class of (the property-slot of Self)) where ((the1 of TheValue) isa It)) and (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue))))) and (#'(LAMBDA () (VALUECHECK (KM0 'Self) (KM0 'TheValue))))) else ((oneof (the categorical-constant-class of (the property-slot of Self)) where (TheValue isa It)))))))))
  (cardinal-value ((((must-be-a Cardinal with (numeric-value ((must-be-a Number))) (unit ((constraint ((oneof (the cardinal-unit-class of (the property-slot of Self)) where (It covers TheValue)) or (TheValue is-subsumed-by (the domain of (the property-slot of Self))))))))) && ((forall (the value of Self) where ((the1 of It) isa Number) (a Cardinal with (numeric-value ((the1 of It))) (unit ((the2 of It)))))))))
  (scalar-value ((((must-be-a Scalar with (scalar-constant ((constraint (oneof (the scalar-constant-class of (the property-slot of Self)) where (It covers TheValue))))))) && ((forall (the value of Self) where (((the1 of It) isa Constant) and (has-value (the2 of It))) (a Scalar with (scalar-constant ((the1 of It))) (reference-class ((the2 of It)))))))))
  (categorical-value ((((must-be-a Categorical with (categorical-constant ((constraint (oneof (the categorical-constant-class of (the property-slot of Self)) where (It covers TheValue))))))) && ((forall (the value of Self) where (has-value (the categorical-constant-class-of of Self)) (a Categorical with (categorical-constant (It)))))))))

;;; ----------

(Prosecution has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "prosecution" 1 "n") (:triple "criminal_prosecution" 1 "n") (:triple "legal_action" 1 "n")))))

(every Prosecution has 
  (text-nominalization ("prosecution")))

;;; ----------

(Province has 
  (superclasses (Administrative-District))
  (wn20-synset ((:set (:triple "state" 2 "n") (:triple "province" 1 "n")))))

;;; ----------

(Pupil has 
  (superclasses (Role))
  (wn20-synset ((:set (:triple "pupil" 1 "n") (:triple "student" 1 "n") (:triple "educatee" 1 "n") (:triple "schoolchild" 1 "n") (:triple "school-age_child" 1 "n") (:triple "pupil" 3 "n")))))

(every Pupil has 
  (in-event ((must-be-a Teach)))
  (played-by ((a Tangible-Entity with (recipient-of ((the in-event of Self)))))))

;;; ----------

(purpose has 
  (instance-of (Causal-Relation
                Agentive-Relation))
  (domain (Entity))
  (range (Role))
  (inverse (purpose-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "purpose" 2 "n") (:triple "function" 0 "n"))))
  (text-gloss ("has the purpose of being")))

;;; ----------

(purpose-of has 
  (inverse (purpose))
  (range (Entity))
  (domain (Role))
  (instance-of (Causal-Relation
                Agentive-Relation))
  (text-gloss ("is the purpose of")))

;;; ----------

(quantity has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Quantity-Value))
  (scalar-constant-class (Quantity-Constant))
  (cardinal-unit-class (UoM-Quantity))
  (fluent-status (*Inertial-Fluent))
  (inverse (quantity-of))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "quantity" 1 "n") (:triple "quantity" 3 "n") (:triple "measure" 3 "n") (:triple "amount" 3 "n")))))

;;; ----------

(Quantity-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (quantity)))

;;; ----------

(quantity-of has 
  (inverse (quantity))
  (range (Tangible-Entity))
  (domain (Quantity-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Quantity-Value has 
  (superclasses (Property-Value))
  (range-of (quantity))
  (domain-of (quantity-of)))

;;; ----------

(Question has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "inquiry" 2 "n") (:triple "enquiry" 1 "n") (:triple "query" 1 "n") (:triple "interrogation" 1 "n") (:triple "interrogative_sentence" 1 "n"))))
  (wn20-synset ((:set (:triple "inquiry" 2 "n") (:triple "enquiry" 1 "n") (:triple "query" 1 "n") (:triple "interrogation" 1 "n") (:triple "interrogative_sentence" 1 "n")))))

;;; ----------

(radius has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Radius-Scale))
  (scalar-constant-class (Radius-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (radius-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "radius" 1 "n") (:triple "r" 4 "n")))))

;;; ----------

(Radius-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (radius)))

;;; ----------

(radius-of has 
  (inverse (radius))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Radius-Scale has 
  (superclasses (Scale))
  (scale-class-of (radius)))

;;; ----------

(range2 has 
  (instance-of (KM-Slot-Group))
  (domain (Slot))
  (range (Class))
  (cardinality (N-to-N)))

;;; ----------

(range2-of has 
  (range (Slot))
  (domain (Class))
  (instance-of (KM-Slot-Group)))

;;; ----------

(rate has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Rate-Value))
  (scale-class (Rate-Scale))
  (scalar-constant-class (Rate-Constant))
  (cardinal-unit-class (UoM-Rate))
  (inverse (rate-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "rate" 2 "n")))))

;;; ----------

(Rate-Constant has 
  (superclasses (Constant))
  (instances (*slow
              *fast))
  (scalar-constant-class-of (rate))
  (element-type-of (*slow-fast-scale)))

;;; ----------

(rate-of has 
  (inverse (rate))
  (range (Event))
  (domain (Rate-Value))
  (instance-of (EventProperty)))

;;; ----------

(Rate-Scale has 
  (superclasses (Scale))
  (scale-class-of (rate))
  (instances (*slow-fast-scale)))

;;; ----------

(Rate-Value has 
  (superclasses (Property-Value))
  (test-case ('((Trip has (superclasses (Event))) (*fly-to-Utah has (instance-of (Trip)) (rate ((a Rate-Value)))) (*drive-to-Utah has (instance-of (Trip)) (rate ((a Rate-Value with (value ((:pair *slow Trip))) (less-than ((the rate of *fly-to-Utah))))))) (the value of (the rate of *drive-to-Utah)) ((the less-than of (the rate of *drive-to-Utah)) includes (the rate of *fly-to-Utah)) ((the greater-than of (the rate of *fly-to-Utah)) includes (the rate of *drive-to-Utah)))))
  (range-of (rate))
  (domain-of (rate-of)))

;;; ----------

(raw-material has 
  (required-slot-of (Produce))
  (instance-of (Participant-Relation))
  (domain (Event))
  (range (Tangible-Entity))
  (inverse (raw-material-of))
  (text-slot (text-raw-material))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("consumes"))
  (wn20-synset ((:set (:triple "reactant" 1 "n") (:triple "raw material" 0 "n")))))

;;; ----------

(raw-material-of has 
  (inverse (raw-material))
  (range (Event))
  (domain (Tangible-Entity))
  (instance-of (Participant-Relation))
  (text-slot (text-raw-material-of))
  (text-gloss ("is consumed by")))

;;; ----------

(Read has 
  (description ("The act of reading a physical written document."))
  (superclasses (Sense))
  (wn20-synset ((:set (:triple "read" 1 "v")))))

(every Read has 
  (object ((a Physical-Document)
           (must-be-a Physical-Document)))
  (text-nominalization ("reading")))

;;; ----------

(Receive has 
  (subclasses (Obtain))
  (superclasses (Transfer))
  (required-slot (recipient
                  object))
  (primary-slot (agent
                 donor
                 instrument))
  (cmap-correspondence ((:seq object "the thing received")
                        (:seq agent "causer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Present has (instance-of (Tangible-Entity))) (*Maple has (instance-of (Tangible-Entity))) (*Receive has (instance-of (Receive)) (recipient (*Maple)) (object (*Present))) (do-and-next *Receive) (the text-gen of (thelast Receive)) ((the possesses of *Maple) = *Present) ((the is-possessed-by of *Present) = *Maple))))
  (wn16-synset ((:set (:triple "receive" 1 "v") (:triple "have" 16 "v"))))
  (wn20-synset ((:set (:triple "receive" 1 "v") (:triple "have" 15 "v")))))

(every Receive has 
  (recipient ((a Entity)))
  (text-active-verbseq-sg ("receives"))
  (text-active-verbseq-pl ("receive"))
  (text-passive-verbseq-sg ("is received"))
  (text-passive-verbseq-pl ("are received"))
  (text-subj ((if (has-value (the agent of Self)) then (the agent of Self) else (the recipient of Self))))
  (text-argslots ((:seq donor instrument)))
  (text-active-sentence ((:seq (if ((the text-subj of Self) /= (the recipient of Self)) then (:seq (the text-subj-phrase of Self) (if ((the number of (the text-subj of Self)) = 1) then ("causes") else ("cause")) (andify (the text-phrase of (the recipient of Self))) ("to") (the text-active-verbseq-pl of Self)) else (:seq (the text-subj-phrase of Self) (the text-active-phrase of Self))) (the text-dobj-phrase of Self) (the text-arguments of Self))))
  (text-nominalization ("reception")))

;;; ----------

(recipient has 
  (required-slot-of (Command
                     Deceive
                     Deliver
                     Donate
                     Feed
                     Give
                     Inquire
                     Obtain
                     Receive
                     Send
                     Take
                     Teach))
  (primary-slot-of (Communicate
                    Convey
                    Lose
                    Relinquish
                    Supply
                    Transfer
                    Transmit))
  (instance-of (Participant-Relation))
  (domain (Event))
  (range (Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (recipient-of))
  (text-slot (text-recipient))
  (cardinality (N-to-N))
  (text-gloss ("has recipient"))
  (wn20-synset ((:set (:triple "recipient_role" 1 "n") (:triple "recipient" 2 "n")))))

;;; ----------

(recipient-of has 
  (inverse (recipient))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation))
  (text-gloss ("is recipient of")))

;;; ----------

(Recipient-Role has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "recipient" 1 "n") (:triple "receiver" 4 "n"))))
  (wn20-synset ((:set (:triple "recipient" 1 "n") (:triple "receiver" 4 "n")))))

(every Recipient-Role has 
  (in-event ((must-be-a Event)))
  (played-by ((a Entity with (recipient-of ((the in-event of Self)))))))

;;; ----------

(Recognize has 
  (superclasses (Perceive))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq agent "the recognizer")
                        (:seq object "the recognized")))
  (wn20-synset ((:set (:triple "acknowledge" 6 "v") (:triple "recognize" 1 "v") (:triple "recognise" 8 "v") (:triple "know" 6 "v") (:triple "recognize" 3 "v") (:triple "recognise" 3 "v") (:triple "distinguish" 2 "v") (:triple "discern" 1 "v") (:triple "pick_out" 2 "v") (:triple "make_out" 1 "v") (:triple "tell_apart" 1 "v") (:triple "acknowledge" 4 "v") (:triple "recognize" 7 "v") (:triple "recognise" 5 "v") (:triple "recognize" 9 "v") (:triple "recognise" 1 "v")))))

(every Recognize has 
  (object ((a Entity)))
  (agent ((must-be-a Tangible-Entity)))
  (soft-pcs-list ((if (has-value (the agent of Self)) then (:triple (the agent of Self) experiencer (a Be-Known with (object ((a Information with (information-content (the object of Self))))))))))
  (text-active-verbseq-sg ("recognizes"))
  (text-active-verbseq-pl ("recognize"))
  (text-passive-verbseq-sg ("is recognized"))
  (text-passive-verbseq-pl ("are recognized"))
  (text-nominalization ("recognition")))

;;; ----------

(Record has 
  (description ("An action involving a Sensor such that a Recording is created as the result."))
  (superclasses (Create))
  (wn20-synset ((:set (:triple "record" 2 "v") (:triple "tape" 3 "v") (:triple "record" 2 "n") (:triple "recording" 2 "n") (:triple "transcription" 5 "n")))))

(every Record has 
  (result ((a Recording)))
  (text-nominalization ("recording")))

;;; ----------

(Recording has 
  (description ("A kind of Message created by a Sensor as the result of a Record event."))
  (superclasses (Message))
  (wn20-synset ((:set (:triple "recording" 1 "n")))))

(every Recording has 
  (result-of ((a Record))))

;;; ----------

(reference-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Cardinal))
  (range (Thing))
  (inverse (reference-class-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(reference-class-of has 
  (inverse (reference-class))
  (range (Cardinal))
  (domain (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Reflexive-Cliche has 
  (subclasses (Locomotion
               Go-Through
               Exit
               Enter))
  (superclasses (Cliche))
  (test-case ('((*John has (instance-of (Living-Entity))) (*RC has (instance-of (Reflexive-Cliche)) (agent (*John))) ((the agent of *RC) = (the object of *RC))))))

(every Reflexive-Cliche has-definition 
  (instance-of (Event))
  (agent ((the object of Self)))
  (object ((the agent of Self))))

(every Reflexive-Cliche has 
  (agent ((the object of Self)))
  (object ((the agent of Self)))
  (text-definition-sentence (()))
  (text-definition-sentence-of (()))
  (text-nominalization (()))
  (text-nominalization-of (()))
  (text-content (()))
  (text-content-of (()))
  (text-existential-there (()))
  (text-existential-there-of (()))
  (text-toward (()))
  (text-toward-of (()))
  (text-subj (()))
  (text-subj-of (()))
  (text-subj-phrase (()))
  (text-subj-phrase-of (()))
  (text-slot (()))
  (text-slot-of (()))
  (text-sentence (()))
  (text-sentence-of (()))
  (text-premodslots (()))
  (text-premodslots-of (()))
  (text-premods (()))
  (text-premods-of (()))
  (text-postmodslots (()))
  (text-postmodslots-of (()))
  (text-postmods (()))
  (text-postmods-of (()))
  (text-phrase (()))
  (text-phrase-of (()))
  (text-passive-verbseq (()))
  (text-passive-verbseq-of (()))
  (text-passive-verbseq-sg (()))
  (text-passive-verbseq-sg-of (()))
  (text-passive-verbseq-pl (()))
  (text-passive-verbseq-pl-of (()))
  (text-passive-sentence (()))
  (text-passive-sentence-of (()))
  (text-passive-phrase (()))
  (text-passive-phrase-of (()))
  (text-particle (()))
  (text-particle-of (()))
  (text-number (()))
  (text-number-of (()))
  (text-nom-sentence (()))
  (text-nom-sentence-of (()))
  (text-indef-head (()))
  (text-indef-head-of (()))
  (text-indef-determiner (()))
  (text-indef-determiner-of (()))
  (text-head (()))
  (text-head-of (()))
  (text-gen (()))
  (text-gen-of (()))
  (text-dobj (()))
  (text-dobj-of (()))
  (text-dobj-phrase (()))
  (text-dobj-phrase-of (()))
  (text-description (()))
  (text-description-of (()))
  (text-def-head (()))
  (text-def-head-of (()))
  (text-def-determiner (()))
  (text-def-determiner-of (()))
  (text-base-phrase (()))
  (text-base-phrase-of (()))
  (text-arguments (()))
  (text-arguments-of (()))
  (text-argslots (()))
  (text-argslots-of (()))
  (text-active-verbseq (()))
  (text-active-verbseq-of (()))
  (text-active-verbseq-sg (()))
  (text-active-verbseq-sg-of (()))
  (text-active-verbseq-pl (()))
  (text-active-verbseq-pl-of (()))
  (text-active-sentence (()))
  (text-active-sentence-of (()))
  (text-active-phrase (()))
  (text-active-phrase-of (()))
  (text-subevent-of (()))
  (text-subevent (()))
  (slot-gloss (()))
  (slot-gloss-of (()))
  (text-site (()))
  (text-site-of (()))
  (text-resulting-state (()))
  (text-resulting-state-of (()))
  (text-result (()))
  (text-result-of (()))
  (text-recipient (()))
  (text-recipient-of (()))
  (text-raw-material (()))
  (text-raw-material-of (()))
  (text-is-possessed-by (()))
  (text-possesses (()))
  (text-path (()))
  (text-path-of (()))
  (text-origin (()))
  (text-origin-of (()))
  (text-object (()))
  (text-object-of (()))
  (text-material (()))
  (text-material-of (()))
  (text-is-west-of (()))
  (text-is-east-of (()))
  (text-is-southwest-of (()))
  (text-is-northeast-of (()))
  (text-is-over (()))
  (text-is-under (()))
  (text-is-outside (()))
  (text-is-outside-of (()))
  (text-is-oriented-toward (()))
  (text-is-oriented-toward-of (()))
  (text-is-opposite (()))
  (text-is-on (()))
  (text-has-on-it (()))
  (text-is-northwest-of (()))
  (text-is-southeast-of (()))
  (text-is-north-of (()))
  (text-is-south-of (()))
  (text-is-near (()))
  (text-is-near-of (()))
  (text-is-inside (()))
  (text-encloses (()))
  (text-is-facing (()))
  (text-is-faced-by (()))
  (text-is-between (()))
  (text-is-between-of (()))
  (text-is-beside (()))
  (text-is-behind (()))
  (text-is-in-front-of (()))
  (text-is-at (()))
  (text-is-at-of (()))
  (text-is-along (()))
  (text-is-along-of (()))
  (text-is-above (()))
  (text-is-below (()))
  (text-instrument (()))
  (text-instrument-of (()))
  (text-is-part-of (()))
  (text-has-part (()))
  (text-donor (()))
  (text-donor-of (()))
  (text-destination (()))
  (text-destination-of (()))
  (text-causes (()))
  (text-caused-by (()))
  (text-beneficiary (()))
  (text-beneficiary-of (()))
  (text-base (()))
  (text-base-of (()))
  (text-away-from (()))
  (text-away-from-of (()))
  (text-agent (()))
  (text-agent-of (()))
  (text-abuts (()))
  (text-abuts-of (())))

;;; ----------

(Region has 
  (superclasses (Place))
  (description ("a Place with extent (not a point)"))
  (wn20-synset ((:set (:triple "region" 1 "n") (:triple "part" 2 "n") (:triple "region" 3 "n"))))
  (subclasses (Territory)))

;;; ----------

(related-to has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Thing))
  (inverse (related-to))
  (text-slot (text-related-to))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("is related to")))

;;; ----------

(related-to-of has 
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Release has 
  (defeated-by-class-of (Be-Confined))
  (superclasses (Unobstruct))
  (required-slot (object
                  base))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "object")
                        (:seq base "the enclosure")
                        (:seq agent "releaser")
                        (:seq instrument "instrument")))
  (wn16-synset ((:set (:triple "release" 3 "v") (:triple "turn" 13 "v"))))
  (wn20-synset ((:set (:triple "release" 3 "v") (:triple "turn" 14 "v")))))

(every Release has 
  (base ((a Tangible-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the base of It) = (the base of Self)) and ((the classes of It) = Be-Confined)))))
  (object ((a Tangible-Entity with (is-inside ((the base of Self))))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Confined with (base ((the base of Self)))) [Release-pcs-1]))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Release-del-1]) (:triple It base (the base of Self) [Release-del-2])))))
  (text-active-verbseq-sg ("releases"))
  (text-active-verbseq-pl ("release"))
  (text-passive-verbseq-sg ("gets released"))
  (text-passive-verbseq-pl ("get released"))
  (text-base ((if (has-value (the base of Self)) then ("from"))))
  (preparatory-event ((:default (a Confine with (base ((the base of Self))) (object ((the object of Self)))))))
  (text-nominalization ("release")))

;;; ----------

(Release-Resource has 
  (defeated-by-class-of (Be-Available))
  (caused-by-class-of (Be-Unavailable))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 base))
  (cmap-correspondence ((:seq object "the resource made available")
                        (:seq base "the thing the resource is made available to")
                        (:seq agent "the agent"))))

(every Release-Resource has 
  (object ((a Resource)))
  (base ((must-be-a Thing)))
  (agent ((must-be-a Entity)))
  (resulting-state ((a Be-Available)))
  (add-list ((if (has-value (the base of Self)) then (:triple (the resulting-state of Self) base (the base of Self) [Release-Resource-add-1]))
             (:triple (the resulting-state of Self) object (the object of Self) [Release-Resource-add-2])
             (if (has-value (the agent of Self)) then (:triple (the resulting-state of Self) agent (the agent of Self) [Release-Resource-add-3]))))
  (text-active-verbseq-sg ("releases"))
  (text-active-verbseq-pl ("release"))
  (text-passive-verbseq-sg ("gets released"))
  (text-passive-verbseq-pl ("get released"))
  (text-base ((if (has-value (the base of Self)) then ("from"))))
  (text-argslots ((:seq base instrument)))
  (preparatory-event ((:default (a Allocate-Resource with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
  (text-nominalization ("release")))

;;; ----------

(Relinquish has 
  (subclasses (Supply
               Sell
               Give))
  (superclasses (Lose))
  (required-slot (agent
                  donor
                  object))
  (primary-slot (recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing Relinquished")
                        (:seq agent "the Relinquisher")
                        (:seq donor "the original possessor")
                        (:seq recipient "the final possessor")
                        (:seq instrument "the thing used to Relinquish")))
  (test-case ('((*Gold has (instance-of (Tangible-Entity))) (*Bill has (instance-of (Tangible-Entity)) (possesses (*Gold))) (*Relinquish has (instance-of (Relinquish)) (agent (*Bill)) (object (*Gold))) (do-and-next *Relinquish) (the text-gen of (thelast Relinquish)) (((the agent of *Relinquish) = *Bill) and ((the donor of *Relinquish) = *Bill)) ((the possesses of *Bill) = nil) ((the is-possessed-by of *Gold) /= *Bill))))
  (wn16-synset ((:set (:triple "relinquish" 1 "v") (:triple "cede" 2 "v") (:triple "deliver" 11 "v") (:triple "free" 9 "v") (:triple "give_up" 6 "v") (:triple "give_up" 8 "v") (:triple "release" 8 "v") (:triple "surrender" 2 "v"))))
  (wn20-synset ((:set (:triple "relinquish" 1 "v") (:triple "cede" 2 "v") (:triple "deliver" 10 "v") (:triple "free" 9 "v") (:triple "give_up" 6 "v") (:triple "give_up" 8 "v") (:triple "release" 8 "v") (:triple "surrender" 2 "v")))))

(every Relinquish has 
  (agent (((a Tangible-Entity) & (the donor of Self))))
  (donor ((exactly 1 Tangible-Entity)
          (the agent of Self)))
  (text-active-verbseq-sg ("relinquishes"))
  (text-active-verbseq-pl ("relinquish"))
  (text-passive-verbseq-sg ("is relinquished"))
  (text-passive-verbseq-pl ("are relinquished"))
  (text-nominalization ("relinquishing")))

;;; ----------

(Remove has 
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq agent "the remover")
                        (:seq object "the part removed.")
                        (:seq base "the thing from which the part is being removed")
                        (:seq instrument "instrument of the remove")))
  (wn16-synset ((:set (:triple "remove" 1 "v"))))
  (wn20-synset ((:set (:triple "remove" 1 "v")))))

(every Remove has 
  (object ((a Tangible-Entity)))
  (base ((a Tangible-Entity)))
  (soft-pcs-list ((:triple (the base of Self) object-of (mustnt-be-a Be-Inaccessible))))
  (pcs-list ((forall (the object of Self) (:triple It is-part-of (the base of Self) [Remove-pcs-1]))))
  (del-list ((forall (the object of Self) (:triple It is-part-of (the base of Self) [Remove-del-1]))))
  (text-active-verbseq-sg ("removes"))
  (text-active-verbseq-pl ("remove"))
  (text-passive-verbseq-sg ("gets removed"))
  (text-passive-verbseq-pl ("get removed"))
  (text-base ("from"))
  (text-nominalization ("removal")))

;;; ----------

(Renewable-Resource has 
  (superclasses (Resource))
  (wn20-synset ((:set (:triple "renewable_resource" 1 "n"))))
  (member-of (_Partition3)))

(every Renewable-Resource has-definition 
  (instance-of (Resource))
  (base-of ((a Replenish))))

;;; ----------

(Repair has 
  (defeated-by-class-of (Be-Broken))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot ((agent instrument by-means-of)))
  (cmap-correspondence ((:seq object "the thing being repaired")
                        (:seq agent "the one doing the repair")
                        (:seq instrument "the instrument of the repair")
                        (:seq by-means-of "how the repair is achieved")))
  (test-case ('((*Vase has (instance-of (Physical-Object))) (a Break with (object (*Vase))) (do-and-next (thelast Break)) (the text-gen of (thelast Break)) (has-value (the Be-Broken object-of of *Vase)) (a Repair with (object (*Vase))) (do-and-next (thelast Repair)) (the text-gen of (thelast Repair)) (not (has-value (the Be-Broken object-of of *Vase))))))
  (wn16-synset ((:set (:triple "repair" 1 "v") (:triple "bushel" 1 "v") (:triple "doctor" 3 "v") (:triple "furbish_up" 1 "v") (:triple "mend" 1 "v") (:triple "restore" 4 "v") (:triple "touch_on" 3 "v"))))
  (wn20-synset ((:set (:triple "repair" 1 "v") (:triple "bushel" 1 "v") (:triple "doctor" 3 "v") (:triple "furbish_up" 1 "v") (:triple "mend" 1 "v") (:triple "restore" 4 "v") (:triple "touch_on" 3 "v")))))

(every Repair has 
  (object ((a Tangible-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Broken))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Broken) [Repair-pcs-1]))
             (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Ruined with (object ((the object of Self)))) [Repair-pcs-2]))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Repair-del-1]))))
  (text-active-verbseq-sg ("repairs"))
  (text-active-verbseq-pl ("repair"))
  (text-passive-verbseq-sg ("gets repaired"))
  (text-passive-verbseq-pl ("get repaired"))
  (preparatory-event ((:default (a Break with (object ((the object of Self)))))))
  (text-nominalization ("repair")))

;;; ----------

(Replace has 
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot ((instrument agent)))
  (test-case ('((*blownfuse has (instance-of (Physical-Object))) (*newfuse has (instance-of (Physical-Object))) (*socket has (instance-of (Physical-Object))) (a Replace with (object (*blownfuse *newfuse)) (base (*socket))) (do-script (thelast Replace)) ((the resulting-state of (the Attach subevent of (thelast Replace))) isa Be-Attached-To) (the text-gen of (thelast Replace)) (forall (the subevent of (thelast Replace)) (the text-gen of It)) ((the object of (thelast Be-Attached-To)) includes *newfuse) ((the object of (thelast Be-Attached-To)) includes *socket))))
  (wn16-synset ((:set (:triple "replace" 1 "v") (:triple "replace" 4 "v") (:triple "substitute" 1 "v"))))
  (wn20-synset ((:set (:triple "replace" 1 "v") (:triple "replace" 3 "v") (:triple "substitute" 1 "v")))))

(every Replace has 
  (agent ((must-be-a Tangible-Entity)))
  (object ((a Tangible-Entity called "old entity")
           (a Tangible-Entity called "new entity")))
  (base ((a Tangible-Entity)))
  (first-subevent (((the Detach subevent of Self) called "RemoveOld")))
  (subevent ((a Detach called "RemoveOld" with (agent ((the agent of Self))) (object (((the object of Self) called "old entity"))) (base ((the base of Self))) (instrument ((the instrument of Self))) (next-event (((the Attach subevent of Self) called "AttachNew"))))
             (a Attach called "AttachNew" with (agent ((the agent of Self))) (object (((the object of Self) called "new entity"))) (base ((the base of Self))) (instrument ((the instrument of Self))))))
  (text-active-verbseq-sg ("replaces"))
  (text-active-verbseq-pl ("replace"))
  (text-passive-verbseq-sg ("gets replaced"))
  (text-passive-verbseq-pl ("gets replaced"))
  (text-base ((if (has-value (the base of Self)) then ("in"))))
  (text-instrument ((if (has-value (the instrument of Self)) then ("using"))))
  (text-active-sentence ((:seq (the text-subj-phrase of Self) (the text-active-phrase of Self) (the text-phrase of ((the object of Self) called "old entity")) ("with") (the text-phrase of ((the object of Self) called "new entity")) (the text-arguments of Self))))
  (text-passive-sentence ((:seq (the text-phrase of ((the object of Self) called "old entity")) (the text-passive-phrase of Self) ("with") (the text-phrase of ((the object of Self) called "new entity")) (the text-arguments of Self))))
  (text-nominalization ("replacement")))

;;; ----------

(Replenish has 
  (superclasses (Increase))
  (test-case ('((*Gas has (instance-of (Entity))) (*Replenish has (instance-of (Replenish)) (object (*Gas)) (property-slot (volume))) ((the played-by of (the base of *Replenish)) = *Gas) ((the base of (a Replenish)) isa Renewable-Resource) (do-and-next *Replenish) ((the greater-than of (the volume of *Gas)) includes ((in-situation (the1 prev-situation of (curr-situation)) (the volume of *Gas)))))))
  (wn20-synset ((:set (:triple "replenish" 1 "v") (:triple "refill" 1 "v") (:triple "fill_again" 1 "v")))))

(every Replenish has 
  (base ((mustnt-be-a Nonrenewable-Resource)
         (a Resource with (played-by ((the object of Self))))))
  (object ((a Entity with (plays ((a Resource with (base-of (Self))))))))
  (text-nominalization ("replenishing")))

;;; ----------

(Reporting has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "coverage" 3 "n") (:triple "reportage" 1 "n") (:triple "news" 4 "n")))))

(every Reporting has 
  (text-nominalization ("reporting")))

;;; ----------

(Request has 
  (superclasses (Information))
  (wn16-synset ((:set (:triple "request" 1 "n") (:triple "request" 2 "n"))))
  (wn20-synset ((:set (:triple "request" 1 "n") (:triple "request" 2 "n")))))

;;; ----------

(required-slot has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(required-slot-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Research has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "research" 1 "n") (:triple "investigation" 2 "n") (:triple "investigating" 1 "n")))))

(every Research has 
  (text-nominalization ("research")))

;;; ----------

(Resource has 
  (subclasses (Renewable-Resource
               Nonrenewable-Resource))
  (superclasses (Role)))

(every Resource has 
  (in-event ((must-be-a Event))))

;;; ----------

(Restrain has 
  (caused-by-class-of (Be-Restrained))
  (superclasses (Obstruct))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "restrainee")
                        (:seq agent "restrainer")))
  (test-case ('((*mugger has (instance-of (Physical-Object))) (a Restrain with (object (*mugger))) (do-and-next (thelast Restrain)) (the text-gen of (thelast Restrain)) (forall (the resulting-state of (thelast Restrain)) (the text-gen of It)) (has-value (the Be-Restrained object-of of *mugger)) (a Move with (object (*mugger))) (not (try-do (thelast Move))) (the text-gen of (thelast Move)))))
  (wn16-synset ((:set (:triple "restrain" 1 "v") (:triple "restrain" 3 "v") (:triple "confine" 6 "v") (:triple "hold" 4 "v") (:triple "hold_back" 2 "v") (:triple "keep" 14 "v") (:triple "keep_back" 1 "v"))))
  (wn20-synset ((:set (:triple "restrain" 1 "v") (:triple "restrain" 3 "v") (:triple "confine" 6 "v") (:triple "hold" 4 "v") (:triple "hold_back" 2 "v") (:triple "keep" 14 "v") (:triple "keep_back" 1 "v")))))

(every Restrain has 
  (object ((a Tangible-Entity)))
  (resulting-state ((a Be-Restrained)))
  (pcs-list ((forall (the object of Self) ((:triple It object-of (mustnt-be-a Be-Restrained with (object ((the object of Self))) (agent ((the agent of Self)))))))))
  (text-active-verbseq-sg ("restrains"))
  (text-active-verbseq-pl ("restrain"))
  (text-passive-verbseq-sg ("gets restrained"))
  (text-passive-verbseq-pl ("get restrained"))
  (preparatory-event ((:default (a Unrestrain with (object ((the object of Self)))))))
  (text-nominalization ("restraining")))

;;; ----------

(result has 
  (primary-slot-of (Breach
                    Duplicate))
  (required-slot-of (Copy
                     Create
                     Embody
                     Print))
  (instance-of (Participant-Relation))
  (domain (Event))
  (range (Entity))
  (inverse (result-of))
  (text-slot (text-result))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("produces"))
  (wn20-synset ((:set (:triple "resultant_role" 1 "n") (:triple "result" 4 "n") (:triple "consequent" 1 "a") (:triple "ensuant" 1 "a") (:triple "resultant" 1 "a") (:triple "resulting" 1 "a") (:triple "sequent" 2 "a") (:triple "product" 2 "n") (:triple "production" 4 "n") (:triple "product" 4 "n")))))

;;; ----------

(result-of has 
  (inverse (result))
  (range (Event))
  (domain (Entity))
  (instance-of (Participant-Relation))
  (text-slot (text-result-of))
  (text-gloss ("is produced by")))

;;; ----------

(resulting-state has 
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (State))
  (inverse (resulting-state-of))
  (text-slot (text-resulting-state))
  (fluent-status (*Inertial-Fluent))
  (cardinality (1-to-1))
  (text-gloss ("results in")))

;;; ----------

(resulting-state-of has 
  (inverse (resulting-state))
  (range (Event))
  (domain (State))
  (instance-of (Causal-Relation))
  (text-slot (text-resulting-state-of))
  (text-gloss ("results from")))

;;; ----------

(Role has 
  (subclasses (Vehicle
               Template
               Teacher
               Target
               Signal
               Seat
               Resource
               Recipient-Role
               Question
               Pupil
               Product
               Medium
               Instrument-Role
               Instruction
               Food
               Filter
               Donor-Role
               Connector
               Conduit
               Carrier
               Barrier
               Agent-Role))
  (superclasses (Thing))
  (range-of (capability
             in-event-of
             in-organization-of
             plays
             purpose
             time-of-existence-of))
  (domain-of (capability-of
              in-event
              in-organization
              played-by
              purpose-of
              time-of-existence)))

(every Role has 
  (identifier ((((forall (the called of Self) (a Text-Field with (information-content (It))))) && ((forall (the uniquely-called of Self) (a Text-Field with (information-content (It))))))))
  (name ((if (anonymous-instancep Self) then (oneof ?c1 in (the classes of Self) where (not (oneof ?c2 in (the classes of Self) where ((?c1 /= ?c2) and (?c1 subsumes ?c2))))))))
  (text-gen ((make-phrase (the text-phrase of Self))))
  (text-description ((the text-sentence of Self)))
  (text-head ((if (anonymous-instancep Self) then (:seq Self (if (has-value (the uniquely-called of Self)) then (:seq "(called" (the uniquely-called of Self) ")") else (if (has-value (the called of Self)) then (:seq "(called" (the called of Self) ")")))) else (the name of Self))))
  (text-def-determiner ((if (anonymous-instancep Self) then (if (has-value (the is-possessed-by of Self)) then (:seq (the text-def-head of (the is-possessed-by of Self)) "'s") else (:seq "the")))))
  (text-indef-determiner ((if (anonymous-instancep Self) then (if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (:seq (the text-premods of Self) (the text-head of Self)))) 0))))) then (:seq "an") else (:seq "a")))))
  (text-def-head ((:seq (the text-def-determiner of Self) (the text-head of Self))))
  (text-indef-head ((:seq (the text-indef-determiner of Self) (the text-head of Self))))
  (text-is-above ("above"))
  (text-is-along ("along"))
  (text-is-between ("between"))
  (text-is-behind ("behind"))
  (text-is-opposite ("opposite"))
  (text-is-outside ("outside"))
  (text-is-over ("over"))
  (text-is-beside ("beside"))
  (text-is-near ("near"))
  (text-is-at ("at"))
  (text-is-on ("on"))
  (text-site-of ("site of"))
  (text-abuts ("abutting"))
  (text-is-inside ("inside"))
  (text-is-part-of ("part of"))
  (text-has-part ("made up of"))
  (text-material ("made of"))
  (text-content ("containing"))
  (text-result-of ("result of"))
  (text-raw-material-of ("raw material of"))
  (text-agent-of ("agent of"))
  (text-is-north-of ("north of"))
  (text-is-northeast-of ("northeast of"))
  (text-is-east-of ("east of"))
  (text-is-southeast-of ("southeast of"))
  (text-is-south-of ("south of"))
  (text-is-southwest-of ("southwest of"))
  (text-is-west-of ("west of"))
  (text-is-northwest-of ("northwest of"))
  (text-premodslots ((:seq area length height thickness volume size capacity depth mass density temperature wetness brightness breakability consistency shape smell taste texture trait age color physical-state sex)))
  (text-premods ((if (has-value (the text-premodslots of Self)) then (forall-seq (the text-premodslots of Self) where (has-value (the It of Self)) (if (It isa Property) then (if (has-value (the value of (the It of Self))) then (the text-phrase of (the It of Self))) else (the text-head of (the It of Self)))))))
  (text-postmodslots ((:seq material content is-above is-along is-between is-behind is-opposite is-outside is-over is-beside is-at is-on site-of abuts is-inside is-north-of is-northeast-of is-east-of is-southeast-of is-south-of is-southwest-of is-west-of is-northwest-of)))
  (text-postmods ((if (has-value (the text-postmodslots of Self)) then (forall-seq (the text-postmodslots of Self) where (has-value (the It of Self)) (:seq (the (the text-slot of It) of Self) (andify (the text-def-head of (the It of Self))))))))
  (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
  (text-indef-phrase ((:seq (the text-indef-determiner of Self) (the text-premods of Self) (the text-head of Self))))
  (text-sentence ((make-sentence ((if (has-value (the elements of (the text-postmods of Self))) then (:seq (the text-base-phrase of Self) "is" (andify (the elements of (the text-postmods of Self)))) else (if (has-value (the elements of (the text-premods of Self))) then (:seq (the text-def-head of Self) "is" (andify (the elements of (the text-premods of Self)))) else (if (has-value (the is-possessed-by of Self)) then (:seq (the text-gen of (the is-possessed-by of Self)) "has" (the text-indef-head of Self)) else (the text-existential-there of Self))))))))
  (text-existential-there ((make-sentence (:seq "there is" (if (anonymous-instancep Self) then (the text-indef-head of Self) else (:seq (the text-indef-head of (an instance of (oneof (the classes of Self) where t))) "called" (the text-head of Self)))))))
  (text-definition-sentence ((make-sentence (:seq (the text-indef-head of Self) "is" ((the elements of (andify (forall (the superclasses of (the classes of Self)) (the text-indef-head of (an instance of It))))) or "something") (if ((has-value (the elements of (the text-postmods of Self))) and (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) then ((?sup == (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) and (:seq "that is" (andify (allof (the elements of (the text-postmods of Self)) where (not ((the elements of (the text-postmods of (an instance of ?sup))) includes It)))))))))))
  (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))

;;; ----------

(Roof has 
  (superclasses (Architectural-Structure))
  (description ("an architectural structure covering another architectural structure"))
  (test-case ('((*TheSnow has (instance-of (Substance))) (*TheBench has (instance-of (Artifact))) (*TheGazebo has (instance-of (Architectural-Structure)) (has-part ((a Roof))) (plays ((a Container with (content (*TheBench)))))) (*TheWinterSky has (instance-of (Place)) (is-above ((the Roof has-part of *TheGazebo)))) ((the is-above of (the Roof has-part of *TheGazebo)) is-superset-of (:set *TheGazebo *TheBench)) (a Fall with (object (*TheSnow)) (origin (*TheWinterSky)) (destination (*TheBench))) (not (try-do (thelast Fall))))))
  (wn20-synset ((:set (:triple "roof" 1 "n")))))

(every Roof has 
  (is-part-of ((a Architectural-Structure)))
  (plays ((a Cover)))
  (is-above ((((the is-part-of of Self)) && ((if (oneof (the plays of (the Architectural-Structure is-part-of of Self)) where (It isa Container)) then (the content of (the Container plays of (the Architectural-Structure is-part-of of Self)))))))))

;;; ----------

(Room has 
  (subclasses (Hallway
               Elevator
               Bathroom))
  (superclasses (Architectural-Structure))
  (description ("an architectural structure playing a container within a building"))
  (wn20-synset ((:set (:triple "room" 1 "n")))))

(every Room has 
  (plays ((a Container)))
  (has-part ((a Floor)
             (a Wall)
             (a Ceiling)))
  (is-part-of ((a Building))))

;;; ----------

(rotational-rate has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Rotational-Rate-Value))
  (scalar-constant-class (Rotational-Rate-Constant))
  (cardinal-unit-class (UoM-Rotational-Rate))
  (inverse (rotational-rate-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(Rotational-Rate-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (rotational-rate)))

;;; ----------

(rotational-rate-of has 
  (inverse (rotational-rate))
  (range (Event))
  (domain (Rotational-Rate-Value))
  (instance-of (EventProperty)))

;;; ----------

(Rotational-Rate-Value has 
  (superclasses (Property-Value))
  (range-of (rotational-rate))
  (domain-of (rotational-rate-of)))

;;; ----------

(Rubber has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "rubber" 1 "n") (:triple "india_rubber" 1 "n") (:triple "gum_elastic" 1 "n") (:triple "caoutchouc" 1 "n")))))

;;; ----------

(Ruin has 
  (caused-by-class-of (Be-Ruined))
  (superclasses (Break))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the destroyer")
                        (:seq object "the object ruined")
                        (:seq by-means-of "an event necessary to ruining the object")))
  (test-case ('((*House has (instance-of (Tangible-Entity))) (a Ruin with (object (*House))) (do-and-next (thelast Ruin)) (the text-gen of (thelast Ruin)) (forall (the resulting-state of (thelast Ruin)) (the text-gen of It)) (has-value (the Be-Ruined object-of of *House)) (a Repair with (object (*House))) (not (try-do (thelast Repair))) (the text-gen of (thelast Repair)))))
  (wn16-synset ((:set (:triple "ruin" 1 "v") (:triple "destroy" 2 "v"))))
  (wn20-synset ((:set (:triple "ruin" 1 "v") (:triple "destroy" 2 "v")))))

(every Ruin has 
  (object ((a Tangible-Entity)))
  (agent ((must-be-a Tangible-Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (resulting-state ((a Be-Ruined)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Ruin-add-1])))
  (text-active-verbseq-sg ("ruins"))
  (text-active-verbseq-pl ("ruin"))
  (text-passive-verbseq-sg ("gets ruined"))
  (text-passive-verbseq-pl ("get ruined"))
  (text-nominalization ("ruin")))

;;; ----------

(same-as has 
  (instance-of (PropertyProperty))
  (domain (Property-Value))
  (range (Property-Value))
  (inverse (same-as))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(Scalar has 
  (superclasses (Property-Group))
  (domain-of (scalar-constant
              scalar-value-of))
  (range-of (scalar-constant-of
             scalar-value)))

;;; ----------

(scalar-constant has 
  (instance-of (CLIB-Slot-Group))
  (domain (Scalar))
  (range (Constant))
  (inverse (scalar-constant-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(scalar-constant-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property))
  (range (Constant))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(scalar-constant-class-of has 
  (range (Property))
  (domain (Constant))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(scalar-constant-of has 
  (inverse (scalar-constant))
  (range (Scalar))
  (domain (Constant))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(scalar-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Value))
  (range (Scalar))
  (inverse (scalar-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(scalar-value-of has 
  (inverse (scalar-value))
  (range (Property-Value))
  (domain (Scalar))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Scale has 
  (subclasses (Worth-Scale
               Width-Scale
               Wetness-Scale
               Volume-Scale
               Velocity-Scale
               Thickness-Scale
               Temperature-Scale
               Slope-Scale
               Size-Scale
               Rate-Scale
               Radius-Scale
               Priority-Scale
               Pressure-Scale
               Perimeter-Scale
               Mass-Scale
               Length-Scale
               Intensity-Scale
               Integrity-Scale
               Importance-Scale
               Height-Scale
               Frequency-Scale
               Duration-Scale
               Distance-Scale
               Direction-Scale
               Diameter-Scale
               Depth-Scale
               Density-Scale
               Circumference-Scale
               Capacity-Scale
               Brightness-Scale
               Breakability-Scale
               Area-Scale
               Age-Scale
               Acceleration-Scale))
  (superclasses (Property-Group
                 Aggregate))
  (range-of (scale-class))
  (domain-of (scale-class-of)))

;;; ----------

(scale-class has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property))
  (range (Scale))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(scale-class-of has 
  (range (Property))
  (domain (Scale))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Seat has 
  (superclasses (Role))
  (wn20-synset ((:set (:triple "seat" 3 "n") (:triple "seat" 4 "n")))))

;;; ----------

(secondary-slot has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(secondary-slot-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(See has 
  (superclasses (Sense))
  (wn20-synset ((:set (:triple "see" 1 "v")))))

(every See has 
  (object ((a Light)
           (must-be-a Light)))
  (text-nominalization ("seeing")))

;;; ----------

(Select has 
  (superclasses (Action))
  (description ("choose one item from a list"))
  (wn20-synset ((:set (:triple "choose" 1 "v") (:triple "take" 10 "v") (:triple "select" 1 "v") (:triple "pick_out" 1 "v")))))

(every Select has 
  (base ((a Entity)))
  (object ((oneof (the base of Self) where t)))
  (text-nominalization ("selection")))

;;; ----------

(Sell has 
  (superclasses (Relinquish))
  (test-case ('((new-situation) (*Boat has (instance-of (Tangible-Entity))) (*Jack has (instance-of (Tangible-Entity)) (possesses (*Boat))) (*2000-Dollars has (instance-of (Money)) (worth ((a Worth-Value with (value ((:pair 2000 *usdollar))))))) (*Jill has (instance-of (Tangible-Entity)) (possesses (*2000-Dollars))) (a Sell with (agent (*Jack)) (object (*Boat)) (recipient (*Jill)) (instrument (*2000-Dollars))) (do-script (thelast Sell)) (the text-gen of (thelast Sell)) ((the possesses of *Jill) = *Boat) ((the is-possessed-by of *Boat) = *Jill) ((the agent of (thelast Sell)) = (the donor of (thelast Sell))) ((the possesses of *Jack) = *2000-Dollars) ((the is-possessed-by of *2000-Dollars) = *Jack))))
  (wn20-synset ((:set (:triple "sell" 1 "v")))))

(every Sell has 
  (recipient ((a Tangible-Entity)))
  (instrument ((a Money)))
  (first-subevent ((a Transfer with (object ((the instrument of Self))) (agent ((the recipient of Self))) (donor ((the recipient of Self))) (recipient ((the agent of Self))))))
  (subevent ((the first-subevent of Self)))
  (text-active-verbseq-sg ("sells"))
  (text-active-verbseq-pl ("sell"))
  (text-instrument ("for"))
  (text-nominalization ("sale")))

;;; ----------

(Selling has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "merchandising" 1 "n") (:triple "marketing" 1 "n") (:triple "commerce" 1 "n")))))

(every Selling has 
  (text-nominalization ("selling")))

;;; ----------

(Send has 
  (superclasses (Action))
  (required-slot (recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument
                 origin
                 path
                 destination
                 subevent))
  (cmap-correspondence ((:seq recipient "recipient")
                        (:seq agent "sender")
                        (:seq donor "donor")
                        (:seq object "the thing sent")
                        (:seq subevent "subevent")
                        (:seq instrument "instrument")
                        (:seq origin "moved from")
                        (:seq path "moved through")
                        (:seq destination "moved to")))
  (test-case ('((*Fresno has (instance-of (Place))) (*Detroit has (instance-of (Place))) (*Blue-Package has (instance-of (Physical-Object)) (location (*Fresno))) (*Victor has (instance-of (Tangible-Entity)) (possesses (*Blue-Package)) (location (*Fresno))) (*Maurice has (instance-of (Tangible-Entity)) (location (*Detroit))) (*Send has (instance-of (Send)) (agent (*Victor)) (recipient (*Maurice)) (object (*Blue-Package))) (do-script *Send) (the text-gen of (thelast Send)) (forall (the subevent of (thelast Send)) (the text-gen of It)) ((the possesses of *Maurice) = *Blue-Package) ((the location of *Maurice) = *Detroit) ((the possesses of *Victor) /= *Blue-Package) ((the location of *Victor) = *Fresno) ((the location of *Blue-Package) = *Detroit) ((the location of *Blue-Package) /= *Fresno) (new-situation) (*virus has (instance-of (Physical-Object))) (*CDC has (instance-of (Spatial-Entity)) (location (*Atlanta))) (*Atlanta has (instance-of (Place))) (*Bossie has (instance-of (Living-Entity)) (possesses (*virus))) (*river has (instance-of (Tangible-Entity))) (a Send with (object (*virus)) (path (*river)) (donor (*Bossie)) (recipient (*CDC))) (do-script (thelast Send)) ((the is-possessed-by of *virus) = *CDC) ((the is-possessed-by of *virus) /= *Bossie) ((the location of *virus) = *Atlanta))))
  (wn16-synset ((:set (:triple "send" 2 "v") (:triple "send" 3 "v") (:triple "mail" 2 "v") (:triple "post" 9 "v") (:triple "send_out" 1 "v"))))
  (wn20-synset ((:set (:triple "send" 2 "v") (:triple "send" 3 "v") (:triple "mail" 2 "v") (:triple "post" 11 "v") (:triple "send_out" 1 "v")))))

(every Send has 
  (recipient ((a Tangible-Entity)))
  (agent ((a Entity)))
  (donor ((the agent of Self)))
  (object ((a Tangible-Entity)))
  (origin ((the donor of Self)))
  (path ((must-be-a Spatial-Entity)))
  (destination ((the recipient of Self)))
  (first-subevent ((the Relinquish subevent of Self)))
  (subevent ((a Relinquish with (agent ((the agent of Self))) (object ((the object of Self))) (next-event ((the Move subevent of Self))))
             (a Move with (object ((the object of Self))) (origin ((the origin of Self))) (path ((the path of Self))) (destination ((the destination of Self))) (next-event ((the Deliver subevent of Self))))
             (a Deliver with (object ((the object of Self))) (donor ((the donor of Self))) (recipient ((the recipient of Self))))))
  (text-active-verbseq-sg ("sends"))
  (text-active-verbseq-pl ("send"))
  (text-passive-verbseq-sg ("gets sent"))
  (text-passive-verbseq-pl ("get sent"))
  (dcs-list ((if (has-value (the path of Self)) then ((forall (the object of Self) (:triple It location (if ((the path of Self) isa Place) then (the path of Self) else (the location of (the path of Self)))))))))
  (preparatory-event ((:default (forall (the object of Self) (a Move with (object (It)) (destination ((the origin of Self))))))))
  (text-nominalization ("sending")))

;;; ----------

(Sense has 
  (subclasses (See
               Read
               Hear))
  (superclasses (Create))
  (required-slot (experiencer
                  object))
  (test-case ('((*Sound-Wave-1 has (instance-of (Entity))) (*Ted has (instance-of (Tangible-Entity))) (*Sense has (instance-of (Sense)) (experiencer (*Ted)) (object (*Sound-Wave-1))) (do-and-next *Sense) (the text-gen of (thelast Sense)))))
  (wn16-synset ((:set (:triple "sense" 1 "v") (:triple "feel" 1 "v"))))
  (wn20-synset ((:set (:triple "sense" 1 "v") (:triple "feel" 1 "v")))))

(every Sense has 
  (object ((a Tangible-Entity)))
  (agent ((constraint (TheValue & (the experiencer of Self)))))
  (experiencer ((a Tangible-Entity)))
  (result ((a Message)))
  (text-active-verbseq-sg ("Senses"))
  (text-active-verbseq-pl ("Sense"))
  (text-argslots ((:seq experiencer object)))
  (text-nominalization ("sensing")))

;;; ----------

(sentience has 
  (instance-of (EntityProperty))
  (domain (Living-Entity))
  (range (Sentience-Value))
  (categorical-constant-class (Sentience-Constant))
  (inverse (sentience-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "sentience" 3 "n")))))

;;; ----------

(Sentience-Constant has 
  (superclasses (Constant))
  (instances (*sentient
              *not-sentient))
  (categorical-constant-class-of (sentience)))

;;; ----------

(sentience-of has 
  (inverse (sentience))
  (range (Living-Entity))
  (domain (Sentience-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Sentience-Value has 
  (superclasses (Property-Value))
  (range-of (sentience))
  (domain-of (sentience-of)))

;;; ----------

(Sequence has 
  (subclasses (Information-Sequence))
  (superclasses (Entity))
  (test-case ('((*e1 has (instance-of (Entity)) (next-element (*e2))) (*e2 has (instance-of (Entity)) (next-element (*e3))) (*e3 has (instance-of (Entity))) (*e4 has (instance-of (Entity)) (next-element (*e5))) (*e5 has (instance-of (Entity))) (*e6 has (instance-of (Entity)) (next-element (*e7))) (*e7 has (instance-of (Entity)) (next-element (*e8))) (*e8 has (instance-of (Entity)) (next-element (*e9))) (*e9 has (instance-of (Entity))) (*S1 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*e1)) (element (*e1 *e2 *e3))) (*S2 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*e4)) (element (*e4 *e5))) (*S3 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*e6)) (element (*e6 *e7 *e8 *e9))) (*S4 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*S1)) (element (*S1 *S2 *S3))) ((the element of *S1) = (:set *e1 *e2 *e3)) ((the element of *S4) = (:set *S1 *S2 *S3)))))
  (wn20-synset ((:set (:triple "series" 1 "n")))))

(every Sequence has 
  (first-element ((<> Self)
                  (oneof (the element-type of Self) where ((oneof2 (the classes of It) where (TheValue isa It2)))))))

;;; ----------

(Service has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "service" 1 "n")))))

(every Service has 
  (donor ((a Entity)))
  (recipient ((a Entity)))
  (object ((must-be-a Entity)))
  (instrument ((must-be-a Entity)))
  (text-nominalization ("service")))

;;; ----------

(Session has 
  (superclasses (Interaction))
  (wn20-synset ((:set (:triple "session" 1 "n") (:triple "session" 3 "n")))))

(every Session has 
  (text-nominalization ("session")))

;;; ----------

(sex has 
  (instance-of (EntityProperty))
  (domain (Living-Entity))
  (range (Sex-Value))
  (categorical-constant-class (Sex-Constant))
  (inverse (sex-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "sex" 2 "n") (:triple "sex" 4 "n")))))

;;; ----------

(Sex-Constant has 
  (superclasses (Constant))
  (instances (*female
              *male))
  (categorical-constant-class-of (sex)))

;;; ----------

(sex-of has 
  (inverse (sex))
  (range (Living-Entity))
  (domain (Sex-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Sex-Value has 
  (superclasses (Property-Value))
  (range-of (sex))
  (domain-of (sex-of)))

;;; ----------

(shape has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Shape-Value))
  (categorical-constant-class (Shape-Constant))
  (inverse (shape-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "shape" 1 "n") (:triple "form" 4 "n") (:triple "configuration" 2 "n") (:triple "contour" 2 "n") (:triple "conformation" 2 "n")))))

;;; ----------

(Shape-Constant has 
  (superclasses (Constant))
  (instances (*circle
              *square
              *triangle
              *rectangle
              *oval
              *polygon
              *parallelogram
              *hollow-volume))
  (categorical-constant-class-of (shape)))

;;; ----------

(shape-of has 
  (inverse (shape))
  (range (Tangible-Entity))
  (domain (Shape-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Shape-Value has 
  (superclasses (Property-Value))
  (range-of (shape))
  (domain-of (shape-of)))

;;; ----------

(Shelf has 
  (superclasses (Furniture))
  (wn20-synset ((:set (:triple "shelf" 1 "n")))))

;;; ----------

(Shipping has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "transportation" 5 "n") (:triple "shipping" 1 "n") (:triple "transport" 3 "n")))))

(every Shipping has 
  (text-nominalization ("shipping")))

;;; ----------

(Shorten has 
  (superclasses (Decrease))
  (test-case ('((*mycarantenna has (instance-of (Substance)) (length (*mycarantennalength))) (*mycarantennalength has (instance-of (Length-Value)) (value ((:pair 10000 *millimeter)))) (a Decrease with (object (*mycarantenna)) (property-slot (length))) ((thelast Decrease) isa Shorten) (do-and-next (thelast Shorten)) ((the less-than of (the length of *mycarantenna)) includes *mycarantennalength))))
  (wn20-synset ((:set (:triple "shorten" 1 "v") (:triple "shorten" 3 "v")))))

(every Shorten has-definition 
  (instance-of (Decrease))
  (property-slot (length)))

(every Shorten has 
  (text-nominalization ("shortening")))

;;; ----------

(Shut-Out has 
  (caused-by-class-of (Be-Shut-Out))
  (superclasses (Obstruct))
  (required-slot (object
                  base))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the thing Shut-Out")
                        (:seq base "the enclosure")
                        (:seq agent "the Out-Shutter")))
  (wn16-synset ((:set (:triple "shut_out" 1 "v") (:triple "exclude" 2 "v") (:triple "keep_out" 1 "v") (:triple "shut" 3 "v"))))
  (wn20-synset ((:set (:triple "shut_out" 1 "v") (:triple "exclude" 2 "v") (:triple "keep_out" 1 "v") (:triple "shut" 3 "v")))))

(every Shut-Out has 
  (resulting-state ((a Be-Shut-Out)))
  (base ((a Tangible-Entity with (plays ((a Container))))))
  (object ((a Tangible-Entity)))
  (ncs-list ((forall (the object of Self) (:triple It is-inside (the base of Self) [Shut-Out-ncs-1]))))
  (add-list ((forall (the object of Self) (:triple It object-of (the resulting-state of Self) [Shut-Out-add-1]))
             (:triple (the base of Self) base-of (the resulting-state of Self) [Shut-Out-add-2])))
  (text-active-verbseq-sg ("shuts out"))
  (text-active-verbseq-pl ("shut out"))
  (text-passive-verbseq-sg ("gets shut out"))
  (text-passive-verbseq-pl ("get shut out"))
  (text-base ((if (has-value (the base of Self)) then ("of"))))
  (preparatory-event ((:default (a Admit with (base ((the base of Self))) (object ((the object of Self)))) (a Exit with (base ((the base of Self))) (object ((the object of Self)))))))
  (text-nominalization ("shutting")))

;;; ----------

(Signal has 
  (superclasses (Role))
  (wn16-synset ((:set (:triple "signal" 1 "n") (:triple "signaling" 1 "n") (:triple "sign" 3 "n"))))
  (wn20-synset ((:set (:triple "signal" 1 "n") (:triple "signaling" 1 "n") (:triple "sign" 3 "n")))))

(every Signal has 
  (in-event ((a Transmit)))
  (played-by ((a Entity with (object-of ((the Transmit in-event of Self)))))))

;;; ----------

(Sit-Down has 
  (superclasses (Orient))
  (description ("The act of sitting down. To go to a state of Be-Sitting."))
  (wn20-synset ((:set (:triple "sit" 3 "v") (:triple "sit_down" 1 "v")))))

(every Sit-Down has 
  (agent ((a Entity)))
  (object ((the agent of Self)))
  (resulting-state ((a Be-Sitting)))
  (defeats ((allof (the object-of of (the agent of Self)) where (((the classes of It) = Be-Standing) and ((the object of It) includes (the agent of Self))))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Sitting with (object ((the agent of Self)))) [Sit-Down-pcs-1]))))
  (add-list ((:triple (the resulting-state of Self) object (the agent of Self) [Sit-Down-add-1])))
  (del-list ((forall (the defeats of Self) (:triple It object (the agent of Self) [Sit-Down-del-1]))))
  (text-active-verbseq-sg ("sits"))
  (text-active-verbseq-pl ("sit"))
  (text-nominalization ("sitting")))

;;; ----------

(site has 
  (instance-of (Spatial-Relation))
  (domain (Event))
  (range (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (inverse (site-of))
  (text-slot (text-site))
  (cardinality (N-to-N)))

;;; ----------

(site-of has 
  (inverse (site))
  (range (Event))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (combine-values-by-appending (t))
  (text-slot (text-site-of)))

;;; ----------

(size has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Size-Value))
  (scale-class (Size-Scale))
  (scalar-constant-class (Size-Constant))
  (inverse (size-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "size" 1 "n")))))

;;; ----------

(Size-Constant has 
  (superclasses (Constant))
  (instances (*microscopic
              *tiny
              *small
              *big
              *little
              *gigantic
              *undersized
              *huge
              *oversized))
  (element-type-of (*little-gigantic-scale
                    *microscopic-gigantic-scale))
  (scalar-constant-class-of (size)))

;;; ----------

(size-of has 
  (inverse (size))
  (range (Spatial-Entity))
  (domain (Size-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Size-Scale has 
  (superclasses (Scale))
  (instances (*little-gigantic-scale
              *microscopic-gigantic-scale))
  (scale-class-of (size)))

;;; ----------

(Size-Value has 
  (superclasses (Property-Value))
  (test-case ('((Drink has (superclasses (Substance))) (Ocean has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (size ((a Size-Value)))) (*mybeer has (instance-of (Drink)) (size ((a Size-Value with (value ((:pair *big Drink) (:pair *tiny Ocean))) (less-than ((the size of *mycoffee))))))) (the value of (the size of *mybeer)) ((the less-than of (the size of *mybeer)) includes (the size of *mycoffee)) ((the greater-than of (the size of *mycoffee)) includes (the size of *mybeer)))))
  (range-of (size))
  (domain-of (size-of)))

;;; ----------

(skolem-string has 
  (instance-of (KM-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(skolem-string-of has 
  (range (Thing))
  (domain (String))
  (instance-of (KM-Slot-Group)))

;;; ----------

(Slide has 
  (superclasses (Move))
  (required-slot (object
                  path))
  (primary-slot (agent
                 origin
                 destination))
  (cmap-correspondence ((:seq object "the thing slid")
                        (:seq agent "the mover")
                        (:seq origin "slid from")
                        (:seq destination "slid to")
                        (:seq path "slid along")))
  (test-case ('((*ice has (instance-of (Tangible-Entity))) (*puck has (instance-of (Tangible-Entity))) (*Be-Touching-for-Slide has (instance-of (Be-Touching)) (object (*puck *ice))) (*Slide has (instance-of (Slide)) (object (*puck)) (path (*ice))) (do-and-next *Slide) (the text-gen of (thelast Slide)) ((the path of *Slide) = *ice) ((the object of *Be-Touching-for-Slide) includes *ice) ((the object of *Be-Touching-for-Slide) includes *puck))))
  (wn16-synset ((:set (:triple "slide" 3 "v"))))
  (wn20-synset ((:set (:triple "slide" 3 "v")))))

(every Slide has 
  (path ((a Tangible-Entity)))
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Touching with (object ((the path of Self))))))))
  (text-active-verbseq-sg ("slides"))
  (text-active-verbseq-pl ("slide"))
  (text-passive-verbseq-sg ("slides"))
  (text-passive-verbseq-pl ("slide"))
  (text-nominalization ("sliding")))

;;; ----------

(slope has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Unitless-Value))
  (scale-class (Slope-Scale))
  (scalar-constant-class (Slope-Constant))
  (cardinal-unit-class (UoM-Unitless))
  (inverse (slope-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "slope" 2 "n") (:triple "gradient" 2 "n")))))

;;; ----------

(Slope-Constant has 
  (superclasses (Constant))
  (instances (*vertical
              *steep
              *gradual
              *horizontal))
  (element-type-of (*horizontal-vertical-scale))
  (scalar-constant-class-of (slope)))

;;; ----------

(slope-of has 
  (inverse (slope))
  (range (Spatial-Entity))
  (domain (Unitless-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Slope-Scale has 
  (superclasses (Scale))
  (instances (*horizontal-vertical-scale))
  (scale-class-of (slope)))

;;; ----------

(slot-gloss has 
  (instance-of (NL-Slot-Group))
  (domain (Slot))
  (range (String))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(slot-gloss-of has 
  (range (Slot))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(Slot-Query-Viewpoint has 
  (superclasses (Viewpoint)))

(every Slot-Query-Viewpoint has 
  (viewpoint-question ((make-phrase (:seq "What is the relationship between" (the text-def-head of (the2 of (the2 of (the1 of (the viewpoint-query of Self))))) "and" (the text-def-head of (the3 of (the2 of (the1 of (the viewpoint-query of Self))))) "nospace" "?"))))
  (viewpoint-answer (((?concsl == (forall ?trip in (the elements of (the viewpoint-target of Self)) where (((the2 of ?trip) isa Relation) and (?valphrase == (make-phrase (the text-indef-phrase of (the3 of ?trip)))) and (?valphrase /= "") and (not ((:set "an entity" "an event" "a role" "an intangible-entity" "a tangible-entity" "a spatial-entity" "a place") includes ?valphrase))) (:pair (the1 of ?trip) (the2 of ?trip)))) and (:seq (the text-def-head of (the2 of (the2 of (the1 of (the viewpoint-query of Self))))) "and" (the text-def-head of (the3 of (the2 of (the1 of (the viewpoint-query of Self))))) "are related in the following ways:<ul>
" (forall ?cs in ?concsl (:seq "<li>" "nospace" (make-sentence (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the elements of (the viewpoint-target of Self)) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (the3 of ?trip)))))) "</li>
")) "</ul>
")))))

;;; ----------

(Slot-Value-Viewpoint has 
  (superclasses (Viewpoint)))

(every Slot-Value-Viewpoint has 
  (viewpoint-question (((?vq == (the1 of (the viewpoint-query of Self))) and (?fr == (the1 of (the2 of ?vq))) and (?sl == (the2 of (the2 of ?vq))) and (make-phrase (:seq "What is" (if ((?fr isa Entity) and (has-value (the text-slot of ?sl))) then (:seq (the text-def-head of ?fr) (the (the text-slot of ?sl) of ?fr)) else (:seq "the" ?sl "of" (the text-def-head of ?fr))) "nospace" "?")))))
  (viewpoint-answer ((if (has-value (the1 of (the viewpoint-query of Self))) then (if ((the1 of (the1 of (the viewpoint-query of Self))) = *slot-value) then ((?vq == (the1 of (the viewpoint-query of Self))) and (?fr == (the1 of (the2 of ?vq))) and (?sl == (the2 of (the2 of ?vq))) and (?filtfill == (if (has-value (the viewpoint-filter of Self)) then (allof (the ?sl of ?fr) where (It isa (the viewpoint-filter of Self))) else (the ?sl of ?fr))) and (if (?sl = related-to) then (:seq (the text-description of ?fr) (the text-description of (the3 of (the2 of ?vq)))) else (:seq (if (?sl isa Property) then (the text-description of (the ?sl of ?fr)) else (if (?fr isa Event) then (if (not (oneof ?filler in ?filtfill where (not (?filler isa Entity)))) then (the text-description of ?filtfill) else (if (not (oneof ?filler in ?filtfill where (not (?filler isa Event)))) then (:seq (the text-gen of ?fr) "<br>
" (the text-phrase of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "has" ?sl))) (if ((?sl = subevent) and (oneof ?se in ?filtfill where ((the first-subevent of ?fr) includes ?se))) then (:seq "<li>First," (the text-gen of (the first-subevent of ?fr)) "</li>
" (forall-seq ?ne in (the seq of (the (next-event *) of (the first-subevent of ?fr))) (:seq "<li>Then," (the text-gen of ?ne) "</li>
")) (forall ?extra in (the subevent of ?fr) where ((not ((the first-subevent of ?fr) includes ?extra)) and (not ((the (next-event *) of (the first-subevent of ?fr)) includes ?extra))) (:seq "<li>Additionally," (the text-gen of ?extra) "</li>
"))) else (forall ?filler in ?filtfill (:seq "<li>" (the text-gen of ?filler) "</li>
")))) else (:seq (the text-gen of ?fr) "<br>
" (the text-description of ?filtfill)))) else (if ((the number of ?filtfill) > 2) then (:seq (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (forall ?i in ?filtfill (:seq "<li>" (the text-gen of ?i) "</li>
"))) else (the text-description of ?filtfill)))) "<br>
" (if (oneof (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 'It)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most")))) then (make-sentence (:seq (the text-indef-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (andify (forall ?c in (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most"))) (:seq (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c))))) (#'(LAMBDA () (CADADR (KM-UNIQUE0 '?c)))) (#'(LAMBDA () (CDDADR (KM-UNIQUE0 '?c)))))))))))))))))
  (viewpoint-detail ((if (has-value (the1 of (the viewpoint-query of Self))) then (if ((the1 of (the1 of (the viewpoint-query of Self))) = *slot-value) then ((?vq-frame == (the1 of (the2 of (the1 of (the viewpoint-query of Self))))) and (?vq-slot == (the2 of (the2 of (the1 of (the viewpoint-query of Self))))) and (make-phrase (:seq (get-justification (:triple ?vq-frame ?vq-slot *)) "<p>
" "<b>" (the instance-of of ?vq-frame) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of ?vq-frame)) or (the description of (the instance-of of ?vq-frame)))) (if (has-value (the user-assumption of (the instance-of of ?vq-frame))) then (:seq "<p><b>Assumptions:</b><br>
" (forall ?as in (the user-assumption of (the instance-of of ?vq-frame)) (:seq "
<li>" ?as "</li>")))) (get-justification (:triple ?vq-frame instance-of *)) "<br>
" (forall ?vq-val in (the ?vq-slot of ?vq-frame) (:seq (get-justification (:triple ?vq-val instance-of *)) "<br>
")) (if (?vq-slot isa Property) then ((?c-order == (oneof ?co in (the all-instances of Property-Class-Order) where (((the property-slot of ?co) = ?vq-slot) and (oneof ?c in (the classes of ?vq-frame) where ((the elements of (the element of ?co)) includes ?c))))) and (?vq-frameclass == (oneof ?c in (the elements of (the element of ?c-order)) where (?vq-frame isa ?c))) and (:seq (if (not ((the1 of (the element of ?c-order)) = ?vq-frameclass)) then (:seq "In general, the" ?vq-slot "of" (the text-indef-head of ?vq-frame) "is greater than the" ?vq-slot "of" (andify (forall ?c in (#'(LAMBDA () (MEMBER (KM-UNIQUE0 '?vq-frameclass) (KM-UNIQUE0 '(reverse (the element of ?c-order)))))) where (not (?c = ?vq-frameclass)) (the text-indef-head of (an instance of ?c)))) "nospace" ".
")) (if (not ((the1 of (reverse (the element of ?c-order))) = ?vq-frameclass)) then (:seq "In general, the" ?vq-slot "of" (the text-indef-head of ?vq-frame) "is less than the" ?vq-slot "of" (andify (forall ?c in (#'(LAMBDA () (MEMBER (KM-UNIQUE0 '?vq-frameclass) (KM-UNIQUE0 '(the element of ?c-order))))) where (not (?c = ?vq-frameclass)) (the text-indef-head of (an instance of ?c)))) "nospace" ".
"))))) (if (has-value (the used-in-equation of (the ?vq-slot of ?vq-frame))) then ((?vars == (forall ?PV in (the equation-uses of (the used-in-equation of (the ?vq-slot of ?vq-frame))) where (not ((the ?vq-slot of ?vq-frame) includes ?PV)) (:seq (if ((the number of (allof ?var-pair in (the equation-symbol of (the used-in-equation of ?PV)) where ((the2 of ?var-pair) = ?PV))) > 1) then (:seq "<li>" (andify (forall ?var-pair in (the equation-symbol of (the used-in-equation of ?PV)) where ((the2 of ?var-pair) = ?PV) (the1 of ?var-pair))) "are the same.
")) (if (has-value (the1 of (the value of ?PV))) then (:seq "<li>" (the text-description of ?PV) "</li>
"))))) and (?eqs == (forall ?eq in (the equation-expression of (the equation of (the component-of of (the elements of (the viewpoint-target of Self))))) (:seq "<li>" (#'(LAMBDA () (PRETTY-PRINT-EQ-HTML (FIRST (KM0 '?eq))))) "</li>
"))) and (:seq (if ?vars then (:seq "Given the values<br>
" ?vars "<br>
")) (if ?eqs then (:seq "Given the equations<br>
" ?eqs "<br>
")) (#'(LAMBDA () (BPS-EXPLAINEQHIST))) "<br><li>" (the text-description of (the ?vq-slot of ?vq-frame)) "</li>
")))))))))))

;;; ----------

(smell has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Smell-Value))
  (categorical-constant-class (Smell-Constant))
  (inverse (smell-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "smell" 2 "n") (:triple "olfactory property" 1 "n") (:triple "aroma" 1 "n") (:triple "odor" 1 "n") (:triple "odour" 2 "n") (:triple "scent" 3 "n")))))

;;; ----------

(Smell-Constant has 
  (superclasses (Constant))
  (instances (*smokey
              *flowery
              *rancid
              *odorless
              *fruity
              *musky
              *spicy
              *foul
              *fresh
              *stinky))
  (categorical-constant-class-of (smell)))

;;; ----------

(smell-of has 
  (inverse (smell))
  (range (Tangible-Entity))
  (domain (Smell-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Smell-Value has 
  (superclasses (Property-Value))
  (range-of (smell))
  (domain-of (smell-of)))

;;; ----------

(soft-pcs-list has 
  (instance-of (CLIB-Slot-Group))
  (domain (Event))
  (range (Thing))
  (inverse (soft-pcs-list-of))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(soft-pcs-list-of has 
  (inverse (soft-pcs-list))
  (range (Event))
  (domain (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Solid-Substance has 
  (subclasses (Wood
               Tissue
               Stone
               Rubber
               Plastic
               Paper
               Glass))
  (superclasses (Substance))
  (description ("A substance in the solid state at room temperature"))
  (wn20-synset ((:set (:triple "solid" 1 "n")))))

(every Solid-Substance has 
  (physical-state ((if (not (has-value (the temperature of Self))) then ((a State-Value with (value (*solid))))))))

;;; ----------

(Sound has 
  (description ("Mechanical energy vibrations that propagate through a solid, liquid, or gas medium."))
  (superclasses (Energy))
  (wn20-synset ((:set (:triple "sound" 1 "n") (:triple "sound" 3 "n")))))

(every Sound has 
  (object-of ((a Move))))

;;; ----------

(space-int-contains has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (space-int-inside))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(space-int-coveredby has 
  (inverse (space-int-covers))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation)))

;;; ----------

(space-int-covers has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (space-int-coveredby))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(space-int-disjoint has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (space-int-disjoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(space-int-equal has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (space-int-equal))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(space-int-inside has 
  (inverse (space-int-contains))
  (range (Spatial-Entity))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation)))

;;; ----------

(space-int-meet has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (space-int-meet))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(space-int-overlap has 
  (instance-of (Spatial-Relation))
  (domain (Spatial-Entity))
  (range (Spatial-Entity))
  (inverse (space-int-overlap))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(Spatial-Entity has 
  (subclasses (Tangible-Entity
               Place))
  (superclasses (Entity))
  (domain-of (abuts
              text-abuts
              angle
              area
              away-from-of
              capacity
              circumference
              color
              complement
              complement-of
              depth
              destination-of
              diameter
              is-region-of
              height
              is-above
              is-below
              text-is-above
              is-along
              text-is-along
              is-at
              is-at-of
              text-is-at
              is-behind
              is-in-front-of
              text-is-behind
              is-beside
              text-is-beside
              is-between
              is-between-of
              text-is-between
              is-facing
              is-faced-by
              text-is-facing
              is-inside
              encloses
              text-is-inside
              is-near
              text-is-near
              is-north-of
              is-south-of
              text-is-north-of
              text-is-south-of
              is-northwest-of
              is-southeast-of
              text-is-northwest-of
              text-is-southeast-of
              is-on
              has-on-it
              text-is-on
              is-opposite
              text-is-opposite
              is-oriented-toward
              is-oriented-toward-of
              text-is-oriented-toward
              is-outside
              does-not-enclose
              text-is-outside
              is-over
              is-under
              text-is-over
              is-southwest-of
              is-northeast-of
              text-is-southwest-of
              text-is-northeast-of
              is-west-of
              is-east-of
              text-is-west-of
              text-is-east-of
              latitude
              length
              location
              longitude
              luminance
              luminous-flux
              luminous-intensity
              origin-of
              path-of
              perimeter
              power
              pressure
              radius
              site-of
              text-site-of
              size
              slope
              space-int-contains
              space-int-inside
              space-int-covers
              space-int-coveredby
              space-int-disjoint
              space-int-equal
              space-int-meet
              space-int-overlap
              thickness
              toward-of
              voltage
              width))
  (range-of (abuts
             text-abuts
             angle-of
             area-of
             away-from
             capacity-of
             circumference-of
             color-of
             complement
             complement-of
             depth-of
             destination
             diameter-of
             has-region
             height-of
             is-above
             is-below
             text-is-below
             is-along
             text-is-along
             is-at
             is-at-of
             text-is-at-of
             is-behind
             is-in-front-of
             text-is-in-front-of
             is-beside
             text-is-beside
             is-between
             is-between-of
             text-is-between-of
             is-facing
             is-faced-by
             text-is-faced-by
             is-inside
             encloses
             text-encloses
             is-near
             text-is-near-of
             is-north-of
             is-south-of
             text-is-south-of
             text-is-north-of
             is-northwest-of
             is-southeast-of
             text-is-southeast-of
             text-is-northwest-of
             is-on
             has-on-it
             text-has-on-it
             is-opposite
             text-is-opposite
             is-oriented-toward
             is-oriented-toward-of
             text-is-oriented-toward-of
             is-outside
             does-not-enclose
             text-is-outside-of
             is-over
             is-under
             text-is-under
             is-southwest-of
             is-northeast-of
             text-is-northeast-of
             text-is-southwest-of
             is-west-of
             is-east-of
             text-is-east-of
             text-is-west-of
             latitude-of
             length-of
             location-of
             longitude-of
             luminance-of
             luminous-flux-of
             luminous-intensity-of
             origin
             path
             perimeter-of
             power-of
             pressure-of
             radius-of
             site
             text-site
             size-of
             slope-of
             space-int-contains
             space-int-inside
             space-int-covers
             space-int-coveredby
             space-int-disjoint
             space-int-equal
             space-int-meet
             space-int-overlap
             thickness-of
             toward
             voltage-of
             width-of)))

(every Spatial-Entity has 
  (location ((must-be-a Place)))
  (is-outside ((must-be-a Spatial-Entity)))
  (does-not-enclose ((must-be-a Spatial-Entity)))
  (is-inside ((must-be-a Spatial-Entity)))
  (encloses ((must-be-a Spatial-Entity)))
  (abuts ((must-be-a Spatial-Entity)
          (excluded-values (Self))))
  (is-above ((must-be-a Spatial-Entity)))
  (is-below ((must-be-a Spatial-Entity)))
  (is-along ((must-be-a Spatial-Entity)))
  (is-at ((must-be-a Spatial-Entity)))
  (is-behind ((must-be-a Spatial-Entity)))
  (is-in-front-of ((must-be-a Spatial-Entity)))
  (is-on ((must-be-a Spatial-Entity)))
  (has-on-it ((must-be-a Spatial-Entity)))
  (is-opposite ((must-be-a Spatial-Entity)))
  (is-over ((must-be-a Spatial-Entity)))
  (is-under ((must-be-a Spatial-Entity)))
  (is-near ((must-be-a Spatial-Entity))))

;;; ----------

(Speak has 
  (superclasses (Embody))
  (wn20-synset ((:set (:triple "talk" 2 "v") (:triple "speak" 1 "v") (:triple "utter" 3 "v") (:triple "mouth" 1 "v") (:triple "verbalize" 2 "v") (:triple "verbalise" 2 "v")))))

(every Speak has 
  (description ("The physical act of a producing speech sounds."))
  (result ((a Sound)))
  (agent ((must-be-a Tangible-Entity)
          (a Tangible-Entity)))
  (text-nominalization ("speech")))

;;; ----------

(Specification has 
  (superclasses (Message))
  (description ("A description of something in terms of specific values of its features"))
  (wn20-synset ((:set (:triple "specification" 1 "n") (:triple "spec" 1 "n")))))

(every Specification has 
  (result-of ((a Specify with (object ((a Entity))) (result (Self)))))
  (information-content (((?object-instance == (the object of (the result-of of Self))) and (forall (the feature-slot of (the instance-of of ?object-instance)) where ((has-value (the range of It)) or (has-value (the It of ?object-instance))) (:triple ?object-instance It (if (has-value (the It of ?object-instance)) then (the It of ?object-instance) else (an instance of (the range of It)))))))))

;;; ----------

(Specify has 
  (superclasses (Action))
  (description ("create a specification (a feature-value description of) some object"))
  (wn20-synset ((:set (:triple "stipulate" 1 "v") (:triple "qualify" 5 "v") (:triple "condition" 3 "v") (:triple "specify" 1 "v") (:triple "specify" 2 "v") (:triple "define" 2 "v") (:triple "delineate" 2 "v") (:triple "delimit" 1 "v") (:triple "delimitate" 1 "v") (:triple "specify" 3 "v") (:triple "set" 3 "v") (:triple "determine" 4 "v") (:triple "fix" 3 "v") (:triple "limit" 3 "v") (:triple "specify" 4 "v") (:triple "particularize" 1 "v") (:triple "particularise" 1 "v") (:triple "specialize" 2 "v") (:triple "specialise" 2 "v") (:triple "pin_down" 1 "v") (:triple "peg_down" 2 "v") (:triple "nail_down" 2 "v") (:triple "narrow_down" 1 "v") (:triple "narrow" 2 "v") (:triple "specify" 5 "v")))))

(every Specify has 
  (object ((a Entity)))
  (result ((a Specification)))
  (text-nominalization ("specification")))

;;; ----------

(Stand-Up has 
  (superclasses (Orient))
  (description ("The act of standing up. To go to a state of Be-Standing."))
  (wn20-synset ((:set (:triple "stand" 1 "v") (:triple "stand_up" 4 "v")))))

(every Stand-Up has 
  (agent ((a Entity)))
  (object ((the agent of Self)))
  (resulting-state ((a Be-Standing)))
  (defeats ((allof (the object-of of (the agent of Self)) where (((the classes of It) = Be-Sitting) and ((the object of It) includes (the agent of Self))))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Standing with (object ((the agent of Self)))) [Stand-Up-pcs-1]))))
  (add-list ((:triple (the resulting-state of Self) object (the agent of Self) [Stand-Up-add-1])))
  (del-list ((forall (the defeats of Self) (:triple It object (the agent of Self) [Stand-Up-del-1]))))
  (text-active-verbseq-sg ("stands"))
  (text-active-verbseq-pl ("stand"))
  (text-nominalization ("standing")))

;;; ----------

(State has 
  (subclasses (Be-Unavailable
               Be-Touching
               Be-Stored
               Be-Standing
               Be-Stable
               Be-Sitting
               Be-Similar
               Be-Related
               Be-Known
               Be-Inaccessible
               Be-Different
               Be-Damaged
               Be-Controlled
               Be-Contained
               Be-Available
               Be-Accessible))
  (superclasses (Event))
  (primary-slot (object
                 experiencer))
  (cmap-correspondence ((:seq experiencer "the thing experiencing the state")
                        (:seq object "the thing that in the state")))
  (wn16-synset ((:set (:triple "be" 1 "v"))))
  (wn20-synset ((:set (:triple "be" 1 "v"))))
  (range-of (defeats
             resulting-state
             text-resulting-state))
  (domain-of (defeated-by
              resulting-state-of
              text-resulting-state-of)))

(every State has 
  (time-during ((must-be-a Time-Interval with (time-int-started-by ((the time-during of (the resulting-state-of of Self)))) (time-int-finished-by ((the time-during of (the defeated-by of Self)))))))
  (experiencer ((must-be-a Living-Entity with (time-of-existence ((a Time-Interval with (time-int-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the agent of Self)) then (the time-of-existence of (the agent of Self))) (if (has-value (the instrument of Self)) then (the time-of-existence of (the instrument of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (text-active-verbseq-sg ("keeps"))
  (text-active-verbseq-pl ("keep"))
  (text-passive-verbseq-sg ("is"))
  (text-passive-verbseq-pl ("are"))
  (text-particle ((make-phrase (:seq "in a state of" (the instance-of of Self)))))
  (text-argslots ((:seq text-particle base instrument))))

;;; ----------

(State-Constant has 
  (superclasses (Constant))
  (instances (*gas
              *aqueous
              *liquid
              *solid))
  (categorical-constant-class-of (physical-state)))

;;; ----------

(State-Value has 
  (superclasses (Property-Value))
  (range-of (physical-state))
  (domain-of (physical-state-of)))

;;; ----------

(Stone has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "stone" 2 "n") (:triple "rock" 2 "n")))))

;;; ----------

(Store has 
  (caused-by-class-of (Be-Stored))
  (superclasses (Action))
  (required-slot (object
                  base))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "the thing being stored")
                        (:seq base "the thing stored in")
                        (:seq agent "the agent")
                        (:seq instrument "the instrument used")))
  (wn16-synset ((:set (:triple "store" 1 "v") (:triple "store" 2 "v") (:triple "store" 3 "v"))))
  (wn20-synset ((:set (:triple "store" 1 "v") (:triple "store" 2 "v")))))

(every Store has 
  (object ((a Entity)))
  (base ((exactly 1 Tangible-Entity)
         (a Tangible-Entity with (plays ((a Container))))))
  (agent ((must-be-a Entity)))
  (instrument ((must-be-a Entity)))
  (resulting-state ((a Be-Stored)))
  (soft-pcs-list ((forall (the object of Self) (:triple It is-outside (the base of Self)))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Stored with (base ((the base of Self)))) [Store-pcs-1]))))
  (add-list ((:triple (the Container plays of (the base of Self)) content (the object of Self) [Store-add-1])
             (:triple (the resulting-state of Self) object (the object of Self) [Store-add-2])
             (:triple (the resulting-state of Self) base (the base of Self) [Store-add-3])))
  (text-active-verbseq-sg ("stores"))
  (text-active-verbseq-pl ("store"))
  (text-passive-verbseq-sg ("gets stored"))
  (text-passive-verbseq-pl ("get stored"))
  (text-base ((if (has-value (the base of Self)) then ("in"))))
  (preparatory-event ((:default (a Withdraw with (object ((the object of Self)))) (a Open with (base ((the base of Self))) (agent ((the agent of Self)))))))
  (text-nominalization ("storage")))

;;; ----------

(String has 
  (range-of (description
             doc-file
             skolem-string
             slot-gloss
             text-active-phrase
             text-active-verbseq-pl
             text-active-verbseq-sg
             text-active-verbseq
             text-definition-sentence
             text-description
             text-existential-there
             text-gen
             text-gloss
             text-passive-phrase
             text-passive-verbseq-pl
             text-passive-verbseq-sg
             text-passive-verbseq
             user-assumption
             user-comment
             user-description
             viewpoint-answer-page
             viewpoint-answer
             viewpoint-detail
             viewpoint-eq-solver-info
             viewpoint-question))
  (domain-of (description-of
              doc-file-of
              skolem-string-of
              slot-gloss-of
              text-active-phrase-of
              text-active-verbseq-pl-of
              text-active-verbseq-sg-of
              text-active-verbseq-of
              text-definition-sentence-of
              text-description-of
              text-existential-there-of
              text-gen-of
              text-gloss-of
              text-passive-phrase-of
              text-passive-verbseq-pl-of
              text-passive-verbseq-sg-of
              text-passive-verbseq-of
              user-assumption-of
              user-comment-of
              user-description-of
              viewpoint-answer-page-of
              viewpoint-answer-of
              viewpoint-detail-of
              viewpoint-eq-solver-info-of
              viewpoint-question-of))
  (superclasses (Thing)))

;;; ----------

(Structure has 
  (superclasses (Thing))
  (wn20-synset ((:set (:triple "structure" 0 "n")))))

;;; ----------

(subevent has 
  (secondary-slot-of (Action))
  (primary-slot-of (Come-Together
                    Disperse
                    Move-Apart
                    Move-Together
                    Send))
  (subslots (first-subevent))
  (instance-of (Meronymic-Relation))
  (domain (Event))
  (range (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inverse (subevent-of))
  (wn20-synset ((:set (:triple "step" 1 "n"))))
  (text-gloss ("has as subevent")))

;;; ----------

(subevent-of has 
  (inverse (subevent))
  (range (Event))
  (domain (Event))
  (instance-of (Meronymic-Relation))
  (text-slot (text-subevent-of))
  (text-gloss ("is a subevent of")))

;;; ----------

(Substance has 
  (subclasses (Solid-Substance
               Metal
               Fluid-Substance))
  (superclasses (Tangible-Entity))
  (member-of (_Partition5))
  (wn16-synset ((:set (:triple "substance" 1 "n") (:triple "matter" 3 "n"))))
  (wn20-synset ((:set (:triple "substance" 1 "n") (:triple "matter" 1 "n"))))
  (domain-of (physical-state))
  (range-of (physical-state-of)))

(every Substance has 
  (text-def-determiner ((if (anonymous-instancep Self) then (if (has-value (the is-possessed-by of Self)) then (:seq (the text-def-head of (the is-possessed-by of Self)) "'s") else ()) else ())))
  (text-indef-determiner (())))

;;; ----------

(substrate has 
  (instance-of (Meronymic-Relation))
  (domain (Event))
  (range (Tangible-Entity))
  (inverse (substrate-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(substrate-of has 
  (inverse (substrate))
  (range (Event))
  (domain (Tangible-Entity))
  (instance-of (Meronymic-Relation)))

;;; ----------

(Suggest has 
  (superclasses (Communicate))
  (wn20-synset ((:set (:triple "propose" 1 "v") (:triple "suggest" 1 "v") (:triple "advise" 3 "v")))))

(every Suggest has 
  (object ((a Suggestion)))
  (text-nominalization ("suggestion")))

;;; ----------

(Suggestion has 
  (superclasses (Information))
  (wn16-synset ((:set (:triple "suggestion" 1 "n") (:triple "suggestion" 2 "n") (:triple "proposition" 2 "n") (:triple "proffer" 1 "n"))))
  (wn20-synset ((:set (:triple "suggestion" 1 "n") (:triple "suggestion" 2 "n") (:triple "proposition" 2 "n") (:triple "proffer" 1 "n")))))

;;; ----------

(Supper has 
  (superclasses (Meal))
  (wn20-synset ((:set (:triple "supper" 1 "n"))
                (:set (:triple "supper" 2 "n")))))

(every Supper has 
  (text-nominalization ("supper")))

;;; ----------

(Supply has 
  (subclasses (Feed))
  (superclasses (Relinquish))
  (required-slot (agent
                  donor
                  object
                  enables))
  (primary-slot (recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing Supplied")
                        (:seq agent "the Supplier")
                        (:seq donor "the original possessor")
                        (:seq recipient "the final possessor")
                        (:seq instrument "the thing used to Supply")
                        (:seq enables "enable")))
  (test-case ('((*Money has (instance-of (Physical-Object))) (*Fred has (instance-of (Living-Entity)) (possesses (*Money))) (*Steven has (instance-of (Tangible-Entity))) (*Supply has (instance-of (Supply)) (agent (*Fred)) (recipient (*Steven)) (object (*Money))) (do-and-next *Supply) (the text-gen of (thelast Supply)) ((the enables of *Supply) isa Replenish) ((the object of (the enables of *Supply)) = *Money) ((the possesses of *Fred) /= *Money))))
  (wn16-synset ((:set (:triple "supply" 1 "v") (:triple "supply" 2 "v") (:triple "furnish" 1 "v") (:triple "issue" 2 "v") (:triple "provide" 1 "v") (:triple "render" 2 "v"))))
  (wn20-synset ((:set (:triple "supply" 1 "v") (:triple "supply" 2 "v") (:triple "furnish" 1 "v") (:triple "issue" 2 "v") (:triple "provide" 1 "v") (:triple "render" 2 "v")))))

(every Supply has 
  (agent ((a Tangible-Entity)))
  (object ((a Tangible-Entity)))
  (recipient ((must-be-a Tangible-Entity)))
  (enables ((a Replenish with (object ((the object of Self))))))
  (text-active-verbseq-sg ("supplies"))
  (text-active-verbseq-pl ("supply"))
  (text-passive-verbseq-sg ("is supplied"))
  (text-passive-verbseq-pl ("are supplied"))
  (text-nominalization ("supplying")))

;;; ----------

(Support has 
  (caused-by-class-of (Be-Supported))
  (superclasses (Obstruct))
  (required-slot (object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing supported")
                        (:seq instrument "instrument")))
  (test-case ('((*dumb-bell has (instance-of (Tangible-Entity))) (*body-builder has (instance-of (Living-Entity))) (a Support with (object (*dumb-bell)) (agent (*body-builder))) (not (has-value (the Be-Supported object-of of *dumb-bell))) (do-and-next (thelast Support)) (the text-gen of (thelast Support)) (forall (the resulting-state of (thelast Support)) (the text-gen of It)) (has-value (the Be-Supported object-of of *dumb-bell)) (a Fall with (object (*dumb-bell))) (not (try-do (thelast Fall))) (the text-gen of (thelast Fall)) (a Let-Fall with (object (*dumb-bell)) (agent (*body-builder))) (do-and-next (thelast Let-Fall)) (the text-gen of (thelast Let-Fall)) (not (has-value (the Be-Supported object-of of *dumb-bell))) (try-do (thelast Fall)))))
  (wn16-synset ((:set (:triple "support" 4 "v") (:triple "hold" 16 "v") (:triple "hold_up" 1 "v") (:triple "sustain" 5 "v"))))
  (wn20-synset ((:set (:triple "support" 4 "v") (:triple "hold" 15 "v") (:triple "hold_up" 1 "v") (:triple "sustain" 5 "v")))))

(every Support has 
  (object ((a Tangible-Entity)))
  (resulting-state ((a Be-Supported)))
  (instrument ((must-be-a Tangible-Entity)))
  (soft-pcs-list ((forall (the instrument of Self) (forall2 (the object of Self) (:triple It object-of (a Be-Touching with (object (It2))))))))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Support-add-1])
             (if (has-value (the instrument of Self)) then (:triple (the resulting-state of Self) instrument (the instrument of Self) [Support-add-2]))))
  (text-active-verbseq-sg ("supports"))
  (text-active-verbseq-pl ("support"))
  (text-passive-verbseq-sg ("gets supported"))
  (text-passive-verbseq-pl ("get supported"))
  (preparatory-event ((if (has-value (the agent of Self)) then ((:default (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self))))))))))))
  (interrupted-by ((must-be-a Break with (object ((the instrument of Self))))))
  (text-nominalization ("support")))

;;; ----------

(supported-by has 
  (inverse (supports))
  (range (Event))
  (domain (Event))
  (instance-of (Causal-Relation))
  (combine-values-by-appending (t))
  (text-gloss ("is supported by")))

;;; ----------

(supports has 
  (instance-of (Causal-Relation))
  (domain (Event))
  (range (Event))
  (inverse (supported-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("supports")))

;;; ----------

(System has 
  (superclasses (Thing))
  (domain-of (component
              equation))
  (range-of (component-of
             equation-of)))

;;; ----------

(Take has 
  (superclasses (Obtain))
  (required-slot (donor
                  recipient
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing taken")
                        (:seq agent "taker")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Book-Taken has (instance-of (Tangible-Entity))) (*John-In-Take has (instance-of (Tangible-Entity)) (possesses (*Book-Taken))) (*Fred-In-Take has (instance-of (Tangible-Entity))) (a Take with (agent (*Fred-In-Take)) (donor (*John-In-Take)) (object (*Book-Taken))) (do-and-next (thelast Take)) (the text-gen of (thelast Take)) ((the possesses of *Fred-In-Take) = *Book-Taken) ((the possesses of *John-In-Take) = nil) ((the is-possessed-by of *Book-Taken) = *Fred-In-Take) ((the agent of (thelast Take)) = (the recipient of (thelast Take))))))
  (wn16-synset ((:set (:triple "take" 8 "v"))))
  (wn20-synset ((:set (:triple "take" 8 "v")))))

(every Take has 
  (donor ((a Tangible-Entity)))
  (text-active-verbseq-sg ("takes"))
  (text-active-verbseq-pl ("take"))
  (text-passive-verbseq-sg ("is taken"))
  (text-passive-verbseq-pl ("are taken"))
  (text-nominalization ("taking")))

;;; ----------

(Take-Apart has 
  (superclasses (Break))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq agent "the agent")
                        (:seq object "the thing taken apart")
                        (:seq instrument "instrument of used in the take apart")))
  (wn16-synset ((:set (:triple "take_apart" 1 "v") (:triple "break_apart" 1 "v") (:triple "break_up" 8 "v") (:triple "disassemble" 1 "v") (:triple "dismantle" 2 "v"))))
  (wn20-synset ((:set (:triple "take_apart" 1 "v") (:triple "break_apart" 1 "v") (:triple "break_up" 8 "v") (:triple "disassemble" 1 "v") (:triple "dismantle" 2 "v")))))

(every Take-Apart has 
  (object ((a Tangible-Entity)))
  (del-list ((forall (the object of Self) (:triple It has-part (the has-part of It) [Take-Apart-del-1]))))
  (text-active-verbseq-sg ("takes apart"))
  (text-active-verbseq-pl ("take apart"))
  (text-passive-verbseq-sg ("gets taken apart"))
  (text-passive-verbseq-pl ("get taken apart"))
  (text-nominalization ("taking")))

;;; ----------

(Take-Control has 
  (caused-by-class-of (Be-Controlled))
  (defeated-by-class-of (Be-Controlled))
  (superclasses (Action))
  (required-slot (agent
                  object))
  (cmap-correspondence ((:seq object "the object taken control of")
                        (:seq agent "the agent taking control")))
  (test-case ('((new-situation) (*ShinerBock has (instance-of (Physical-Object))) (*MyOwnSelf has (instance-of (Physical-Object))) (*MyOwnLife has (instance-of (Physical-Object))) (a Be-Controlled with (agent (*ShinerBock)) (object (*MyOwnLife))) (a Take-Control with (agent (*MyOwnSelf)) (object (*MyOwnLife))) ((the agent of (the Be-Controlled object-of of *MyOwnLife)) = *ShinerBock) (do-and-next (thelast Take-Control)) (not ((the agent of (the Be-Controlled object-of of *MyOwnLife)) = *ShinerBock)) ((the agent of (the Be-Controlled object-of of *MyOwnLife)) = *MyOwnSelf))))
  (wn16-synset ((:set (:triple "control" 1 "v") (:triple "command" 5 "v"))))
  (wn20-synset ((:set (:triple "control" 1 "v") (:triple "command" 5 "v") (:triple "take_control" 1 "v") (:triple "take_charge" 1 "v") (:triple "take_hold" 1 "v")))))

(every Take-Control has 
  (object ((a Entity)))
  (agent ((a Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Controlled))))
  (resulting-state ((a Be-Controlled)))
  (add-list ((:triple (the resulting-state of Self) agent (the agent of Self) [Take-Control-add-1])
             (:triple (the resulting-state of Self) object (the object of Self) [Take-Control-add-2])))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Take-Control-del-1]))
             (forall (the defeats of Self) (:triple It agent (the agent of It) [Take-Control-del-2]))))
  (text-active-verbseq-sg ("takes control of"))
  (text-active-verbseq-pl ("take control of"))
  (text-argslots ((:seq instrument path result)))
  (text-nominalization ("taking")))

;;; ----------

(Take-In has 
  (subclasses (Eat
               Absorb))
  (superclasses (Move-Into))
  (required-slot (agent
                  object
                  destination))
  (primary-slot (agent
                 origin
                 path))
  (cmap-correspondence ((:seq agent "the one causing the take-in")
                        (:seq object "the Tangible-Entity taken-in")
                        (:seq destination "final location")
                        (:seq origin "original location")
                        (:seq path "the portal")))
  (test-case ('((*John has (instance-of (Tangible-Entity))) (*Nasal-Passage has (instance-of (Spatial-Entity))) (*Air has (instance-of (Tangible-Entity)) (is-outside (*John))) (a Take-In with (agent (*John)) (object (*Air)) (path (*Nasal-Passage))) (do-and-next (thelast Take-In)) (the text-gen of (thelast Take-In)) ((the path of (thelast Take-In)) = *Nasal-Passage) ((the content of (the Container plays of *John)) = *Air) ((the is-inside of (the location of *Air)) includes *John) ((the is-outside of (the location of *Lungs)) /= *John))))
  (wn16-synset ((:set (:triple "sorb" 1 "v") (:triple "take_up" 8 "v"))))
  (wn20-synset ((:set (:triple "sorb" 1 "v") (:triple "take_up" 8 "v")))))

(every Take-In has 
  (object ((a Tangible-Entity)))
  (agent ((a Tangible-Entity with (plays ((a Container))))))
  (base ((the agent of Self)))
  (text-active-verbseq-sg ("takes in"))
  (text-active-verbseq-pl ("take in"))
  (text-passive-verbseq-sg ("gets taken in"))
  (text-passive-verbseq-pl ("get taken in"))
  (text-nominalization ("taking")))

;;; ----------

(Tangible-Entity has 
  (subclasses (Substance
               Physical-Object
               Energy))
  (member-of (_Partition4))
  (superclasses (Spatial-Entity))
  (primary-slot (location))
  (domain-of (breakability
              brightness
              consistency
              text-content
              density
              has-basic-structural-unit
              is-basic-structural-unit-of
              has-region
              has-structural-part
              is-structural-part-of
              text-information-content
              integrity
              mass
              material
              material-of
              text-material
              polarity
              quantity
              raw-material-of
              text-raw-material-of
              shape
              smell
              substrate-of
              taste
              temperature
              texture
              wetness))
  (range-of (breakability-of
             brightness-of
             consistency-of
             text-content-of
             density-of
             has-basic-structural-unit
             is-basic-structural-unit-of
             is-region-of
             has-structural-part
             is-structural-part-of
             text-information-content-of
             integrity-of
             mass-of
             material
             material-of
             text-material-of
             polarity-of
             quantity-of
             raw-material
             text-raw-material
             shape-of
             smell-of
             substrate
             taste-of
             temperature-of
             texture-of
             wetness-of)))

(every Tangible-Entity has 
  (location ((must-be-a Place))))

;;; ----------

(Target has 
  (superclasses (Role)))

(every Target has 
  (in-event ((must-be-a Move)))
  (played-by ((a Spatial-Entity with (toward-of ((the in-event of Self)))))))

;;; ----------

(target-unit has 
  (instance-of (CLIB-Slot-Group))
  (domain (Unit-Conversion))
  (range (Unit-of-Measurement))
  (inverse (target-unit-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(target-unit-of has 
  (inverse (target-unit))
  (range (Unit-Conversion))
  (domain (Unit-of-Measurement))
  (instance-of (CLIB-Slot-Group))
  (combine-values-by-appending (t)))

;;; ----------

(taste has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Taste-Value))
  (categorical-constant-class (Taste-Constant))
  (inverse (taste-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "taste" 1 "n")))))

;;; ----------

(Taste-Constant has 
  (superclasses (Constant))
  (instances (*buttery
              *creamy
              *sour
              *sweet
              *bitter
              *tasteless
              *watery
              *juicy))
  (categorical-constant-class-of (taste)))

;;; ----------

(taste-of has 
  (inverse (taste))
  (range (Tangible-Entity))
  (domain (Taste-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Taste-Value has 
  (superclasses (Property-Value))
  (range-of (taste))
  (domain-of (taste-of)))

;;; ----------

(Teach has 
  (superclasses (Communicate))
  (required-slot (agent
                  object
                  recipient))
  (test-case ('((*Fire-Is-Darn-Hot has (instance-of (Information))) (*Alexander has (instance-of (Tangible-Entity))) (*Aristotle has (instance-of (Tangible-Entity)) (experiencer-of ((a Be-Known with (object (*Fire-Is-Darn-Hot)))))) (*Teach has (instance-of (Teach)) (agent (*Aristotle)) (recipient (*Alexander)) (object (*Fire-Is-Darn-Hot))) (do-script *Teach) (has-value (the recipient of (thelast Teach))) ((the experiencer of (thelast Be-Known)) = *Aristotle) ((the object of (thelast Be-Known)) = *Fire-Is-Darn-Hot) ((the plays of *Aristotle) isa Teacher) ((the plays of *Alexander) isa Pupil))))
  (wn16-synset ((:set (:triple "teach" 1 "v") (:triple "learn" 5 "v") (:triple "instruct" 1 "v"))))
  (wn20-synset ((:set (:triple "teach" 1 "v") (:triple "learn" 5 "v") (:triple "instruct" 1 "v")))))

(every Teach has 
  (agent ((a Tangible-Entity with (plays ((a Teacher))))))
  (recipient ((a Tangible-Entity with (plays ((a Pupil))))))
  (objective ((the Learn subevent of Self)))
  (subevent ((a Express)
             (a Convey)
             (a Learn)))
  (text-nominalization ("teaching")))

;;; ----------

(Teacher has 
  (superclasses (Role))
  (wn20-synset ((:set (:triple "teacher" 1 "n"))
                (:set (:triple "instructor" 1 "n")))))

(every Teacher has 
  (in-event ((must-be-a Teach)))
  (played-by ((a Tangible-Entity with (agent-of ((the in-event of Self)))))))

;;; ----------

(Team has 
  (superclasses (Group))
  (description ("a relatively small organization of Roles with a goal"))
  (wn20-synset ((:set (:triple "team" 1 "n") (:triple "squad" 2 "n"))))
  (subclasses (Workgroup)))

;;; ----------

(temperature has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Temperature-Value))
  (scale-class (Temperature-Scale))
  (scalar-constant-class (Temperature-Constant))
  (cardinal-unit-class (UoM-Temperature))
  (inverse (temperature-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "temperature" 1 "n")))))

;;; ----------

(Temperature-Constant has 
  (superclasses (Constant))
  (instances (*cold
              *cool
              *mild
              *warm
              *hot
              *freezing
              *boiling
              *normal
              *abnormal))
  (element-type-of (*cold-hot-scale
                    *freezing-boiling-scale))
  (scalar-constant-class-of (temperature)))

;;; ----------

(temperature-of has 
  (inverse (temperature))
  (range (Tangible-Entity))
  (domain (Temperature-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Temperature-Scale has 
  (superclasses (Scale))
  (instances (*cold-hot-scale
              *freezing-boiling-scale))
  (scale-class-of (temperature)))

;;; ----------

(Temperature-Value has 
  (superclasses (Property-Value))
  (test-case ('((Drink has (superclasses (Substance))) (Ice has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (temperature ((a Temperature-Value)))) (*mybeer has (instance-of (Drink)) (temperature ((a Temperature-Value with (value ((:pair 5 *celsius) (:pair *cool Drink) (:pair *warm Ice))) (less-than ((the temperature of *mycoffee))))))) (the value of (the temperature of *mybeer)) ((the less-than of (the temperature of *mybeer)) includes (the temperature of *mycoffee)) ((the greater-than of (the temperature of *mycoffee)) includes (the temperature of *mybeer)))))
  (range-of (temperature))
  (domain-of (temperature-of)))

;;; ----------

(Template has 
  (superclasses (Role))
  (description ("A role played by an object in a copy event, 
                           serving as the thing from which a copy is made.")))

(every Template has 
  (in-event ((a Copy)))
  (played-by ((a Tangible-Entity with (object-of ((the in-event of Self)))))))

;;; ----------

(Temporal-Entity has 
  (superclasses (Thing))
  (subclasses (Time-Interval
               Time-Instant))
  (domain-of (time-before
              time-after
              time-begins
              time-ends))
  (range-of (time-before
             time-after
             time-beginning-of
             time-end-of)))

;;; ----------

(Territory has 
  (subclasses (Administrative-District))
  (superclasses (Region))
  (description ("a relatively large Region delineated on some dimension (administrative, strategic, commercial, private, geographical, ...)"))
  (wn20-synset ((:set (:triple "territory" 1 "n") (:triple "district" 1 "n") (:triple "territorial_dominion" 1 "n") (:triple "dominion" 2 "n") (:triple "territory" 3 "n") (:triple "soil" 4 "n")))))

;;; ----------

(test-case has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (cardinality (N-to-N)))

;;; ----------

(test-case-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(text-abuts has 
  (text-slot-of (abuts))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-abuts))
  (range (Spatial-Entity)))

;;; ----------

(text-abuts-of has 
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-active-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-active-phrase-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-active-sentence has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-active-sentence-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-active-verbseq has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-active-verbseq-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-active-verbseq-pl has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-active-verbseq-pl-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-active-verbseq-sg has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-active-verbseq-sg-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-agent has 
  (text-slot-of (agent))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (range (Entity)))

;;; ----------

(text-agent-of has 
  (text-slot-of (agent-of))
  (range (Event))
  (instance-of (NL-Slot-Group))
  (domain (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-argslots has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-argslots-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-arguments has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-arguments-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-away-from has 
  (text-slot-of (away-from))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-away-from-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-base has 
  (text-slot-of (base))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-base-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-base-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-base-phrase-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-beneficiary has 
  (text-slot-of (beneficiary))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-beneficiary-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-caused-by has 
  (text-slot-of (caused-by))
  (inverse (text-causes))
  (range (Event))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-causes has 
  (text-slot-of (causes))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-caused-by))
  (range (Event)))

;;; ----------

(text-content has 
  (text-slot-of (content))
  (instance-of (NL-Slot-Group))
  (domain (Tangible-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-content-of has 
  (range (Tangible-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-def-determiner has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-def-determiner-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-def-head has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-def-head-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-definition-sentence has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-definition-sentence-of has 
  (range (Thing))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-description has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-description-of has 
  (range (Thing))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-destination has 
  (text-slot-of (destination))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-destination-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-dobj has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-dobj-of has 
  (range (Event))
  (domain (Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-dobj-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-dobj-phrase-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-donor has 
  (text-slot-of (donor))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-donor-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-encloses has 
  (inverse (text-is-inside))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-existential-there has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-existential-there-of has 
  (range (Thing))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(Text-Field has 
  (superclasses (Message-Field))
  (description ("a message field whose content is a text constant")))

(every Text-Field has-definition 
  (instance-of (Message-Field))
  (information-content ((a String))))

(every Text-Field has 
  (information-content ((a String))))

;;; ----------

(text-gen has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-gen-of has 
  (range (Thing))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-gloss has 
  (instance-of (NL-Slot-Group))
  (domain (Slot))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-gloss-of has 
  (range (Slot))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-has-on-it has 
  (inverse (text-is-on))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-has-part has 
  (text-slot-of (has-part))
  (instance-of (NL-Slot-Group))
  (domain (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-part-of))
  (range (Entity)))

;;; ----------

(text-head has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-head-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-indef-determiner has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-indef-determiner-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-indef-head has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-indef-head-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-indef-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-indef-phrase-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-information-content has 
  (instance-of (NL-Slot-Group))
  (domain (Tangible-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-information-content-of has 
  (range (Tangible-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-instrument has 
  (text-slot-of (instrument))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-instrument-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-above has 
  (text-slot-of (is-above))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-below)))

;;; ----------

(text-is-along has 
  (text-slot-of (is-along))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-along))
  (range (Spatial-Entity)))

;;; ----------

(text-is-along-of has 
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-at has 
  (text-slot-of (is-at))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-at-of has 
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-behind has 
  (text-slot-of (is-behind))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-in-front-of)))

;;; ----------

(text-is-below has 
  (inverse (text-is-above))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-beside has 
  (text-slot-of (is-beside))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-beside))
  (range (Spatial-Entity)))

;;; ----------

(text-is-between has 
  (text-slot-of (is-between))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-between-of has 
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-east-of has 
  (text-slot-of (is-east-of))
  (inverse (text-is-west-of))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-faced-by has 
  (inverse (text-is-facing))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-facing has 
  (text-slot-of (is-facing))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-faced-by)))

;;; ----------

(text-is-in-front-of has 
  (inverse (text-is-behind))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-inside has 
  (text-slot-of (is-inside))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-encloses)))

;;; ----------

(text-is-near has 
  (text-slot-of (is-near))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-near-of has 
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-north-of has 
  (text-slot-of (is-north-of))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-south-of))
  (range (Spatial-Entity)))

;;; ----------

(text-is-northeast-of has 
  (text-slot-of (is-northeast-of))
  (inverse (text-is-southwest-of))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-northwest-of has 
  (text-slot-of (is-northwest-of))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-southeast-of))
  (range (Spatial-Entity)))

;;; ----------

(text-is-on has 
  (text-slot-of (is-on))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-has-on-it)))

;;; ----------

(text-is-opposite has 
  (text-slot-of (is-opposite))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-opposite))
  (range (Spatial-Entity)))

;;; ----------

(text-is-oriented-toward has 
  (text-slot-of (is-oriented-toward))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-oriented-toward-of has 
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-outside has 
  (text-slot-of (is-outside))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-outside-of has 
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-over has 
  (text-slot-of (is-over))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-under)))

;;; ----------

(text-is-part-of has 
  (text-slot-of (is-part-of))
  (inverse (text-has-part))
  (range (Entity))
  (instance-of (NL-Slot-Group))
  (domain (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-possessed-by has 
  (text-slot-of (is-possessed-by))
  (inverse (text-possesses))
  (range (Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-south-of has 
  (text-slot-of (is-south-of))
  (inverse (text-is-north-of))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-southeast-of has 
  (text-slot-of (is-southeast-of))
  (inverse (text-is-northwest-of))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-is-southwest has 
  (instance-of (Slot)))

;;; ----------

(text-is-southwest-of has 
  (instance-of (NL-Slot-Group))
  (text-slot-of (is-southwest-of))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-northeast-of))
  (range (Spatial-Entity)))

;;; ----------

(text-is-under has 
  (inverse (text-is-over))
  (range (Spatial-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-is-west-of has 
  (text-slot-of (is-west-of))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-is-east-of))
  (range (Spatial-Entity)))

;;; ----------

(text-material has 
  (text-slot-of (material))
  (instance-of (NL-Slot-Group))
  (domain (Tangible-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-material-of has 
  (range (Tangible-Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-nom-sentence has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-nom-sentence-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-nominalization has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-nominalization-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-number has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-number-of has 
  (range (Event))
  (domain (Number))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-object has 
  (text-slot-of (object))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-object-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-origin has 
  (text-slot-of (origin))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-origin-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-particle has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-particle-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-passive-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-passive-phrase-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-passive-sentence has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-passive-sentence-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-passive-verbseq has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-passive-verbseq-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-passive-verbseq-pl has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-passive-verbseq-pl-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-passive-verbseq-sg has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-passive-verbseq-sg-of has 
  (range (Event))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-path has 
  (text-slot-of (path))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-path-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-phrase-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-possesses has 
  (instance-of (NL-Slot-Group))
  (domain (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (inverse (text-is-possessed-by)))

;;; ----------

(text-postmods has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-postmods-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-postmodslots has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-postmodslots-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-premods has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-premods-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-premodslots has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-premodslots-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-raw-material has 
  (text-slot-of (raw-material))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (range (Tangible-Entity)))

;;; ----------

(text-raw-material-of has 
  (text-slot-of (raw-material-of))
  (range (Event))
  (instance-of (NL-Slot-Group))
  (domain (Tangible-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-recipient has 
  (text-slot-of (recipient))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-recipient-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-related-to has 
  (text-slot-of (related-to))
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (inverse (text-related-to))
  (range (Thing)))

;;; ----------

(text-related-to-of has 
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-result has 
  (text-slot-of (result))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (range (Entity)))

;;; ----------

(text-result-of has 
  (text-slot-of (result-of))
  (range (Event))
  (instance-of (NL-Slot-Group))
  (domain (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-resulting-state has 
  (text-slot-of (resulting-state))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (range (State)))

;;; ----------

(text-resulting-state-of has 
  (text-slot-of (resulting-state-of))
  (range (Event))
  (instance-of (NL-Slot-Group))
  (domain (State))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-sentence has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-sentence-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-site has 
  (text-slot-of (site))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (range (Spatial-Entity)))

;;; ----------

(text-site-of has 
  (text-slot-of (site-of))
  (range (Event))
  (instance-of (NL-Slot-Group))
  (domain (Spatial-Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-slot has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (range (Slot))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-slot-of has 
  (range (Thing))
  (domain (Slot))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-subevent has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t)))

;;; ----------

(text-subevent-of has 
  (text-slot-of (subevent-of))
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-subj has 
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (range (Entity))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (dont-cache-values (t))
  (inherit-with-overrides (t)))

;;; ----------

(text-subj-of has 
  (range (Event))
  (domain (Entity))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-subj-phrase has 
  (instance-of (NL-Slot-Group))
  (domain (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(text-subj-phrase-of has 
  (range (Thing))
  (instance-of (NL-Slot-Group)))

;;; ----------

(text-toward has 
  (text-slot-of (toward))
  (instance-of (NL-Slot-Group))
  (domain (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t)))

;;; ----------

(text-toward-of has 
  (range (Event))
  (instance-of (NL-Slot-Group)))

;;; ----------

(texture has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Texture-Value))
  (categorical-constant-class (Texture-Constant))
  (inverse (texture-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "texture" 1 "n")))))

;;; ----------

(Texture-Constant has 
  (superclasses (Constant))
  (instances (*smooth
              *rough))
  (categorical-constant-class-of (texture)))

;;; ----------

(texture-of has 
  (inverse (texture))
  (range (Tangible-Entity))
  (domain (Texture-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Texture-Value has 
  (superclasses (Property-Value))
  (range-of (texture))
  (domain-of (texture-of)))

;;; ----------

(thickness has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Thickness-Scale))
  (scalar-constant-class (Thickness-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (thickness-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "thickness" 1 "n")))))

;;; ----------

(Thickness-Constant has 
  (superclasses (Constant))
  (instances (*thin
              *thick))
  (wn20-synset ((:set (:triple "thickness" 1 "n"))))
  (scalar-constant-class-of (thickness))
  (element-type-of (*thin-thick-scale)))

;;; ----------

(thickness-of has 
  (inverse (thickness))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Thickness-Scale has 
  (superclasses (Scale))
  (scale-class-of (thickness))
  (instances (*thin-thick-scale)))

;;; ----------

(Thing has 
  (subclasses (Partition
               Number
               String
               Class
               Situation
               Temporal-Entity
               System
               Structure
               Slot
               Role
               Property-Group
               KM-Class
               Event
               Entity))
  (range-of (base
             caused-by-class-of
             cmap-correspondence-of
             component
             defeated-by-class-of
             description-of
             doc-file-of
             edit-state-of
             element
             feature-slot-of
             has-example
             is-example-of
             identifier-of
             importance-of
             information-content
             input-of
             intensity-of
             kreq-list-of
             output-of
             primary-slot-of
             priority-of
             reference-class
             related-to
             text-related-to
             required-slot-of
             secondary-slot-of
             skolem-string-of
             soft-pcs-list
             test-case-of
             text-argslots-of
             text-base-phrase-of
             text-def-determiner-of
             text-def-head-of
             text-definition-sentence-of
             text-description-of
             text-dobj-phrase-of
             text-existential-there-of
             text-gen-of
             text-head-of
             text-indef-determiner-of
             text-indef-head-of
             text-indef-phrase-of
             text-phrase-of
             text-postmods-of
             text-postmodslots-of
             text-premods-of
             text-premodslots-of
             text-sentence-of
             text-slot-of
             text-subj-phrase-of
             typical-instance
             typical-instance-of
             user-assumption-of
             user-comment-of
             user-description-of
             viewed-as
             view-of
             viewpoint-multislot-type
             viewpoint-target
             wn16-synset-of
             wn20-synset-of))
  (domain-of (base-of
              caused-by-class
              cmap-correspondence
              component-of
              defeated-by-class
              description
              doc-file
              edit-state
              element-of
              feature-slot
              has-example
              is-example-of
              identifier
              importance
              information-content-of
              input
              intensity
              kreq-list
              output
              primary-slot
              priority
              reference-class-of
              related-to
              text-related-to
              required-slot
              secondary-slot
              skolem-string
              soft-pcs-list-of
              test-case
              text-argslots
              text-base-phrase
              text-def-determiner
              text-def-head
              text-definition-sentence
              text-description
              text-dobj-phrase
              text-existential-there
              text-gen
              text-head
              text-indef-determiner
              text-indef-head
              text-indef-phrase
              text-phrase
              text-postmods
              text-postmodslots
              text-premods
              text-premodslots
              text-sentence
              text-slot
              text-subj-phrase
              typical-instance
              typical-instance-of
              user-assumption
              user-comment
              user-description
              viewed-as
              view-of
              viewpoint-multislot-type-of
              viewpoint-target-of
              wn16-synset
              wn20-synset)))

(every Thing has 
  (has-example ((if ((the instance-of of Self) = Thing) then (#'(LAMBDA () (FIND-EXAMPLE-FOR-CONCEPT 'Self))) else (the has-example of (#'(LAMBDA () (CAR (KM0 '(the instance-of of Self))))))))))

;;; ----------

(Throw has 
  (superclasses (Unobstruct))
  (wn20-synset ((:set (:triple "throw" 1 "v")))))

(every Throw has 
  (first-subevent ((the Propel subevent of Self)))
  (subevent ((a Propel with (agent ((the agent of Self))) (object ((the object of Self))) (destination ((the destination of Self))) (toward ((the toward of Self))) (next-event ((the Let-Go-Of subevent of Self))))
             (a Let-Go-Of with (agent ((the agent of Self))) (object ((the object of Self))) (causes ((a Fall with (object ((the object of Self)))))))))
  (text-active-verbseq-sg ("throws"))
  (text-active-verbseq-pl ("throw"))
  (text-passive-verbseq-sg ("is thrown"))
  (text-passive-verbseq-pl ("are thrown"))
  (text-argslots ((:seq destination)))
  (text-nominalization ("throwing")))

;;; ----------

(time-after has 
  (description ("FRAME time-after FILLER means that FRAME is wholly after FILLER, i.e. the start of FRAME is later than the end of FILLER."))
  (text-gloss ("occurs after"))
  (inverse (time-before))
  (range (Temporal-Entity))
  (domain (Temporal-Entity))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-at has 
  (instance-of (Temporal-Relation))
  (domain (Event))
  (range (Time-Instant))
  (inverse (time-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("occurs at")))

;;; ----------

(time-before has 
  (instance-of (Temporal-Relation))
  (description ("FRAME time-before FILLER means that FRAME is wholly before FILLER, i.e. the end of FRAME is earlier than the start of FILLER."))
  (domain (Temporal-Entity))
  (range (Temporal-Entity))
  (inverse (time-after))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("occurs before")))

;;; ----------

(time-beginning-of has 
  (inverse (time-begins))
  (range (Temporal-Entity))
  (domain (Time-Instant))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-begins has 
  (instance-of (Temporal-Relation))
  (domain (Temporal-Entity))
  (range (Time-Instant))
  (inverse (time-beginning-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (text-gloss ("begins at")))

;;; ----------

(time-begins-or-in has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Instant))
  (inverse (time-is-beginning-or-inside))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("begins at")))

;;; ----------

(time-between has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Instant))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (text-gloss ("occurs during")))

;;; ----------

(time-between-of has 
  (range (Time-Interval))
  (domain (Time-Instant))
  (instance-of (Slot)))

;;; ----------

(time-contains has 
  (inverse (time-during))
  (range (Situation
          Event))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-day has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-day-of has 
  (range (Time-Instant))
  (domain (Number))
  (instance-of (Interface-Slot)))

;;; ----------

(time-day-of-week has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Day-Constant))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-day-of-week-of has 
  (range (Time-Instant))
  (domain (Day-Constant))
  (instance-of (Interface-Slot)))

;;; ----------

(time-during has 
  (primary-slot-of (Event))
  (instance-of (Temporal-Relation))
  (domain (Event
           Situation))
  (range (Time-Interval))
  (inverse (time-contains))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (text-gloss ("occurs during")))

;;; ----------

(time-end-of has 
  (inverse (time-ends))
  (range (Temporal-Entity))
  (domain (Time-Instant))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-ends has 
  (instance-of (Temporal-Relation))
  (domain (Temporal-Entity))
  (range (Time-Instant))
  (inverse (time-end-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (text-gloss ("ends at")))

;;; ----------

(time-hour has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-hour-of has 
  (range (Time-Instant))
  (domain (Number))
  (instance-of (Interface-Slot)))

;;; ----------

(time-inside has 
  (instance-of (Temporal-Relation))
  (description ("FRAME time-inside FILLER means that FRAME, a Time-Interval, temporally includes FILLER, a Time-Point.  Specifically, FILLER is (a) later than or simultaneous with the start of FRAME, and (b), earlier than or simultaneous with the end of FRAME."))
  (domain (Time-Interval))
  (range (Time-Instant))
  (inverse (time-is-inside))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(Time-Instant has 
  (superclasses (Temporal-Entity))
  (domain-of (time-year
              time-month
              time-day
              time-day-of-week
              time-hour
              time-minute
              time-second
              time-zone
              time-of
              time-is-beginning-or-inside
              time-beginning-of
              time-between-of
              time-end-of
              time-is-inside
              time-value))
  (range-of (time-year-of
             time-month-of
             time-day-of
             time-day-of-week-of
             time-hour-of
             time-minute-of
             time-second-of
             time-zone-of
             time-at
             time-begins-or-in
             time-begins
             time-between
             time-ends
             time-inside
             time-value-of))
  (test-case ('((*rightthisminute has (instance-of (Time-Instant)) (time-value ((:pair 15 *hour) (:pair 27 *minute) (:pair 0 *second) (:pair 16 *day) (:pair 12 *month) (:pair 2003 *year) *Tuesday *CST))) (*the-month-of-Dec-2003 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2003 *year) (:pair 12 *month) (:pair 1 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2003 *year) (:pair 12 *month) (:pair 31 *day))))))) ((the time-is-inside of *rightthisminute) includes *the-month-of-Dec-2003))))
  (wn20-synset ((:set (:triple "point_in_time" 1 "n") (:triple "point" 6 "n")))))

(every Time-Instant has 
  (time-begins (Self))
  (time-ends (Self))
  (time-year ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *year)))))
  (time-month ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *month)))))
  (time-day ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *day)))))
  (time-day-of-week ((oneof (the time-value of Self) where (It isa Day-Constant))))
  (time-hour ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *hour)))))
  (time-minute ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *minute)))))
  (time-second ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *second)))))
  (time-zone ((oneof (the time-value of Self) where (It isa Time-Zone-Constant))))
  (time-value ((((if (has-value (the time-year of Self)) then ((:pair (the time-year of Self) *year)))) && ((if (has-value (the time-month of Self)) then ((:pair (the time-month of Self) *month)))) && ((if (has-value (the time-day of Self)) then ((:pair (the time-day of Self) *day)))) && ((if (has-value (the time-day-of-week of Self)) then (the time-day-of-week of Self))) && ((if (has-value (the time-hour of Self)) then ((:pair (the time-hour of Self) *hour)))) && ((if (has-value (the time-minute of Self)) then ((:pair (the time-minute of Self) *minute)))) && ((if (has-value (the time-second of Self)) then ((:pair (the time-second of Self) *second)))) && ((if (has-value (the time-zone of Self)) then (the time-zone of Self))) && ((constraint ((((the1 of TheValue) isa Number) and ((the2 of TheValue) isa UoM-Time)) or (TheValue isa Day-Constant) or (TheValue isa Time-Zone-Constant)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *year))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *year))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *month))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *month))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *day))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *day))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *hour))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *hour))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *minute))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *minute))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *second))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *second))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where (It isa Day-Constant))) then ((the number of (allof (the time-value of Self) where (It isa Day-Constant))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where (It isa Time-Zone-Constant))) then ((the number of (allof (the time-value of Self) where (It isa Time-Zone-Constant))) <= 1) else t)))) && ((constraint ((if ((not (TheValue isa Day-Constant)) and (not (TheValue isa Time-Zone-Constant))) then (if ((the2 of TheValue) = *year) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) >= 1000) and ((the1 of TheValue) <= 9999)) else (if ((the2 of TheValue) = *month) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) <= 12)) else (if ((the2 of TheValue) = *day) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) <= 31)) else (if ((the2 of TheValue) = *hour) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) < 24)) else (if ((the2 of TheValue) = *minute) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) < 60)) else (if ((the2 of TheValue) = *second) then ((the1 of TheValue) < 60) else t)))))) else t)))))))
  (time-is-inside ((allof (the all-instances of Time-Interval) where (((the time-begins of It) time-lte Self) and ((the time-ends of It) time-gte Self)))))
  (text-gen (((?dow == (the name of (oneof (the time-value of Self) where (It isa Day-Constant)))) and (?tz == (oneof (the time-value of Self) where (It isa Time-Zone-Constant))) and (?day == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *day)))) and (?month == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *month)))) and (?year == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *year)))) and (?hour == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *hour)))) and (?minute == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *minute)))) and (?second == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *second)))) and (make-phrase (:seq ?dow (if ((has-value ?dow) and (has-value (oneof (the time-value of Self) where (the2 of It)))) then (:seq "nospace" ",")) (if (has-value ?month) then (theN ?month of (:seq "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))) (if (has-value ?month) then ?day else (if (has-value ?day) then (:seq "the" (theN ?day of (:seq "1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th" "11th" "12th" "13th" "14th" "15th" "16th" "17th" "18th" "19th" "20th" "21st" "22nd" "23rd" "24th" "25th" "26th" "27th" "28th" "29th" "30th" "31st"))))) (if ((has-value (:set ?month ?day)) and (has-value (:set ?year ?hour ?minute ?second))) then (:seq "nospace" ",")) ?year (if ((has-value ?year) and (has-value (:set ?hour ?minute ?second))) then (:seq "nospace" ",")) ?hour (if (has-value ?hour) then (:seq "nospace" ":" "nospace")) (if (has-value ?minute) then (if (has-value ?hour) then (:seq (if (?minute < 10) then (:seq "0" "nospace")) ?minute) else (:seq ?minute "nospace" "m")) else (if (has-value ?hour) then "00")) (if (has-value ?second) then (if (has-value ?minute) then (if (has-value ?hour) then (:seq "nospace" ":" "nospace" (if (?second < 10) then (:seq "0" "nospace")) ?second) else (:seq "nospace" ?second "nospace" "s")) else (:seq ?second "nospace" "s"))) ?tz))))))

;;; ----------

(time-int-after has 
  (inverse (time-int-before))
  (range (Time-Interval))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-int-before has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-after))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(time-int-contains has 
  (description ("FRAME time-int-contains FILLER means that the Time-Interval FRAME temporally wholly contains the Time-Interval FILLER.  Specifically, the start of FRAME is earlier than the start of FILLER and the end of FRAME is later than the end of FILLER."))
  (inverse (time-int-during))
  (range (Time-Interval))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-int-during has 
  (instance-of (Temporal-Relation))
  (description ("FRAME time-int-during FILLER means that the Time-Interval FRAME is temporally wholly contained by the Time-Interval FILLER.  Specifically, the start of FRAME is later than the start of FILLER and the end of FRAME is earlier than the end of FILLER."))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-contains))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(time-int-equals has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-equals))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(time-int-finished-by has 
  (inverse (time-int-finishes))
  (range (Time-Interval))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-int-finishes has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-finished-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(time-int-meets has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-met-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(time-int-met-by has 
  (inverse (time-int-meets))
  (range (Time-Interval))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-int-overlapped-by has 
  (inverse (time-int-overlaps))
  (range (Time-Interval))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-int-overlaps has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-overlapped-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(time-int-started-by has 
  (inverse (time-int-starts))
  (range (Time-Interval))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-int-starts has 
  (instance-of (Temporal-Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (time-int-started-by))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(Time-Interval has 
  (superclasses (Temporal-Entity))
  (wn20-synset ((:set (:triple "time_interval" 1 "n") (:triple "interval" 1 "n"))))
  (test-case ('((*UT-Thanksgiving-Break-2004-Nov-25th-thru-27th has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 11 *month) (:pair 25 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 11 *month) (:pair 27 *day))))))) (*UT-Spring-Break-2005-March-14th-thru-19th has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 14 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 19 *day))))))) (*UT-Summer-Add-Drop-Period-2005-May-24-thru-26 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 5 *month) (:pair 24 *day))))))) ((the time-before of *UT-Thanksgiving-Break-2004-Nov-25th-thru-27th) includes *UT-Spring-Break-2005-March-14th-thru-19th) ((the time-after of *UT-Summer-Add-Drop-Period-2005-May-24-thru-26) includes *UT-Spring-Break-2005-March-14th-thru-19th) (*2005-March-15-Noon has (instance-of (Time-Instant)) (time-value ((:pair 12 *hour) (:pair 0 *minute) (:pair 0 *second) (:pair 15 *day) (:pair 3 *month) (:pair 2005 *year)))) ((the time-inside of *UT-Spring-Break-2005-March-14th-thru-19th) includes *2005-March-15-Noon) (*UT-Spring-Semester-2005 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 1 *month)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 5 *month))))))) ((the time-int-during of *UT-Spring-Break-2005-March-14th-thru-19th) includes *UT-Spring-Semester-2005) (*UT-Fall-Semester-2004 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 8 *month)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 12 *month))))))) ((the time-int-contains of *UT-Fall-Semester-2004) includes *UT-Thanksgiving-Break-2004-Nov-25th-thru-27th) (*Time-Overlapping-Start-Of-UT-Spring-Break-2005 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 12 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 15 *day))))))) (*Time-Overlapping-End-Of-UT-Spring-Break-2005 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 17 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 21 *day))))))) ((the time-int-overlaps of *Time-Overlapping-Start-Of-UT-Spring-Break-2005) includes *UT-Spring-Break-2005-March-14th-thru-19th) ((the time-int-overlapped-by of *Time-Overlapping-End-Of-UT-Spring-Break-2005) includes *UT-Spring-Break-2005-March-14th-thru-19th) (not ((the time-int-overlaps of *UT-Thanksgiving-Break-2004-Nov-25th-thru-27th) includes *UT-Fall-Semester-2004)))))
  (domain-of (duration
              time-begins-or-in
              time-between
              time-contains
              time-inside
              time-int-before
              time-int-after
              time-int-during
              time-int-contains
              time-int-equals
              time-int-finishes
              time-int-finished-by
              time-int-meets
              time-int-met-by
              time-int-overlaps
              time-int-overlapped-by
              time-int-starts
              time-int-started-by
              time-of-existence-of))
  (range-of (duration-of
             time-is-beginning-or-inside
             time-between-of
             time-during
             time-is-inside
             time-int-before
             time-int-after
             time-int-during
             time-int-contains
             time-int-equals
             time-int-finishes
             time-int-finished-by
             time-int-meets
             time-int-met-by
             time-int-overlaps
             time-int-overlapped-by
             time-int-starts
             time-int-started-by
             time-of-existence)))

(every Time-Interval has 
  (time-begins-or-in ((:set (the time-begins of Self) (the time-inside of Self))))
  (time-between ((:set (the time-begins of Self) (the time-ends of Self))))
  (time-before ((allof (the all-instances of Time-Interval) where ((the time-ends of Self) time-lt (the time-begins of It)))))
  (time-after ((allof (the all-instances of Time-Interval) where ((the time-ends of It) time-lt (the time-begins of Self)))))
  (time-inside ((allof (the all-instances of Time-Instant) where (((the time-begins of Self) time-lte It) and ((the time-ends of Self) time-gte It)))))
  (time-int-during ((allof (the all-instances of Time-Interval) where (((the time-begins of It) time-lt (the time-begins of Self)) and ((the time-ends of It) time-gt (the time-ends of Self))))))
  (time-int-contains ((allof (the all-instances of Time-Interval) where (((the time-begins of Self) time-lt (the time-begins of It)) and ((the time-ends of Self) time-gt (the time-ends of It))))))
  (time-int-overlaps ((allof (the all-instances of Time-Interval) where (((the time-ends of Self) time-gt (the time-begins of It)) and ((the time-ends of It) time-gt (the time-ends of Self)) and ((the time-begins of It) time-gt (the time-begins of Self))))))
  (time-int-overlapped-by ((allof (the all-instances of Time-Interval) where (((the time-ends of It) time-gt (the time-begins of Self)) and ((the time-ends of Self) time-gt (the time-ends of It)) and ((the time-begins of Self) time-gt (the time-begins of It)))))))

;;; ----------

(time-is-beginning-or-inside has 
  (inverse (time-begins-or-in))
  (range (Time-Interval))
  (domain (Time-Instant))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-is-inside has 
  (inverse (time-inside))
  (range (Time-Interval))
  (domain (Time-Instant))
  (instance-of (Temporal-Relation))
  (description ("FRAME time-is-inside FILLER means that FRAME, a Time-Point, is temporally within FILLER, a Time-Interval.  Specifically, FRAME is (a), later than or simultaneous with the start of FILLER, and (b), earlier than or simultaneous with the end of FILLER.")))

;;; ----------

(time-minute has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-minute-of has 
  (range (Time-Instant))
  (domain (Number))
  (instance-of (Interface-Slot)))

;;; ----------

(time-month has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-month-of has 
  (range (Time-Instant))
  (domain (Number))
  (instance-of (Interface-Slot)))

;;; ----------

(time-of has 
  (inverse (time-at))
  (range (Event))
  (domain (Time-Instant))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-of-existence has 
  (instance-of (Temporal-Relation))
  (domain (Entity
           Role))
  (range (Time-Interval))
  (inverse (time-of-existence-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (text-gloss ("exists during")))

;;; ----------

(time-of-existence-of has 
  (inverse (time-of-existence))
  (range (Role
          Entity))
  (domain (Time-Interval))
  (instance-of (Temporal-Relation)))

;;; ----------

(time-second has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-second-of has 
  (range (Time-Instant))
  (domain (Number))
  (instance-of (Interface-Slot)))

;;; ----------

(time-value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Time-Instant))
  (inverse (time-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t)))

;;; ----------

(time-value-of has 
  (inverse (time-value))
  (range (Time-Instant))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(time-year has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-year-of has 
  (range (Time-Instant))
  (domain (Number))
  (instance-of (Interface-Slot)))

;;; ----------

(time-zone has 
  (instance-of (Interface-Slot))
  (domain (Time-Instant))
  (range (Time-Zone-Constant))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(Time-Zone-Constant has 
  (range-of (time-zone))
  (domain-of (time-zone-of))
  (superclasses (Constant))
  (instances (*IDLW
              *HST
              *AKST
              *AKDT
              *PST
              *PDT
              *MST
              *MDT
              *CST
              *CDT
              *EST
              *EDT
              *AST
              *ADT
              *NST
              *NDT
              *UTC
              *GMT
              *WET
              *IST
              *WEST
              *CET
              *CEST
              *EET
              *EEST
              *MSK
              *MSD
              *GET
              *GEST
              *KGT
              *KGST
              *CXT
              *AWST
              *JST
              *KST
              *KDT
              *ACST
              *ACDT
              *AEST
              *AEDT
              *IDLE
              *NZST
              *NZDT)))

;;; ----------

(time-zone-of has 
  (range (Time-Instant))
  (domain (Time-Zone-Constant))
  (instance-of (Interface-Slot)))

;;; ----------

(Tissue has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "tissue" 2 "n") (:triple "tissue_paper" 1 "n")))))

;;; ----------

(to-value has 
  (instance-of (PropertyProperty))
  (domain (Increase
           Decrease))
  (range (Property-Value))
  (inverse (to-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t)))

;;; ----------

(to-value-of has 
  (inverse (to-value))
  (range (Decrease
          Increase))
  (domain (Property-Value))
  (instance-of (PropertyProperty)))

;;; ----------

(toward has 
  (secondary-slot-of (Move))
  (instance-of (Spatial-Relation))
  (domain (Event))
  (range (Spatial-Entity))
  (inverse (toward-of))
  (text-slot (text-toward))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(toward-of has 
  (inverse (toward))
  (range (Event))
  (domain (Spatial-Entity))
  (instance-of (Spatial-Relation))
  (text-gloss ("is the target of")))

;;; ----------

(Training has 
  (superclasses (Activity))
  (wn20-synset ((:set (:triple "training" 1 "n") (:triple "preparation" 6 "n") (:triple "grooming" 1 "n") (:triple "activity" 1 "n")))))

(every Training has 
  (text-nominalization ("training")))

;;; ----------

(trait has 
  (instance-of (EntityProperty))
  (domain (Entity))
  (range (Trait-Value))
  (categorical-constant-class (Trait-Constant))
  (inverse (trait-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "trait" 1 "n")))))

;;; ----------

(Trait-Constant has 
  (superclasses (Constant))
  (instances (*submissive
              *aggressive
              *dishonest
              *honest
              *lazy
              *tireless
              *vulnerable))
  (categorical-constant-class-of (trait)))

;;; ----------

(trait-of has 
  (inverse (trait))
  (range (Entity))
  (domain (Trait-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Trait-Value has 
  (superclasses (Property-Value))
  (range-of (trait))
  (domain-of (trait-of)))

;;; ----------

(Transfer has 
  (subclasses (Receive
               Lose
               Deliver))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 donor
                 recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing transfered")
                        (:seq agent "causer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Us has (instance-of (Tangible-Entity))) (*Alaska has (instance-of (Tangible-Entity))) (*Russia has (instance-of (Tangible-Entity)) (possesses (*Alaska))) (a Transfer with (donor (*Russia)) (recipient (*Us)) (object (*Alaska))) (do-and-next (thelast Transfer)) (the text-gen of (thelast Transfer)) ((the is-possessed-by of *Alaska) = *Us) ((the possesses of *Russia) /= *Alaska) (not (*Alaska &? *Russia)))))
  (wn16-synset ((:set (:triple "transfer" 5 "v"))))
  (wn20-synset ((:set (:triple "transfer" 5 "v")))))

(every Transfer has 
  (object ((a Entity)))
  (donor ((must-be-a Tangible-Entity)))
  (recipient ((must-be-a Entity)
              (if (has-value (the donor of Self)) then (excluded-values (the donor of Self)))))
  (soft-pcs-list ((if (has-value (the donor of Self)) then (forall (the donor of Self) (:triple (the donor of Self) abuts (the object of Self))))))
  (pcs-list ((if (has-value (the donor of Self)) then (forall (the donor of Self) ((:triple It possesses (the object of Self) [Transfer-pcs-1]))))))
  (del-list ((if (has-value (the donor of Self)) then (forall (the donor of Self) ((:triple It possesses (the object of Self) [Transfer-del-1]))))))
  (add-list ((if (has-value (the recipient of Self)) then (forall (the recipient of Self) ((:triple It possesses (the object of Self) [Transfer-add-1]))))))
  (text-active-verbseq-sg ("transfers"))
  (text-active-verbseq-pl ("transfer"))
  (text-passive-verbseq-sg ("gets transferred"))
  (text-passive-verbseq-pl ("get transferred"))
  (text-donor ((if (has-value (the donor of Self)) then ("from"))))
  (text-recipient ((if (has-value (the recipient of Self)) then ("to"))))
  (text-argslots ((:seq donor recipient instrument)))
  (preparatory-event ((:default (a Obtain with (recipient ((the donor of Self))) (object ((the object of Self)))))))
  (text-nominalization ("transfer")))

;;; ----------

(Transmit has 
  (superclasses (Move))
  (required-slot (object))
  (primary-slot (agent
                 recipient))
  (test-case ('((*Beep has (instance-of (Entity))) (*Safety-Module has (instance-of (Tangible-Entity))) (*Gary has (instance-of (Tangible-Entity))) (*Transmit has (instance-of (Transmit)) (agent (*Safety-Module)) (recipient (*Gary)) (object (*Beep))) (do-and-next *Transmit) (the text-gen of (thelast Transmit)))))
  (wn16-synset ((:set (:triple "transmit" 1 "v") (:triple "transmit" 2 "v") (:triple "transmit" 4 "v") (:triple "convey" 3 "v") (:triple "convey" 4 "v") (:triple "communicate" 3 "v") (:triple "conduct" 5 "v") (:triple "carry" 3 "v") (:triple "channel" 1 "v") (:triple "transfer" 7 "v") (:triple "transport" 5 "v") (:triple "channel" 3 "v") (:triple "channelize" 1 "v"))))
  (wn20-synset ((:set (:triple "transmit" 1 "v") (:triple "transmit" 2 "v") (:triple "transmit" 4 "v") (:triple "convey" 5 "v") (:triple "communicate" 1 "v") (:triple "conduct" 4 "v") (:triple "carry" 3 "v") (:triple "channel" 1 "v") (:triple "transfer" 7 "v") (:triple "transport" 5 "v") (:triple "channel" 3 "v") (:triple "channelize" 3 "v")))))

(every Transmit has 
  (object ((a Tangible-Entity with (plays ((a Signal))))))
  (recipient ((must-be-a Tangible-Entity)))
  (destination ((the location of (the recipient of Self))))
  (agent ((must-be-a Tangible-Entity)))
  (base ((must-be-a Tangible-Entity with (plays ((a Medium))))))
  (instrument ((must-be-a Tangible-Entity with (plays ((a Carrier))))))
  (text-nominalization ("transmission")))

;;; ----------

(Trespass has 
  (subclasses (Invade))
  (superclasses (Go-To
                 Unauthorized))
  (required-slot (agent
                  object
                  destination))
  (test-case ('((new-situation) (*Cletus has (instance-of (Entity))) (*CletusesProperty has (instance-of (Spatial-Entity)) (is-possessed-by (*Cletus))) (*Martian has (instance-of (Entity))) (a Trespass with (agent (*Martian)) (destination (*CletusesProperty))) ((the is-possessed-by of (the destination of (thelast Trespass))) = *Cletus) ((the prevents of (the has-goal of *Cletus)) includes (thelast Trespass)) (do-and-next (thelast Trespass)) ((the location of *Martian) = *CletusesProperty))))
  (wn20-synset ((:set (:triple "trespass" 1 "v") (:triple "intrude" 2 "v") (:triple "transgress" 4 "v") (:triple "trespass" 5 "v") (:triple "overstep" 1 "v")))))

(every Trespass has 
  (destination ((a Spatial-Entity with (is-possessed-by ((the is-goal-of of (the inhibited-by of Self)))))))
  (text-active-verbseq-sg ("trespasses"))
  (text-active-verbseq-pl ("trespass"))
  (text-argslots ((:seq destination)))
  (text-destination ("on"))
  (text-nominalization ("trespassing")))

;;; ----------

(truth has 
  (instance-of (EntityProperty))
  (domain (Information))
  (range (Truth-Value))
  (categorical-constant-class (Truth-Constant))
  (inverse (truth-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "truth" 2 "n") (:triple "truth" 4 "n") (:triple "the true" 1 "n") (:triple "verity" 1 "n") (:triple "accuracy" 1 "n")))))

;;; ----------

(Truth-Constant has 
  (superclasses (Constant))
  (instances (*true
              *false))
  (categorical-constant-class-of (truth)))

;;; ----------

(truth-of has 
  (inverse (truth))
  (range (Information))
  (domain (Truth-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Truth-Value has 
  (superclasses (Property-Value))
  (range-of (truth))
  (domain-of (truth-of)))

;;; ----------

(typical-instance has 
  (instance-of (KM-Slot-Group))
  (domain (Thing))
  (range (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N))
  (shaken-ui-hidden-slot (t)))

;;; ----------

(typical-instance-of has 
  (range (Thing))
  (domain (Thing))
  (instance-of (KM-Slot-Group)))

;;; ----------

(Unauthorized has 
  (subclasses (Trespass))
  (superclasses (Cliche))
  (test-case ('((new-situation) (Kiss has (superclasses (Action))) (*me has (instance-of (Entity))) (*her has (instance-of (Entity))) (*herFather has (instance-of (Entity)) (has-goal ((a Goal with (prevents ((a Kiss with (agent (*me)) (object (*her))))))))) (the prevents of (the has-goal of *herFather)) ((thelast Kiss) isa Unauthorized))))
  (wn20-synset ((:set (:triple "unauthorized" 1 "a") (:triple "unauthorised" 1 "a") (:triple "unauthorized" 2 "a") (:triple "unauthorised" 2 "a") (:triple "wildcat" 2 "a")))))

(every Unauthorized has-definition 
  (instance-of (Event))
  (agent ((a Entity)))
  (prevented-by ((a Event with (is-goal-of ((a Entity)))))))

(every Unauthorized has 
  (agent ((a Entity)))
  (prevented-by ((a Event with (is-goal-of ((a Entity))))))
  (inhibited-by ((the prevented-by of Self)))
  (text-definition-sentence (()))
  (text-definition-sentence-of (()))
  (text-nominalization (()))
  (text-nominalization-of (()))
  (text-content (()))
  (text-content-of (()))
  (text-existential-there (()))
  (text-existential-there-of (()))
  (text-toward (()))
  (text-toward-of (()))
  (text-subj (()))
  (text-subj-of (()))
  (text-subj-phrase (()))
  (text-subj-phrase-of (()))
  (text-slot (()))
  (text-slot-of (()))
  (text-sentence (()))
  (text-sentence-of (()))
  (text-premodslots (()))
  (text-premodslots-of (()))
  (text-premods (()))
  (text-premods-of (()))
  (text-postmodslots (()))
  (text-postmodslots-of (()))
  (text-postmods (()))
  (text-postmods-of (()))
  (text-phrase (()))
  (text-phrase-of (()))
  (text-passive-verbseq (()))
  (text-passive-verbseq-of (()))
  (text-passive-verbseq-sg (()))
  (text-passive-verbseq-sg-of (()))
  (text-passive-verbseq-pl (()))
  (text-passive-verbseq-pl-of (()))
  (text-passive-sentence (()))
  (text-passive-sentence-of (()))
  (text-passive-phrase (()))
  (text-passive-phrase-of (()))
  (text-particle (()))
  (text-particle-of (()))
  (text-number (()))
  (text-number-of (()))
  (text-nom-sentence (()))
  (text-nom-sentence-of (()))
  (text-indef-head (()))
  (text-indef-head-of (()))
  (text-indef-determiner (()))
  (text-indef-determiner-of (()))
  (text-head (()))
  (text-head-of (()))
  (text-gen (()))
  (text-gen-of (()))
  (text-dobj (()))
  (text-dobj-of (()))
  (text-dobj-phrase (()))
  (text-dobj-phrase-of (()))
  (text-description (()))
  (text-description-of (()))
  (text-def-head (()))
  (text-def-head-of (()))
  (text-def-determiner (()))
  (text-def-determiner-of (()))
  (text-base-phrase (()))
  (text-base-phrase-of (()))
  (text-arguments (()))
  (text-arguments-of (()))
  (text-argslots (()))
  (text-argslots-of (()))
  (text-active-verbseq (()))
  (text-active-verbseq-of (()))
  (text-active-verbseq-sg (()))
  (text-active-verbseq-sg-of (()))
  (text-active-verbseq-pl (()))
  (text-active-verbseq-pl-of (()))
  (text-active-sentence (()))
  (text-active-sentence-of (()))
  (text-active-phrase (()))
  (text-active-phrase-of (()))
  (text-subevent-of (()))
  (text-subevent (()))
  (slot-gloss (()))
  (slot-gloss-of (()))
  (text-site (()))
  (text-site-of (()))
  (text-resulting-state (()))
  (text-resulting-state-of (()))
  (text-result (()))
  (text-result-of (()))
  (text-recipient (()))
  (text-recipient-of (()))
  (text-raw-material (()))
  (text-raw-material-of (()))
  (text-is-possessed-by (()))
  (text-possesses (()))
  (text-path (()))
  (text-path-of (()))
  (text-origin (()))
  (text-origin-of (()))
  (text-object (()))
  (text-object-of (()))
  (text-material (()))
  (text-material-of (()))
  (text-is-west-of (()))
  (text-is-east-of (()))
  (text-is-southwest-of (()))
  (text-is-northeast-of (()))
  (text-is-over (()))
  (text-is-under (()))
  (text-is-outside (()))
  (text-is-outside-of (()))
  (text-is-oriented-toward (()))
  (text-is-oriented-toward-of (()))
  (text-is-opposite (()))
  (text-is-on (()))
  (text-has-on-it (()))
  (text-is-northwest-of (()))
  (text-is-southeast-of (()))
  (text-is-north-of (()))
  (text-is-south-of (()))
  (text-is-near (()))
  (text-is-near-of (()))
  (text-is-inside (()))
  (text-encloses (()))
  (text-is-facing (()))
  (text-is-faced-by (()))
  (text-is-between (()))
  (text-is-between-of (()))
  (text-is-beside (()))
  (text-is-behind (()))
  (text-is-in-front-of (()))
  (text-is-at (()))
  (text-is-at-of (()))
  (text-is-along (()))
  (text-is-along-of (()))
  (text-is-above (()))
  (text-is-below (()))
  (text-instrument (()))
  (text-instrument-of (()))
  (text-is-part-of (()))
  (text-has-part (()))
  (text-donor (()))
  (text-donor-of (()))
  (text-destination (()))
  (text-destination-of (()))
  (text-causes (()))
  (text-caused-by (()))
  (text-beneficiary (()))
  (text-beneficiary-of (()))
  (text-base (()))
  (text-base-of (()))
  (text-away-from (()))
  (text-away-from-of (()))
  (text-agent (()))
  (text-agent-of (()))
  (text-abuts (()))
  (text-abuts-of (())))

;;; ----------

(Unblock has 
  (defeated-by-class-of (Be-Blocked))
  (caused-by-class-of (Be-Unblocked))
  (subclasses (Open))
  (superclasses (Make-Accessible))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the place blocked")
                        (:seq agent "blocker")))
  (test-case ('((*p1 has (instance-of (Place))) (a Block with (object (*p1))) (try-do-and-next (thelast Block)) (the text-gen of (thelast Block)) (has-value (the Be-Blocked object-of of *p1)) (a Move with (object (*c1)) (path (*p1))) (not (try-do (thelast Move))) (the text-gen of (thelast Move)) (a Unblock with (object (*p1))) (try-do-and-next (thelast Unblock)) (the text-gen of (thelast Unblock)) (not (has-value (the Be-Blocked object-of of *p1))) (try-do (thelast Move)) (the text-gen of (thelast Move)))))
  (wn16-synset ((:set (:triple "clear" 2 "v"))))
  (wn20-synset ((:set (:triple "clear" 2 "v")))))

(every Unblock has 
  (object ((a Spatial-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Blocked)))))
  (pcs-list ((forall (the object of Self) ((:triple (It) object-of (a Be-Blocked) [Unblock-pcs-1])))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Unblock-del-1]) (if (has-value (the instrument of It)) then (:triple It instrument (the instrument of It) [Unblock-del-2]))))))
  (text-active-verbseq-sg ("unblocks"))
  (text-active-verbseq-pl ("unblock"))
  (text-passive-verbseq-sg ("gets unblocked"))
  (text-passive-verbseq-pl ("get unblocked"))
  (text-argslots ((:seq base instrument path result)))
  (preparatory-event ((:default (a Block with (object ((the object of Self)))))))
  (text-nominalization ("unblocking")))

;;; ----------

(unit has 
  (instance-of (CLIB-Slot-Group))
  (domain (Cardinal))
  (range (Unit-of-Measurement))
  (inverse (unit-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(Unit-Conversion has 
  (superclasses (Method))
  (description ("converts one property value directed by a given unit of measurement"))
  (domain-of (target-unit))
  (range-of (target-unit-of)))

(every Unit-Conversion has 
  (input ((a Property-Value)))
  (target-unit ((a Unit-of-Measurement)))
  (output (#'(LAMBDA () (CONVERT-CARD-VALS (KM0 '(the input of Self)) (KM0 '(the target-unit of Self)))))))

;;; ----------

(unit-of has 
  (inverse (unit))
  (range (Cardinal))
  (domain (Unit-of-Measurement))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Unit-of-Measurement has 
  (superclasses (Property-Group))
  (subclasses (UoM-Worth
               UoM-Volume
               UoM-Voltage
               UoM-Velocity
               UoM-Unitless
               UoM-Time
               UoM-Temperature
               UoM-Rotational-Rate
               UoM-Rate
               UoM-Quantity
               UoM-Pressure
               UoM-Power
               UoM-Momentum
               UoM-Moment-of-Inertia
               UoM-Mass
               UoM-Luminous-Intensity
               UoM-Luminous-Flux
               UoM-Luminance
               UoM-Length
               UoM-Intensity
               UoM-Frequency
               UoM-Duration
               UoM-Density
               UoM-Coordinate
               UoM-Brightness
               UoM-Area
               UoM-Angle
               UoM-Acceleration))
  (range-of (cardinal-unit-class
             preferred-unit
             target-unit
             unit))
  (domain-of (cardinal-unit-class-of
              preferred-unit-of
              target-unit-of
              unit-of)))

;;; ----------

(Unitless-Value has 
  (superclasses (Property-Value))
  (test-case ('((*GetAJob has (instance-of (Activity))) (*LearnToJuggle has (instance-of (Activity))) (Hobby has (superclasses (Activity))) (*GetAJob has (priority ((a Unitless-Value with (value ((:pair 9 ()) (:pair *urgent Activity))))))) (*LearnToJuggle has (priority ((a Unitless-Value with (value ((:pair 1 ()) (:pair *low Activity) (:pair *medium Hobby))) (less-than ((the priority of *GetAJob))))))) (the less-than of (the priority of *LearnToJuggle)) ((the greater-than of (the priority of *GetAJob)) includes (the priority of *LearnToJuggle)))))
  (range-of (importance
             priority
             slope))
  (domain-of (importance-of
              priority-of
              slope-of)))

;;; ----------

(University has 
  (superclasses (Educational-Institution))
  (description ("a higher-institution of teaching, studying, research, etc."))
  (wn20-synset ((:set (:triple "university" 2 "n") (:triple "university" 3 "n")))))

;;; ----------

(Unobstruct has 
  (subclasses (Unrestrain
               Throw
               Release
               Let-Go-Of
               Let-Fall
               Admit))
  (defeated-by-class-of (Be-Obstructed))
  (superclasses (Make-Accessible))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "unobstructor")
                        (:seq instrument "instrument used")))
  (test-case ('((*pedestrian has (instance-of (Physical-Object))) (a Obstruct with (object (*pedestrian))) (do-and-next (thelast Obstruct)) (the text-gen of (thelast Obstruct)) (has-value (the Be-Obstructed object-of of *pedestrian)) (a Move with (object (*car)) (path (*path))) (try-do (thelast Move)) (the text-gen of (thelast Move)) (a Unobstruct with (object (*pedestrian))) (do-and-next (thelast Unobstruct)) (the text-gen of (thelast Unobstruct)) (not (has-value (the Be-Obstructed object-of of *pedestrian))) (try-do (thelast Move)))))
  (wn16-synset ((:set (:triple "disengage" 2 "v") (:triple "free" 7 "v"))))
  (wn20-synset ((:set (:triple "disengage" 2 "v") (:triple "free" 7 "v")))))

(every Unobstruct has 
  (object ((a Entity)))
  (agent ((must-be-a Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Obstructed))))
  (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Unobstruct-del-1]))))
  (text-active-verbseq-sg ("unobstructs"))
  (text-active-verbseq-pl ("unobstruct"))
  (text-passive-verbseq-sg ("gets unobstructed"))
  (text-passive-verbseq-pl ("get unobstructed"))
  (text-argslots ((:seq base instrument path result)))
  (preparatory-event ((:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self)))))))))))
  (text-nominalization ("unobstructing")))

;;; ----------

(Unrestrain has 
  (defeated-by-class-of (Be-Restrained))
  (superclasses (Unobstruct))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the thing Unrestrained")
                        (:seq agent "the Unrestrainer")
                        (:seq instrument "the thing used to Unrestrain")))
  (test-case ('((*mugger has (instance-of (Physical-Object))) (a Restrain with (object (*mugger))) (do-and-next (thelast Restrain)) (has-value (the Be-Restrained object-of of *mugger)) (a Move with (object (*mugger))) (not (try-do (thelast Move))) (a Unrestrain with (object (*mugger))) (do-and-next (thelast Unrestrain)) (not (has-value (the Be-Restrained object-of of *mugger))) (try-do (thelast Move)))))
  (wn16-synset ((:set (:triple "let_loose" 2 "v") (:triple "loose" 2 "v") (:triple "unleash" 3 "v"))))
  (wn20-synset ((:set (:triple "let_loose" 2 "v") (:triple "loose" 2 "v") (:triple "unleash" 3 "v")))))

(every Unrestrain has 
  (object ((a Tangible-Entity)))
  (defeats ((if (has-value (the agent of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Restrained) and ((the agent of It) = (the agent of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Restrained)))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Unrestrain-del-1]))))
  (text-active-verbseq-sg ("unrestrains"))
  (text-active-verbseq-pl ("unrestrain"))
  (text-passive-verbseq-sg ("gets unrestrained"))
  (text-passive-verbseq-pl ("get unrestrained"))
  (preparatory-event ((:default (a Restrain with (object ((the object of Self)))))))
  (text-nominalization ("unrestraining")))

;;; ----------

(UoM-Acceleration has 
  (superclasses (Unit-of-Measurement))
  (instances (*centimeter-per-second-squared
              *foot-per-second-squared
              *meter-per-second-squared
              *kilometer-per-second-squared
              *mile-per-second-squared
              *kilometer-per-hour-minute
              *G))
  (cardinal-unit-class-of (acceleration)))

;;; ----------

(UoM-Angle has 
  (superclasses (Unit-of-Measurement))
  (instances (*degree
              *radian
              *grad
              *arcminute
              *arcsecond))
  (cardinal-unit-class-of (angle
                           direction
                           latitude
                           longitude
                           orientation)))

;;; ----------

(UoM-Area has 
  (superclasses (Unit-of-Measurement))
  (instances (*square-inch
              *square-foot
              *square-meter))
  (cardinal-unit-class-of (area)))

;;; ----------

(UoM-Brightness has 
  (superclasses (Unit-of-Measurement))
  (instances (*candela))
  (cardinal-unit-class-of (brightness)))

;;; ----------

(UoM-Coordinate has 
  (superclasses (Unit-of-Measurement))
  (instances (*degree
              *arcminute
              *arcsecond))
  (wn20-synset ((:set (:triple "degree" 0 "n") (:triple "arcminute" 0 "n") (:triple "arcsecond" 0 "n") (:triple "degrees" 0 "n") (:triple "arcminutes" 0 "n") (:triple "arcseconds" 0 "n")))))

;;; ----------

(UoM-Density has 
  (superclasses (Unit-of-Measurement))
  (instances (*gram/liter))
  (cardinal-unit-class-of (density)))

;;; ----------

(UoM-Duration has 
  (superclasses (Unit-of-Measurement))
  (instances (*day
              *week
              *month
              *year
              *hour
              *minute
              *second
              *millisecond
              *nanosecond
              *microsecond))
  (cardinal-unit-class-of (age
                           duration)))

;;; ----------

(UoM-Frequency has 
  (superclasses (Unit-of-Measurement))
  (instances (*per-hour
              *per-minute
              *per-second
              *hertz
              *kilohertz
              *megahertz
              *gigahertz
              *per-day
              *per-week
              *per-month
              *per-year
              *hourly
              *daily
              *weekly
              *monthly
              *yearly))
  (cardinal-unit-class-of (frequency)))

;;; ----------

(UoM-Intensity has 
  (superclasses (Unit-of-Measurement))
  (cardinal-unit-class-of (intensity)))

;;; ----------

(UoM-Length has 
  (superclasses (Unit-of-Measurement))
  (instances (*kilometer
              *inch
              *foot
              *mile
              *yard
              *meter
              *centimeter
              *millimeter
              *micrometer
              *nanometer))
  (cardinal-unit-class-of (circumference
                           depth
                           diameter
                           distance
                           height
                           length
                           perimeter
                           radius
                           thickness
                           width)))

;;; ----------

(UoM-Luminance has 
  (superclasses (Unit-of-Measurement))
  (instances (*nit
              *lambert
              *footlambert
              *millilambert
              *stilb
              *candela-per-meter-squared
              *candela-per-foot-squared
              *candela-per-centimeter-squared))
  (cardinal-unit-class-of (luminance)))

;;; ----------

(UoM-Luminous-Flux has 
  (superclasses (Unit-of-Measurement))
  (instances (*lumen))
  (cardinal-unit-class-of (luminous-flux)))

;;; ----------

(UoM-Luminous-Intensity has 
  (superclasses (Unit-of-Measurement))
  (instances (*candela))
  (cardinal-unit-class-of (luminous-intensity)))

;;; ----------

(UoM-Mass has 
  (superclasses (Unit-of-Measurement))
  (instances (*gram
              *kilogram
              *dalton
              *slug))
  (cardinal-unit-class-of (mass)))

;;; ----------

(UoM-Moment-of-Inertia has 
  (superclasses (Unit-of-Measurement))
  (instances (*kilogram-meter-squared))
  (cardinal-unit-class-of (moment-of-inertia)))

;;; ----------

(UoM-Momentum has 
  (superclasses (Unit-of-Measurement))
  (instances (*kilogram-meter-per-second))
  (cardinal-unit-class-of (momentum)))

;;; ----------

(UoM-Power has 
  (superclasses (Unit-of-Measurement))
  (instances (*watt
              *milliwatt
              *kilowatt
              *megawatt
              *horsepower))
  (cardinal-unit-class-of (power)))

;;; ----------

(UoM-Pressure has 
  (superclasses (Unit-of-Measurement))
  (instances (*pounds-per-square-inch
              *pascal
              *kilopascal
              *bar
              *millibar))
  (cardinal-unit-class-of (pressure)))

;;; ----------

(UoM-Quantity has 
  (superclasses (Unit-of-Measurement))
  (instances (*mole
              *pair
              *dozen
              *score
              *gross))
  (cardinal-unit-class-of (quantity)))

;;; ----------

(UoM-Rate has 
  (superclasses (Unit-of-Measurement))
  (instances (*beat-per-minute))
  (cardinal-unit-class-of (rate)))

;;; ----------

(UoM-Rotational-Rate has 
  (superclasses (Unit-of-Measurement))
  (instances (*revolution-per-minute))
  (cardinal-unit-class-of (rotational-rate)))

;;; ----------

(UoM-Temperature has 
  (superclasses (Unit-of-Measurement))
  (instances (*fahrenheit
              *celsius
              *kelvin))
  (cardinal-unit-class-of (temperature)))

;;; ----------

(UoM-Time has 
  (superclasses (Unit-of-Measurement))
  (instances (*hour
              *minute
              *second
              *day
              *month
              *year)))

;;; ----------

(UoM-Unitless has 
  (superclasses (Unit-of-Measurement))
  (instances (*unity))
  (cardinal-unit-class-of (importance
                           priority
                           slope)))

;;; ----------

(UoM-Velocity has 
  (superclasses (Unit-of-Measurement))
  (instances (*centimeter-per-second
              *foot-per-second
              *meter-per-second
              *mile-per-second
              *kilometer-per-hour
              *kilometer-per-second
              *mile-per-hour))
  (cardinal-unit-class-of (velocity)))

;;; ----------

(UoM-Voltage has 
  (superclasses (Unit-of-Measurement))
  (instances (*volt))
  (cardinal-unit-class-of (voltage)))

;;; ----------

(UoM-Volume has 
  (superclasses (Unit-of-Measurement))
  (instances (*milliliter
              *liter
              *gallon))
  (cardinal-unit-class-of (volume)))

;;; ----------

(UoM-Worth has 
  (superclasses (Unit-of-Measurement))
  (instances (*rol
              *ntdollar
              *rmb
              *sgdollar
              *ringgit
              *usdollar
              *canadiandollar
              *britishpound
              *euro
              *yen))
  (cardinal-unit-class-of (worth)))

;;; ----------

(used-in-equation has 
  (inverse (equation-uses))
  (range (Equation-Set))
  (instance-of (KM-Slot-Group)))

;;; ----------

(user-assumption has 
  (instance-of (KM-Slot-Group))
  (domain (Thing))
  (range (String))
  (cardinality (N-to-N)))

;;; ----------

(user-assumption-of has 
  (range (Thing))
  (domain (String))
  (instance-of (KM-Slot-Group)))

;;; ----------

(user-comment has 
  (instance-of (KM-Slot-Group))
  (domain (Thing))
  (range (String))
  (cardinality (N-to-1)))

;;; ----------

(user-comment-of has 
  (range (Thing))
  (domain (String))
  (instance-of (KM-Slot-Group)))

;;; ----------

(user-description has 
  (instance-of (KM-Slot-Group))
  (domain (Thing))
  (range (String))
  (cardinality (N-to-1)))

;;; ----------

(user-description-of has 
  (range (Thing))
  (domain (String))
  (instance-of (KM-Slot-Group)))

;;; ----------

(value has 
  (instance-of (CLIB-Slot-Group))
  (domain (Property-Group))
  (inverse (value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t))
  (dont-cache-values (t))
  (shaken-ui-hidden-slot (f)))

;;; ----------

(value-of has 
  (inverse (value))
  (range (Property-Group))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Vehicle has 
  (superclasses (Role))
  (description ("The object or medium which transports the object moved
                       during a move event."))
  (wn20-synset ((:set (:triple "vehicle" 1 "n"))
                (:set (:triple "vehicle" 3 "n"))
                (:set (:triple "fomite" 1 "n")))))

(every Vehicle has 
  (in-event ((a Carry)))
  (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self)))))))

;;; ----------

(velocity has 
  (instance-of (EventProperty))
  (domain (Event))
  (range (Velocity-Value))
  (scale-class (Velocity-Scale))
  (scalar-constant-class (Velocity-Constant))
  (cardinal-unit-class (UoM-Velocity))
  (inverse (velocity-of))
  (cardinality (N-to-1))
  (fluent-status (*Inertial-Fluent))
  (wn20-synset ((:set (:triple "speed" 1 "n") (:triple "velocity" 1 "n")))))

;;; ----------

(Velocity-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (velocity)))

;;; ----------

(velocity-of has 
  (inverse (velocity))
  (range (Event))
  (domain (Velocity-Value))
  (instance-of (EventProperty)))

;;; ----------

(Velocity-Scale has 
  (superclasses (Scale))
  (scale-class-of (velocity)))

;;; ----------

(Velocity-Value has 
  (superclasses (Property-Value))
  (doc-file ("velocity"))
  (range-of (velocity))
  (domain-of (velocity-of)))

(every Velocity-Value has 
  (primary-slot (velocity)))

;;; ----------

(Version has 
  (superclasses (KM-Class))
  (description ("Mon Nov 27 11:26:44 CST 2006")))

;;; ----------

(View has 
  (superclasses (Aggregate))
  (test-case ('((*myWallet has (instance-of (Physical-Object)) (is-possessed-by (*myWife)) (content (*myDough)) (material (*fakeLeather)) (color ((a Color-Value with (value (*red))))) (is-inside (*myPants))) (*myWife has (instance-of (Physical-Object))) (*myDough has (instance-of (Physical-Object))) (*fakeLeather has (instance-of (Substance))) (*myPants has (instance-of (Physical-Object))) (*myWallet has (viewed-as ((a View called "Spatial View" with (element ((the content of View) (the material of View) (the is-inside of View))))))) (not ((the element of ((the viewed-as of *myWallet) called "Spatial View")) includes *myWife)))))
  (wn20-synset ((:set (:triple "position" 3 "n") (:triple "view" 1 "n") (:triple "perspective" 1 "n")))))

;;; ----------

(view-of has 
  (inverse (viewed-as))
  (range (Thing))
  (domain (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(viewed-as has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (range (Thing))
  (inverse (view-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(Viewpoint has 
  (subclasses (Yes-No-Viewpoint
               Slot-Value-Viewpoint
               Slot-Query-Viewpoint
               Multislot-Value-Viewpoint
               Match-Result-Viewpoint
               Count-Viewpoint
               Class-Definition-Viewpoint))
  (superclasses (KM-Class))
  (domain-of (viewpoint-answer-page
              viewpoint-answer
              viewpoint-answerable-query
              viewpoint-correspondence
              viewpoint-detail
              viewpoint-eq-solver-info
              viewpoint-filter
              viewpoint-model-graph
              viewpoint-multislot-type
              viewpoint-parent
              viewpoint-query
              viewpoint-question
              viewpoint-scenario
              viewpoint-score
              viewpoint-source
              viewpoint-target))
  (range-of (viewpoint-answer-page-of
             viewpoint-answer-of
             viewpoint-answerable-query-of
             viewpoint-correspondence-of
             viewpoint-detail-of
             viewpoint-eq-solver-info-of
             viewpoint-filter-of
             viewpoint-model-graph-of
             viewpoint-multislot-type-of
             viewpoint-child
             viewpoint-query-of
             viewpoint-question-of
             viewpoint-scenario-of
             viewpoint-score-of
             viewpoint-source-of
             viewpoint-target-of)))

(every Viewpoint has 
  (skolem-string (#'(LAMBDA () (STRING-TRIM "()" (FORMAT () "~A" (KM0 'Self))))))
  (viewpoint-eq-solver-info ((make-phrase (:seq (#'(LAMBDA () (EQ-SOLVER-INFO-OUTPUT 'Self)))))))
  (viewpoint-answer-page ((make-phrase (:seq "<html><body>
<h3>Question</h3>
" (the viewpoint-question of Self) "
<h3>Answer</h3>
" (the viewpoint-answer of Self) (if ((has-value (the viewpoint-detail of Self)) and ((the viewpoint-detail of Self) /= "")) then "
<h3>Explanation</h3>
") (the viewpoint-detail of Self) (if (has-value (the1 of (the viewpoint-target of (the viewpoint-parent of Self)))) then (:seq "<br><br>More info on" (forall ?vp-parent in (the (viewpoint-parent *) of Self) where (has-value (the viewpoint-target of ?vp-parent)) (:seq "<li>" "nospace" "<a href=#" "nospace" (the skolem-string of ?vp-parent) "nospace" ">" (the1 of (the viewpoint-target of ?vp-parent)) "nospace" "...</a></li>")) "<hr><a name=" "nospace" (the skolem-string of (the viewpoint-parent of Self)) "nospace" ">
" "<b><i>" "nospace" (the1 of (the viewpoint-target of (the viewpoint-parent of Self))) "nospace" "</i></b><br><br>
" (the viewpoint-answer-page of (the viewpoint-parent of Self)) "<br><br>")) "
</body></html>
")))))

;;; ----------

(viewpoint-answer has 
  (instance-of (NL-Slot-Group))
  (domain (Viewpoint))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(viewpoint-answer-of has 
  (range (Viewpoint))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(viewpoint-answer-page has 
  (instance-of (NL-Slot-Group))
  (domain (Viewpoint))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(viewpoint-answer-page-of has 
  (range (Viewpoint))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(viewpoint-answerable-query has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-answerable-query-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-child has 
  (inverse (viewpoint-parent))
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-correspondence has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-correspondence-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-detail has 
  (instance-of (NL-Slot-Group))
  (domain (Viewpoint))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(viewpoint-detail-of has 
  (range (Viewpoint))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(viewpoint-eq-solver-info has 
  (instance-of (NL-Slot-Group))
  (domain (Viewpoint))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(viewpoint-eq-solver-info-of has 
  (range (Viewpoint))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(viewpoint-filter has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-filter-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-model-graph has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-model-graph-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-multislot-type has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (range (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(viewpoint-multislot-type-of has 
  (range (Viewpoint))
  (domain (Thing))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-parent has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (inverse (viewpoint-child)))

;;; ----------

(viewpoint-query has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-query-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(Viewpoint-Query-Type has 
  (superclasses (KM-Class))
  (instances (*match-result
              *slot-value
              *slot-query
              *class-description
              *yes-no-question)))

;;; ----------

(viewpoint-question has 
  (instance-of (NL-Slot-Group))
  (domain (Viewpoint))
  (range (String))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N))
  (inherit-with-overrides (t))
  (dont-cache-values (t)))

;;; ----------

(viewpoint-question-of has 
  (range (Viewpoint))
  (domain (String))
  (instance-of (NL-Slot-Group)))

;;; ----------

(viewpoint-scenario has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-scenario-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-score has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (range (Number))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(viewpoint-score-of has 
  (range (Viewpoint))
  (domain (Number))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-source has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(viewpoint-source-of has 
  (range (Viewpoint))
  (instance-of (KM-Slot-Group)))

;;; ----------

(viewpoint-target has 
  (instance-of (KM-Slot-Group))
  (domain (Viewpoint))
  (range (Thing))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(viewpoint-target-of has 
  (range (Viewpoint))
  (domain (Thing))
  (instance-of (KM-Slot-Group)))

;;; ----------

(voltage has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Voltage-Value))
  (scalar-constant-class (Voltage-Constant))
  (cardinal-unit-class (UoM-Voltage))
  (inverse (voltage-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "voltage" 1 "n") (:triple "voltage" 2 "n") (:triple "electromotive force" 1 "n") (:triple "emf" 1 "n") (:triple "electric potential" 1 "n") (:triple "potential" 2 "n") (:triple "potential difference" 1 "n") (:triple "potential drop" 1 "n")))))

;;; ----------

(Voltage-Constant has 
  (superclasses (Constant))
  (scalar-constant-class-of (voltage)))

;;; ----------

(voltage-of has 
  (inverse (voltage))
  (range (Spatial-Entity))
  (domain (Voltage-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Voltage-Value has 
  (superclasses (Property-Value))
  (range-of (voltage))
  (domain-of (voltage-of)))

;;; ----------

(volume has 
  (instance-of (EntityProperty))
  (domain (Chemical))
  (range (Volume-Value))
  (scale-class (Volume-Scale))
  (scalar-constant-class (Volume-Constant))
  (cardinal-unit-class (UoM-Volume))
  (inverse (volume-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "volume" 1 "n")))))

;;; ----------

(Volume-Constant has 
  (superclasses (Constant))
  (instances (*small
              *large))
  (element-type-of (*small-large-scale))
  (scalar-constant-class-of (volume)))

;;; ----------

(volume-of has 
  (inverse (volume))
  (range (Chemical))
  (domain (Volume-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Volume-Scale has 
  (superclasses (Scale))
  (instances (*small-large-scale))
  (scale-class-of (volume)))

;;; ----------

(Volume-Value has 
  (superclasses (Property-Value))
  (test-case ('((Drink has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (volume ((a Volume-Value)))) (*mybeer has (instance-of (Drink)) (volume ((a Volume-Value with (value ((:pair 0.5 *liter) (:pair *small Drink))) (less-than ((the volume of *mycoffee))))))) (the value of (the volume of *mybeer)) ((the less-than of (the volume of *mybeer)) includes (the volume of *mycoffee)) ((the greater-than of (the volume of *mycoffee)) includes (the volume of *mybeer)))))
  (range-of (volume))
  (domain-of (volume-of)))

;;; ----------

(Walk has 
  (description ("A type of Locomotion in which an agent, typically an Animal, uses at least two legs to move."))
  (superclasses (Locomotion))
  (wn20-synset ((:set (:triple "walk" 1 "v") (:triple "walk" 2 "v")))))

(every Walk has 
  (agent ((:default (a Animal))))
  (text-active-verbseq-sg ("walks"))
  (text-active-verbseq-pl ("walk"))
  (text-nominalization ("walk")))

;;; ----------

(Wall has 
  (superclasses (Architectural-Structure))
  (description ("a vertical architectural structure that acts as a barrier"))
  (wn20-synset ((:set (:triple "wall" 1 "n") (:triple "wall" 4 "n")))))

(every Wall has 
  (orientation ((a Angle-Value with (value ((:pair *vertical Entity))))))
  (plays ((a Barrier))))

;;; ----------

(Water has 
  (superclasses (Liquid-Substance))
  (wn20-synset ((:set (:triple "water" 1 "n")))))

;;; ----------

(Wet has 
  (superclasses (Increase))
  (test-case ('((*mytowel has (instance-of (Physical-Object)) (wetness (*mytowelwetness))) (*mytowelwetness has (instance-of (Wetness-Value)) (value ((:pair *dry Physical-Object)))) (a Increase with (object (*mytowel)) (property-slot (wetness))) ((thelast Increase) isa Wet) (do-and-next (thelast Wet)) ((the greater-than of (the wetness of *mytowel)) includes *mytowelwetness))))
  (wn20-synset ((:set (:triple "wet" 1 "v")))))

(every Wet has-definition 
  (instance-of (Increase))
  (property-slot (wetness)))

(every Wet has 
  (text-nominalization ("wetting")))

;;; ----------

(wetness has 
  (instance-of (EntityProperty))
  (domain (Tangible-Entity))
  (range (Wetness-Value))
  (scale-class (Wetness-Scale))
  (scalar-constant-class (Wetness-Constant))
  (inverse (wetness-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "wetness" 1 "n")))))

;;; ----------

(Wetness-Constant has 
  (superclasses (Constant))
  (instances (*wet
              *damp
              *moist
              *dry
              *arid))
  (element-type-of (*dry-wet-scale))
  (scalar-constant-class-of (wetness)))

;;; ----------

(wetness-of has 
  (inverse (wetness))
  (range (Tangible-Entity))
  (domain (Wetness-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Wetness-Scale has 
  (superclasses (Scale))
  (instances (*dry-wet-scale))
  (scale-class-of (wetness)))

;;; ----------

(Wetness-Value has 
  (superclasses (Property-Value))
  (test-case ('((Towel has (superclasses (Physical-Object))) (Bone has (superclasses (Physical-Object))) (*wettowel has (instance-of (Towel)) (wetness ((a Wetness-Value)))) (*freshtowel has (instance-of (Towel)) (wetness ((a Wetness-Value with (value ((:pair *dry Towel) (:pair *wet Bone))) (less-than ((the wetness of *wettowel))))))) (the value of (the wetness of *freshtowel)) ((the less-than of (the wetness of *freshtowel)) includes (the wetness of *wettowel)) ((the greater-than of (the wetness of *wettowel)) includes (the wetness of *freshtowel)))))
  (range-of (wetness))
  (domain-of (wetness-of)))

;;; ----------

(Widen has 
  (superclasses (Increase))
  (test-case ('((*myroad has (instance-of (Physical-Object)) (width (*myroadwidth))) (*myroadwidth has (instance-of (Length-Value)) (value ((:pair 30 *foot)))) (a Increase with (object (*myroad)) (property-slot (width))) ((thelast Increase) isa Widen) (do-and-next (thelast Widen)) ((the greater-than of (the width of *myroad)) includes *myroadwidth))))
  (wn20-synset ((:set (:triple "widen" 1 "v") (:triple "widen" 3 "v")))))

(every Widen has-definition 
  (instance-of (Increase))
  (property-slot (width)))

(every Widen has 
  (text-nominalization ("widening")))

;;; ----------

(width has 
  (instance-of (EntityProperty))
  (domain (Spatial-Entity))
  (range (Length-Value))
  (scale-class (Width-Scale))
  (scalar-constant-class (Width-Constant))
  (cardinal-unit-class (UoM-Length))
  (inverse (width-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "width" 1 "n") (:triple "breadth" 2 "n")))))

;;; ----------

(Width-Constant has 
  (superclasses (Constant))
  (instances (*narrow
              *wide))
  (element-type-of (*narrow-wide-scale))
  (scalar-constant-class-of (width)))

;;; ----------

(width-of has 
  (inverse (width))
  (range (Spatial-Entity))
  (domain (Length-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Width-Scale has 
  (superclasses (Scale))
  (instances (*narrow-wide-scale))
  (scale-class-of (width)))

;;; ----------

(Withdraw has 
  (defeated-by-class-of (Be-Stored))
  (superclasses (Move-Out-Of))
  (required-slot (object
                  base))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "the thing being withdrawn")
                        (:seq base "the thing withdrawed from")
                        (:seq agent "the agent")
                        (:seq instrument "the instrument used")))
  (wn16-synset ((:set (:triple "withdraw" 9 "v") (:triple "draw" 14 "v") (:triple "take_out" 2 "v") (:triple "take_out" 6 "v") (:triple "take_out" 8 "v") (:triple "unpack" 1 "v"))))
  (wn20-synset ((:set (:triple "withdraw" 10 "v") (:triple "draw" 13 "v") (:triple "take_out" 2 "v") (:triple "take_out" 6 "v") (:triple "take_out" 8 "v") (:triple "unpack" 1 "v")))))

(every Withdraw has 
  (object ((a Entity)))
  (base ((exactly 1 Tangible-Entity)
         (a Tangible-Entity)))
  (agent ((must-be-a Entity)))
  (instrument ((must-be-a Entity)))
  (defeats ((allof (the object-of of (the base of Self)) where (((the classes of It) = Be-Stored) and ((the object of It) includes (the object of Self))))))
  (soft-pcs-list ((:triple (the base of Self) object-of (a Be-Accessible))
                  (if (has-value (the agent of Self)) then (:triple (the base of Self) object (mustnt-be-a Be-Inaccessible with (base ((the agent of Self))))))
                  (:triple (the base of Self) encloses (the object of Self))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Withdraw-del-2]) (:triple It base (the base of Self) [Withdraw-del-3])))))
  (preparatory-event ((:default (a Store with (object ((the object of Self)))) (a Open with (base ((the base of Self))) (agent ((the agent of Self)))))))
  (text-active-verbseq-sg ("withdraws"))
  (text-active-verbseq-pl ("withdraw"))
  (text-passive-verbseq-sg ("gets withdrawn"))
  (text-passive-verbseq-pl ("get withdrawn"))
  (text-base ((if (has-value (the base of Self)) then ("from"))))
  (text-nominalization ("withdrawal")))

;;; ----------

(wn16-synset has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(wn16-synset-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(wn20-synset has 
  (instance-of (CLIB-Slot-Group))
  (domain (Thing))
  (fluent-status (*Non-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(wn20-synset-of has 
  (range (Thing))
  (instance-of (CLIB-Slot-Group)))

;;; ----------

(Wood has 
  (superclasses (Solid-Substance))
  (wn20-synset ((:set (:triple "wood" 1 "n")))))

;;; ----------

(Workgroup has 
  (subclasses (Committee))
  (superclasses (Team)))

;;; ----------

(worth has 
  (instance-of (EntityProperty))
  (domain (Entity))
  (range (Worth-Value))
  (scale-class (Worth-Scale))
  (scalar-constant-class (Worth-Constant))
  (cardinal-unit-class (UoM-Worth))
  (inverse (worth-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1))
  (wn20-synset ((:set (:triple "worth" 1 "n")))))

;;; ----------

(Worth-Constant has 
  (superclasses (Constant))
  (instances (*cheap
              *inexpensive
              *expensive))
  (scalar-constant-class-of (worth)))

;;; ----------

(worth-of has 
  (inverse (worth))
  (range (Entity))
  (domain (Worth-Value))
  (instance-of (EntityProperty)))

;;; ----------

(Worth-Scale has 
  (superclasses (Scale))
  (scale-class-of (worth)))

;;; ----------

(Worth-Value has 
  (superclasses (Property-Value))
  (test-case ('((new-situation) (*BomberOfStoneIPA has (instance-of (Tangible-Entity))) (*Bubba has (instance-of (Tangible-Entity))) (*GrapevineMarket has (instance-of (Tangible-Entity))) (a Buy with (agent (*Bubba)) (donor (*GrapevineMarket)) (object (*BomberOfStoneIPA)) (instrument ((a Money with (worth ((a Worth-Value with (value ((:pair 3.99 *usdollar) (:pair *cheap Tangible-Entity)))))))))) (do-and-next (thelast Buy)) ((the possesses of *Bubba) includes (*BomberOfStoneIPA)) (*MyCar has (instance-of (Tangible-Entity))) (Camel has (superclasses (Tangible-Entity))) (*MyCar has (worth ((the worth of (a Aggregate with (element ((exactly 10 Camel)))))))))))
  (range-of (worth))
  (domain-of (worth-of)))

;;; ----------

(Write has 
  (superclasses (Express))
  (description ("encode information into a document in a language (to be embodied as symbols)"))
  (wn20-synset ((:set (:triple "write" 2 "v") (:triple "write" 1 "v") (:triple "compose" 3 "v") (:triple "pen" 1 "v") (:triple "indite" 1 "v")))))

(every Write has 
  (result ((a Document)))
  (text-nominalization ("writing")))

;;; ----------

(Yes-No-Viewpoint has 
  (superclasses (Viewpoint)))

(every Yes-No-Viewpoint has 
  (viewpoint-question (((?vaqtrips == (the elements of (the2 of (allof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and (((the3 of It) = *yes) or ((the3 of It) = *no))))))) and (?vaqprtrips == (allof ?trip in ?vaqtrips where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = value) or ((the2 of ?trip) = value-of) or ((the2 of ?trip) = instance-of)))) and (?numtrips == (the number of (allof ?trip in ?vaqprtrips where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of))))) and (if (has-value ?vaqprtrips) then (make-phrase (:seq "Is it true that" (forall ?trip in ?vaqprtrips where ((the2 of ?trip) = instance-of) ((?fr == (the1 of ?trip)) and (?fclass == (the3 of ?trip)) and (:seq (if (?numtrips > 1) then "<li>") (the text-def-head of ?fr) "is" (the text-indef-head of (an instance of ?fclass)) (if (?numtrips > 1) then "</li>
")))) (forall ?trip in ?vaqprtrips where ((the2 of ?trip) isa Relation) ((?fr == (the1 of ?trip)) and (?sl == (the2 of ?trip)) and (?val == (the3 of ?trip)) and (:seq (if (?numtrips > 1) then "<li>") (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (the text-def-head of ?val) (if (?numtrips > 1) then "</li>
")))) (forall ?trip in ?vaqprtrips where ((the2 of ?trip) isa Property) ((?fr == (if ((the1 of ?trip) isa Property-Value) then (the3 of ?trip) else (the1 of ?trip))) and (?pr == (if ((the1 of ?trip) isa Property-Value) then (the inverse of (the2 of ?trip)) else (the2 of ?trip))) and (?pv == (if ((the1 of ?trip) isa Property-Value) then (the1 of ?trip) else (the3 of ?trip))) and (?valtrip == (oneof ?tr in ?vaqprtrips where ((((the1 of ?tr) = ?pv) and ((the2 of ?tr) = value)) or (((the3 of ?tr) = ?pv) and ((the2 of ?tr) = value-of))))) and (?vpair == (if ((the1 of ?valtrip) = ?pv) then (the3 of ?valtrip) else (the1 of ?valtrip))) and (:seq (if (?numtrips > 1) then "<li>") (if (has-value ?vpair) then (:seq "the" ?pr "of" (the text-def-head of ?fr) (if ((the1 of ?vpair) isa Constant) then (:seq "is" (the1 of ?vpair))) (if ((the1 of ?vpair) isa Number) then (:seq "=" (the1 of ?vpair) (if ((the2 of ?vpair) /= *unity) then (the2 of ?vpair))))) else (:seq (the text-def-head of ?fr) "has some" ?pr)) (if (?numtrips > 1) then "</li>
") "<br>
")))))))))
  (viewpoint-answer (((?vtrueall == (the elements of (the2 of (oneof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and ((the3 of It) = *yes)))))) and (?vfalseall == (the elements of (the2 of (oneof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and ((the3 of It) = *no)))))) and (?vtrue == (allof ?trip in ?vtrueall where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of)))) and (?vfalse == (allof ?trip in ?vfalseall where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of)))) and (?vfval == (allof ?trip in ?vfalseall where (((the2 of ?trip) = value) or ((the2 of ?trip) = value-of)))) and (make-phrase (:seq (if ((has-value ?vfalse) and (has-value ?vtrue)) then "No.<br><br>
While it is true that" else (if (has-value ?vfalse) then "No.
" else (if (has-value ?vtrue) then "Yes.<br><br>
It is true that" else "No.<br>
"))) (if (has-value ?vtrue) then (:seq (forall ?truetrip in ?vtrue where ((the2 of ?truetrip) = instance-of) ((?fr == (the1 of ?truetrip)) and (?fclass == (the3 of ?truetrip)) and (:seq (if ((the number of ?vtrue) > 1) then "<li>") (the text-def-head of ?fr) "is" (the text-indef-head of (an instance of ?fclass)) (if ((the number of ?vtrue) > 1) then "</li>
")))) (forall ?truetrip in ?vtrue where ((the2 of ?truetrip) isa Relation) ((?fr == (the1 of ?truetrip)) and (?sl == (the2 of ?truetrip)) and (?val == (the3 of ?truetrip)) and (:seq (if ((the number of ?vtrue) > 1) then "<li>") (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (the text-def-head of ?val) (if ((the number of ?vtrue) > 1) then "</li>
")))) (forall ?truetrip in ?vtrue where ((the2 of ?truetrip) isa Property) ((?fr == (if ((the1 of ?truetrip) isa Property-Value) then (the3 of ?truetrip) else (the1 of ?truetrip))) and (?pr == (if ((the1 of ?truetrip) isa Property-Value) then (the inverse of (the2 of ?truetrip)) else (the2 of ?truetrip))) and (:seq (if ((the number of ?vtrue) > 1) then "<li>") (the text-description of (the ?pr of ?fr)) (if ((the number of ?vtrue) > 1) then "</li>
")))))) (if (has-value ?vfalse) then (:seq "<br><br>
It is not true that" (forall ?falsetrip in ?vfalse where ((the2 of ?falsetrip) = instance-of) ((?fr == (the1 of ?falsetrip)) and (?fclass == (the3 of ?falsetrip)) and (:seq (if ((the number of ?vfalse) > 1) then "<li>") (the text-def-head of ?fr) "is" (the text-indef-head of (an instance of ?fclass)) (if ((the number of ?vfalse) > 1) then "</li>
")))) (forall ?falsetrip in ?vfalse where ((the2 of ?falsetrip) isa Relation) ((?fr == (the1 of ?falsetrip)) and (?sl == (the2 of ?falsetrip)) and (?val == (the3 of ?falsetrip)) and (:seq (if ((the number of ?vfalse) > 1) then "<li>") (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (the text-def-head of ?val) (if ((the number of ?vfalse) > 1) then "</li>
")))) (forall ?falsetrip in ?vfalse where ((the2 of ?falsetrip) isa Property) ((?fr == (if ((the1 of ?falsetrip) isa Property-Value) then (the3 of ?falsetrip) else (the1 of ?falsetrip))) and (?pr == (if ((the1 of ?falsetrip) isa Property-Value) then (the inverse of (the2 of ?falsetrip)) else (the2 of ?falsetrip))) and (?pv == (if ((the1 of ?falsetrip) isa Property-Value) then (the1 of ?falsetrip) else (the3 of ?falsetrip))) and (?valtrip == (oneof ?tr in ?vfval where ((((the1 of ?tr) = ?pv) and ((the2 of ?tr) = value)) or (((the3 of ?tr) = ?pv) and ((the2 of ?tr) = value-of))))) and (?vpair == (if ((the1 of ?valtrip) = ?pv) then (the3 of ?valtrip) else (the1 of ?valtrip))) and (:seq (if ((the number of ?vfalse) > 1) then "<li>") (if (has-value ?vpair) then (:seq "the" ?pr "of" (the text-def-head of ?fr) (if ((the1 of ?vpair) isa Constant) then (:seq "is" (the1 of ?vpair))) (if ((the1 of ?vpair) isa Number) then (:seq "=" (the1 of ?vpair) (if ((the2 of ?vpair) /= *unity) then (the2 of ?vpair))))) else (:seq (the text-def-head of ?fr) "has some" ?pr)) (if ((the number of ?vfalse) > 1) then "</li>
")))))))))))
  (viewpoint-detail (((?vaqtrips == (the elements of (the2 of (allof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and (((the3 of It) = *yes) or ((the3 of It) = *no))))))) and (?vaqprtrips == (allof ?trip in ?vaqtrips where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of)))) and (?vaqjustifs == (forall ?trip in ?vaqptrips (get-justification (:triple (the1 of ?trip) (the2 of ?trip) *)))) and (forall ?justif in ?vaqjustifs (:seq "<li>" ?justif "</li>
"))))))

;;; ----------


;;; ---------- EXPLANATIONS ----------

(explanation (:triple _Partition1 instance-of Partition)
  ((a Partition with (members (Event Entity)))))
(explanation (:triple _Partition2 instance-of Partition)
  ((a Partition with (members (Animal Plant)))))
(explanation (:triple _Partition3 instance-of Partition)
  ((a Partition with (members (Nonrenewable-Resource Renewable-Resource)))))
(explanation (:triple _Partition4 instance-of Partition)
  ((a Partition with (members (Tangible-Entity Place)))))
(explanation (:triple _Partition5 instance-of Partition)
  ((a Partition with (members (Substance Chemical-Entity)))))

;;; ---------- COMMENTS ----------

(comment [Activate-add-1] (:seq (the object of Self) " becomes active.")
 "When something is activated, it becomes active.")

;;; ----------

(comment [Activate-pcs-1]
 (:seq (the object of Self) " must not yet be activated.")
 "Things can't be activated if they are already active.")

;;; ----------

(comment [Add-add-1]
 (:seq (the object of Self) " is added to, and is now part of, "
  (the base of Self))
 "When something is added to a base, it becomes part of the base.")

;;; ----------

(comment [Admit-del-1]
 (:seq (the object of Self) " is no longer shut out of " (the base of Self))
 "An admit stops something from being shut out of something else.")

;;; ----------

(comment [Admit-del-2]
 (:seq (the base of Self) " no longer shuts out " (the object of Self))
 "An admit stops something from being shut out of something else.")

;;; ----------

(comment [Admit-ncs-1]
 (:seq (the object of Self) " cannot be already inside " (the base of Self))
 "Something must be outside something else to be admitted into it.")

;;; ----------

(comment [Admit-pcs-1]
 (:seq (the object of Self) " must be shut out of " (the base of Self))
 "Only something that is shut out of something else can be admitted to it.")

;;; ----------

(comment [Allocate-Resource-del-1]
 (:seq (the object of Self) " is now unavailable.")
 "A Allocate-Resource allocates a resource and makes it unavailable.")

;;; ----------

(comment [Attach-add-1]
 (:seq (the object of Self) " is attached to " (the base of Self))
 "An attach causes two things to be attached to each other.")

;;; ----------

(comment [Attach-add-2]
 (:seq (the base of Self) " is attached to " (the object of Self))
 "An attach causes two things to be attached to each other.")

;;; ----------

(comment [Block-add-1] (:seq (the object of Self) " is now blocked.")
 "A block causes a place to be blocked.")

;;; ----------

(comment [Block-add-2]
 (:seq (the instrument of Self) " is used to block " (the object of Self))
 "An instrument can be used to block a place.")

;;; ----------

(comment [Breach-add-1]
 (:seq (the result of Self) " has been created in " (the object of Self))
 "A breach creates a portal in a barrier.")

;;; ----------

(comment [Break-add-1] (:seq (the object of Self) " is broken.")
 "A break causes something to be broken.")

;;; ----------

(comment [Break-Contact-del-1]
 (:seq (the object of Self) " is no longer touching " (the base of Self))
 "A break-contact stops something from touching something else.")

;;; ----------

(comment [Break-Contact-del-2]
 (:seq (the base of Self) " no longer abuts " (the object of Self))
 "A break-contact stops something from touching something else.")

;;; ----------

(comment [Break-Contact-del-3]
 (:seq (the object of Self) " no longer abuts " (the base of Self))
 "A break-contact stops something from touching something else.")

;;; ----------

(comment [Close-add-1] (:seq (the object of Self) " is closed.")
 "A close causes something to be closed.")

;;; ----------

(comment [Close-add-2]
 (:seq (the object of Self) " is now blocked by " (the instrument of Self))
 "An opening is closed by blocking it with something.")

;;; ----------

(comment [Close-add-3]
 (:seq (the instrument of Self) " is now blocking " (the object of Self))
 "An opening is closed by blocking it with something.")

;;; ----------

(comment [Close-del-1] (:seq (the object of Self) " is no longer open.")
 "A close stops something from being open.")

;;; ----------

(comment [Close-del-2] (:seq (the object of Self) " is no longer a portal.")
 "A close stops something from being a portal through a barrier.")

;;; ----------

(comment [Close-pcs-1] (:seq (the object of Self) " cannot be closed already.")
 "Something that is already closed cannot be closed again.")

;;; ----------

(comment [Close-pcs-2] (:seq (the object of Self) " must be open.")
 "Something must be open if it is to be closed.")

;;; ----------

(comment [Close-pcs-3] (:seq (the object of Self) " cannot be blocked.")
 "Something cannot be blocked if it is to be closed.")

;;; ----------

(comment [Communicate-add-1]
 (:seq (the object of Self) " is the object of the state of "
  (the resulting-state of Self))
 "The Information become known.")

;;; ----------

(comment [Communicate-add-2]
 (:seq (the recipient of Self) " experiences the state of "
  (the resulting-state of Self))
 "The Information becomes known to the recipient of the Communication.")

;;; ----------

(comment [Communicate-pcs-1]
 (:seq (the object of Self) " must be known by " (the agent of Self))
 "The agent must know Information before it can be Communicated.")

;;; ----------

(comment [Conceal-add-1]
 (:seq (the base of Self) " is concealing " (the object of Self))
 "A conceal causes something to be concealed by something else.")

;;; ----------

(comment [Conceal-add-2]
 (:seq (the object of Self) " is concealed by " (the base of Self))
 "A conceal causes something to be concealed by something else.")

;;; ----------

(comment [Confine-add-1]
 (:seq (the object of Self) " is confined in " (the base of Self))
 "A confine causes something to be confined in something else.")

;;; ----------

(comment [Confine-add-2]
 (:seq (the base of Self) " is confining " (the object of Self))
 "A confine causes something to be confined in something else.")

;;; ----------

(comment [Confine-pcs-1]
 (:seq (the object of Self) " must be inside " (the base of Self))
 "A thing must be inside something else before it can be confined in it.")

;;; ----------

(comment [Copy-add-1]
 (:seq "Another copy of " (the object of Self) " has been created.")
 "A copy creates a duplicate instance of something.")

;;; ----------

(comment [Create-add-1] (:seq (the object of Self) " has been created.")
 "A create makes a new instance of something.")

;;; ----------

(comment [Deactivate-del-1]
 (:seq (the object of Self) " is no longer activated.")
 "A deactivate stops something from being activated.")

;;; ----------

(comment [Deactivate-pcs-1]
 (:seq (the object of Self) " must be activated to be deactivated.")
 "Something must be active for it to be deactivated.")

;;; ----------

(comment [Decrease-add-1]
 (:seq (the property-slot of Self) " of " (the object of Self)
  " has a new, lesser value.")
 "A decrease lessens the value for a property.")

;;; ----------

(comment [Decrease-del-1]
 (:seq "The old value of " (the property-slot of Self) " is no longer valid.")
 "A decrease changes the old value of a property.")

;;; ----------

(comment [Decrease-pcs-1]
 (:seq "The " (the property-slot of Self) " of " (the object of Self)
  " must be in the range of " (the property-slot of Self))
 "One cannot decrease an improperly-valued property.")

;;; ----------

(comment [Divide-add-1]
 (:seq "A new, smaller instance of " (the object of Self) " has been created.")
 "A divide creates two new, smaller instances of something.")

;;; ----------

(comment [Divide-add-2]
 (:seq "A new, smaller instance of " (the object of Self) " has been created.")
 "A divide creates two new, smaller instances of something.")

;;; ----------

(comment [Duplicate-add-1] (:seq (the object of Self) " has been duplicated.")
 "A duplicate creates a new, identical instance of something.")

;;; ----------

(comment [Entity-instance-of] "" (the text-sentence of Self))

;;; ----------

(comment [Expose-del-1] (:seq (the object of Self) " is no longer concealed.")
 "An expose stops something from being concealed.")

;;; ----------

(comment [Express-pcs-1]
 (:seq (the object of Self) " must be known by " (the agent of Self))
 "Something that is not known cannot be expressed.")

;;; ----------

(comment [Forget-del-1] (:seq (the object of Self) " is no longer known.")
 "Something forgot something, now it does not know that something.")

;;; ----------

(comment [Forget-del-2]
 (:seq (the agent of Self) " is no knows the information.")
 "When someone forgets something it is no longer known by them.")

;;; ----------

(comment [Forget-pcs-1]
 (:seq (the object of Self) "must be known by" (the agent of Self) " before "
  (the agent of Self) " can forget it.")
 "Must be known before it can be forgotten.")

;;; ----------

(comment [Hold-add-1] (:seq (the agent of Self) " is now holding.")
 "A holder will continue holding something until it is let go.")

;;; ----------

(comment [Hold-dcs-1] (:seq (the agent of Self) " abuts " (the object of Self))
 "A holder must be next to something it holds.")

;;; ----------

(comment [Hold-interrupted-1]
 (:seq (the agent of Self) " let go of " (the object of Self))
 "A let go of stops a holder from holding something.")

;;; ----------

(comment [Increase-add-1]
 (:seq (the property-slot of (the object of Self))
  " has a new, greater value.")
 "An increase grows the value for a property.")

;;; ----------

(comment [Increase-del-1]
 (:seq "The old value of " (the property-slot of Self) " is no longer valid.")
 "An increase changes the old value of a property.")

;;; ----------

(comment [Increase-pcs-1]
 (:seq (the property-slot of (the object of Self))
  " must be in the range of the property.")
 "One cannot increase an improperly-valued property.")

;;; ----------

(comment [Interpret-add-1] (:seq (the object of Self) " is interpreted.")
 "An interpret causes some information to be known.")

;;; ----------

(comment [Interpret-add-2] (:seq (the agent of Self) " interprets.")
 "Some information becomes known to some entity.")

;;; ----------

(comment [Let-Fall-del-1]
 (:seq (the object of Self) " is no longer being supported.")
 "A let-fall stops something from being supported.")

;;; ----------

(comment [Let-Fall-pcs-1]
 (:seq (the object of Self) " must be supported before it can fall.")
 "Something must be supported by something else before it can fall.")

;;; ----------

(comment [Let-Go-Of-dcs-1]
 (:seq "The location of " (the agent of Self)
  " is the same as the location of " (the object of Self))
 "Something that is held is in the same place as that which is holding it.")

;;; ----------

(comment [Let-Go-Of-del-1] (:seq (the object of Self) " is no longer held.")
 "A let-go-of stops something from being held.")

;;; ----------

(comment [Let-Go-Of-del-2]
 (:seq (the agent of Self) " is no longer holding " (the object of Self))
 "A let-go-of stops something from holding something else.")

;;; ----------

(comment [Let-Go-Of-interrupted-1] "A hold interrupts a let-go-of"
 "A hold stops a let-go-of.")

;;; ----------

(comment [Make-Accessible-del-1]
 (:seq (the object of Self) " is now accessible.")
 "A make-accessible stops something from being inaccessible.")

;;; ----------

(comment [Make-Contact-add-1]
 (:seq (the object of Self) " now touches " (the base of Self))
 "Things that make contact touch.")

;;; ----------

(comment [Make-Contact-add-2]
 (:seq (the base of Self) " now touches " (the object of Self))
 "Things that make contact touch.")

;;; ----------

(comment [Make-Contact-add-3]
 (:seq (the base of Self) " now abuts " (the object of Self))
 "Things that make contact must be next to each other.")

;;; ----------

(comment [Make-Contact-add-4]
 (:seq (the object of Self) " now abuts " (the base of Self))
 "Things that make contact must be next to each other.")

;;; ----------

(comment [Make-Contact-pcs-1]
 (:seq (the object of Self) " cannot already be touching " (the base of Self))
 "Things that are to come in contact cannot already be touching.")

;;; ----------

(comment [Make-Contact-pcs-2]
 (:seq (the base of Self) " cannot already be touching " (the object of Self))
 "Things that are to come in contact cannot already be touching.")

;;; ----------

(comment [Make-Inaccessible-add-1]
 (:seq (the base of Self) " now cannot access " (the object of Self))
 "Something that is made inaccessible cannot be accessed.")

;;; ----------

(comment [Make-Inaccessible-add-2]
 (:seq (the object of Self) " is now inaccessible.")
 "Something that is made inaccessible cannot be accessed.")

;;; ----------

(comment [Make-Inaccessible-add-3]
 (:seq (the agent of Self) " made " (the object of Self) " inaccessible.")
 "A thing can make something else inaccessible.")

;;; ----------

(comment [Move-Into-add-1]
 (:seq (the base of Self) " now contains " (the object of Self))
 "Something is contained by the thing it moves into.")

;;; ----------

(comment [Move-Into-add-2]
 (:seq (the object of Self) " is in the state of Be-Contained.")
 "After being moved into something is in the state of being contained")

;;; ----------

(comment [Move-Into-pcs-1]
 (:seq (the object of Self) " cannot be shut out of " (the base of Self))
 "Something cannot move into something else if it has been shut out of it.")

;;; ----------

(comment [Move-Out-Of-del-1]
 (:seq (the base of Self) " no longer contains " (the object of Self))
 "A move out of stops something from being contained by something else.")

;;; ----------

(comment [Move-Out-Of-del-2]
 (:seq (the object of Self) " is no longer in the Be-Contained State.")
 "A move out of takes somthing out of the state of being contained")

;;; ----------

(comment [Move-Out-Of-pcs-1]
 (:seq (the object of Self) " must not be confined in " (the base of Self))
 "Only an unconfined thing can move out of the thing that contains it.")

;;; ----------

(comment [Obstruct-add-1] (:seq (the object of Self) " is obstructed.")
 "An obstruct causes something to be obstructed.")

;;; ----------

(comment [Obstruct-add-2] (:seq (the agent of Self) " caused the obstruction.")
 "Somthing can cause something else to be obstructed.")

;;; ----------

(comment [Open-add-1] (:seq (the object of Self) " is now a portal.")
 "An open results in a portal.")

;;; ----------

(comment [Open-del-1] (:seq (the object of Self) " is no longer closed.")
 "When something is opened, it is no longer closed.")

;;; ----------

(comment [Open-del-2] (:seq "The blockage is no longer a portal covering")
 "Something is only a portal covering when it is blocking the portal.")

;;; ----------

(comment [Open-del-3]
 (:seq "The portal cover no longer blocks " (the object of Self))
 "An open removes the portal covering from the portal.")

;;; ----------

(comment [Open-pcs-1] (:seq (the object of Self) " must not be open yet.")
 "Something that is open cannot be opened again.")

;;; ----------

(comment [Open-pcs-2] (:seq (the object of Self) " must be closed.")
 "Something must be closed before it can be opened.")

;;; ----------

(comment [Produce-add-1]
 (:seq (the result of Self) " was created from " (the raw-material of Self))
 "A produce consumes raw material substances to create a Tangible-Entity.")

;;; ----------

(comment [Produce-add-2]
 (:seq (the raw-material of Self) " is part of " (the result of Self))
 "A produce uses raw material parts to create a Tangible-Entity.")

;;; ----------

(comment [Produce-add-3]
 (:seq (the result of Self) " was created from " (the raw-material of Self))
 "A produce consumes raw material substances to create a Tangible-Entity.")

;;; ----------

(comment [Produce-add-4]
 (:seq (the raw-material of Self) " is part of " (the result of Self))
 "A produce uses raw material parts to create a Tangible-Entity.")

;;; ----------

(comment [Release-del-1]
 (:seq (the object of Self) " is no longer confined in " (the base of Self))
 "A release stops something from being confined in something else.")

;;; ----------

(comment [Release-del-2]
 (:seq (the object of Self) " is no longer confined in " (the base of Self))
 "A release stops something from being confined in something else.")

;;; ----------

(comment [Release-pcs-1]
 (:seq (the object of Self) " must be confined in " (the base of Self))
 "Something must be confined before it can be released.")

;;; ----------

(comment [Release-Resource-add-1]
 (:seq (the base of Self) " now can access " (the object of Self))
 "Something that is made available can be accessed.")

;;; ----------

(comment [Release-Resource-add-2]
 (:seq (the object of Self) " is now available.")
 "Something that is released is available.")

;;; ----------

(comment [Release-Resource-add-3]
 (:seq (the agent of Self) " made " (the object of Self) " available.")
 "A thing can make something else available.")

;;; ----------

(comment [Remove-del-1]
 (:seq (the object of Self) " is no longer part of " (the base of Self))
 "A remove stops something from being a part of something else.")

;;; ----------

(comment [Remove-pcs-1]
 (:seq (the object of Self) " must be part of " (the base of Self))
 "Only parts of something can be removed from it.")

;;; ----------

(comment [Repair-del-1] (:seq (the object of Self) " is no longer broken.")
 "A repair stops something from being broken.")

;;; ----------

(comment [Repair-pcs-1]
 (:seq (the object of Self) " must be broken to be repaired.")
 "Only broken objects need repair.")

;;; ----------

(comment [Repair-pcs-2] (:seq (the object of Self) " must not be ruined.")
 "Ruined objects cannot be repaired.")

;;; ----------

(comment [Ruin-add-1] (:seq (the object of Self) " is ruined.")
 "A ruin causes a Tangible-Entity to be ruined.")

;;; ----------

(comment [Shut-Out-add-1]
 (:seq (the object of Self) " is now shut out of " (the base of Self))
 "A shut out causes a Tangible-Entity to be shut out of another Tangible-Entity.")

;;; ----------

(comment [Shut-Out-add-2]
 (:seq (the base of Self) " now shuts out " (the object of Self))
 "A shut out causes a Tangible-Entity to be shut out of another Tangible-Entity.")

;;; ----------

(comment [Shut-Out-ncs-1]
 (:seq (the object of Self) " cannot be inside something.")
 "A Tangible-Entity cannot be shut out of another Tangible-Entity if it is already inside of it.")

;;; ----------

(comment [Sit-Down-add-1] (:seq (the agent of Self) " is now sitting")
 "A Sit-Down causes an Entity to be sitting.")

;;; ----------

(comment [Sit-Down-del-1] (:seq (the agent of Self) " is no longer standing")
 "If an Entity is standing, a Sit-Down stops the Entity from standing.")

;;; ----------

(comment [Sit-Down-pcs-1]
 (:seq (the agent of Self) " must not be sitting already.")
 "Something cannot sit down if it is already sitting.")

;;; ----------

(comment [Stand-Up-add-1] (:seq (the agent of Self) " is now standing")
 "A Stand-Up causes an Entity to be standing.")

;;; ----------

(comment [Stand-Up-del-1] (:seq (the agent of Self) " is no longer sitting")
 "If an Entity is sitting, a Stand-Up stops the Entity from sitting.")

;;; ----------

(comment [Stand-Up-pcs-1]
 (:seq (the agent of Self) " must not be standing already.")
 "Something cannot stand up if it is already standing.")

;;; ----------

(comment [Store-add-1]
 (:seq (the base of Self) " now contains " (the object of Self))
 "A store causes an Entity to be stored inside a Tangible-Entity.")

;;; ----------

(comment [Store-add-2]
 (:seq (the object of Self) " is now stored in " (the base of Self))
 "A store causes an Entity to be stored inside a Tangible-Entity.")

;;; ----------

(comment [Store-add-3]
 (:seq (the base of Self) " now has " (the object of Self)
  " stored inside it.")
 "A store causes an Entity to be stored inside a Tangible-Entity.")

;;; ----------

(comment [Store-pcs-1]
 (:seq (the object of Self) " must not be stored already.")
 "Something cannot be stored more than once.")

;;; ----------

(comment [Support-add-1] (:seq (the object of Self) " is now supported.")
 "A support causes the object to be supported.")

;;; ----------

(comment [Support-add-2]
 (:seq (the instrument of Self) " is now used to support "
  (the object of Self))
 "A Tangible-Entity can be used to support the object.")

;;; ----------

(comment [Take-Apart-del-1]
 (:seq (the object of Self) " no longer has "
  (the has-part of (the object of Self)))
 "A take-apart removes parts from something.")

;;; ----------

(comment [Take-Control-add-1]
 (:seq (the agent of Self) " now controls " (the object of Self))
 "The agent of a Take-Control is subsequently in control of the object.")

;;; ----------

(comment [Take-Control-add-2]
 (:seq (the object of Self) " is now controlled by " (the agent of Self))
 "If something takes control of X, X is now controlled.")

;;; ----------

(comment [Take-Control-del-1]
 (:seq (the object of Self) " is no longer controlled by someone else.")
 "An object taken control of is no longer controlled by someone else.")

;;; ----------

(comment [Take-Control-del-2]
 (:seq "The original controller no longer controls" (the object of Self))
 "An object taken control of is no longer controlled by someone else.")

;;; ----------

(comment [Transfer-add-1]
 (:seq (the recipient of Self) " now possesses " (the object of Self))
 "A transfer moves possessions from the donor to the recipient.")

;;; ----------

(comment [Transfer-del-1]
 (:seq (the donor of Self) " no longer possesses " (the object of Self))
 "A transfer moves possessions from the donor to the recipient.")

;;; ----------

(comment [Transfer-pcs-1]
 (:seq (the donor of Self) " must possess " (the object of Self))
 "The donor must have the object to transfer it.")

;;; ----------

(comment [Unblock-del-1] (:seq (the object of Self) " is no longer blocked.")
 "An unblock stops something from being blocked.")

;;; ----------

(comment [Unblock-del-2]
 (:seq (the instrument of Self) " is no longer being used to block "
  (the object of Self))
 "An unblock stops something from being used to block something else.")

;;; ----------

(comment [Unblock-pcs-1]
 (:seq (the object of Self) " must be blocked to be unblocked.")
 "Only a blocked object can be unblocked.")

;;; ----------

(comment [Unobstruct-del-1]
 (:seq (the object of Self) " is no longer obstructed.")
 "An unobstruct removes an obstruction from something.")

;;; ----------

(comment [Unrestrain-del-1]
 (:seq (the object of Self) " is no longer restrained.")
 "An unrestrain removes restraints on something.")

;;; ----------

(comment [Withdraw-del-2]
 (:seq (the object of Self) " is no longer stored in " (the base of Self))
 "When something is withdrawn from a container, it is no longer stored in the container.")

;;; ----------

(comment [Withdraw-del-3]
 (:seq (the object of Self) " is no longer stored in " (the base of Self))
 "When something is withdrawn from a container, it is no longer stored in the container.")

;;; ----------


;;; ----------------------------------------

(enable-installing-inverses)  ; (Re-enable it after restoring KB state)

;;; ----------------------------------------
;;;	KM'S INTERNAL BEHAVIOR PARAMETER VALUES
;;; ----------------------------------------

(SETQ *RECURSIVE-CLASSIFICATION* 'T)
(SETQ *INDIRECT-CLASSIFICATION* 'T)
(SETQ *RECURSIVE-PROTOTYPES* 'NIL)
(SETQ *EAGERLY-UNIFY-PROTOTYPES* 'T)
(SETQ *SANITY-CHECKS* 'NIL)
(SETQ *SLOT-CHECKING-ENABLED* 'NIL)
(SETQ *LOGGING* 'NIL)
(SETQ *MAX-PADDING-INSTANCES* '0)
(SETQ *TOLERANCE* '1.e-4)
(SETQ *OUTPUT-PRECISION* '3)
(SETQ *INSTANCE-OF-IS-FLUENT* 'NIL)
(SETQ *KM-DEPTH-LIMIT* 'NIL)
(SETQ *LINEAR-PATHS* 'NIL)
(SETQ *PROJECT-CACHED-VALUES-ONLY* 'NIL)
(SETQ *RECORD-EXPLANATIONS-FOR-CLONES* 'T)
(SETQ *COERCE-UNDECLARED-SLOTS* 'NIL)
(SETQ *RECORD-EXPLANATIONS* 'T)
(SETQ *RECORD-SOURCES* 'T)
(SETQ *ADD-COMMENTS-TO-NAMES* 'T)
(SETQ *CHECK-KB* 'NIL)
(SETQ *CLASSIFY-SLOTLESS-INSTANCES* 'T)
(SETQ *BUILT-IN-REMOVE-SUBSUMERS-SLOTS* '(|instance-of| |classes|
                                          |superclasses| |member-type|))
(SETQ *BUILT-IN-REMOVE-SUBSUMEES-SLOTS* '(|subclasses| |prototype-of| |domain|
                                          |range|))
(SETQ *DEFAULT-FLUENT-STATUS* '|*Fluent|)
(SETQ *ACTIVE-OBJ-STACK* 'NIL)
(SETQ *ON-ERROR* 'DEBUG)
(SETQ *JUSTIFY-LEAVES* 'NIL)
(SETQ *START-JUSTIFICATIONS-WITH-BECAUSE* 'T)
(SETQ *CLASSIFICATION-ENABLED* 'T)
(SETQ *PROTOTYPE-CLASSIFICATION-ENABLED* 'T)
(SETQ *USE-INHERITANCE* 'T)
(SETQ *USE-PROTOTYPES* 'T)
(SETQ *DEVELOPER-MODE* 'NIL)
(SETQ *UNCLONABLE-SLOTS* '(|prototype-participant-of| |prototype-participants|
                           |prototype-of| |prototypes| |prototype-scope|
                           |has-clones| |has-built-clones|))
(SETQ *CALLED-FORCES-UNIFICATION* 'T)


;;; ----------------------------------------
;;;	KM'S INTERNAL STATE PARAMETER VALUES
;;; ----------------------------------------

(SETQ *KM-GENSYM-COUNTER* '5)
(SETQ *VISIBLE-THEORIES* 'NIL)
(SETQ *CURR-PROTOTYPE* 'NIL)
(SETQ *CURR-SITUATION* '|*Global|)
(SETQ *CLASSES-USING-ASSERTIONS-SLOT* 'NIL)
(SETQ *ARE-SOME-DEFINITIONS* 'T)
(SETQ *ARE-SOME-PROTOTYPE-DEFINITIONS* 'NIL)
(SETQ *ARE-SOME-PROTOTYPES* 'NIL)
(SETQ *ARE-SOME-SUBSLOTS* 'T)
(SETQ *ARE-SOME-CONSTRAINTS* 'T)
(SETQ *ARE-SOME-TAGS* 'NIL)
(SETQ *ARE-SOME-DEFAULTS* 'T)
(SETQ *AM-IN-SITUATIONS-MODE* 'NIL)

;;; --- end (1882 frames written) ---

